// RUN: dmz %s -res-dump -no-remove-unused 2>&1 | filecheck %s --match-full-lines
fn binaryLhsKnown(y: i32) -> i32 {
    let x: i32 = 2;

    return (0 && y) + (1 || x);
}
// CHECK:       ResolvedBinaryOperator:bool '+'
// CHECK-NEXT:       | value: 1
// CHECK-NEXT:         ResolvedGroupingExpr:bool
// CHECK-NEXT:           ResolvedBinaryOperator:bool '&&'
// CHECK-NEXT:             ResolvedIntLiteral:i32 '0'
// CHECK-NEXT:             ResolvedDeclRefExpr:i32 y
// CHECK-NEXT:         ResolvedGroupingExpr:bool
// CHECK-NEXT:           ResolvedBinaryOperator:bool '||'
// CHECK-NEXT:             ResolvedIntLiteral:i32 '1'
// CHECK-NEXT:             ResolvedDeclRefExpr:i32 x

fn unaryNonConst() -> i32 {
    let x: i32 = 2;

    return !x;
}
// CHECK:    ResolvedReturnStmt
// CHECK-NEXT:      ResolvedUnaryOperator:bool '!'
// CHECK-NEXT:        ResolvedDeclRefExpr:i32 x

fn ret() -> i32 {
    return 1;
}

fn call() -> void {
    if (!ret()) {
        return;
    }
}
// CHECK:    ResolvedIfStmt
// CHECK-NEXT:      ResolvedUnaryOperator:bool '!'
// CHECK-NEXT:        ResolvedCallExpr:i32 
// CHECK-NEXT:          ResolvedDeclRefExpr:fn()->i32 ret
// CHECK-NEXT:      ResolvedBlock
// CHECK-NEXT:        ResolvedReturnStmt

fn lhsKnownRhsNot(y: i32) -> i32 {
    return 1 && y;
}
// CHECK:    ResolvedReturnStmt
// CHECK-NEXT:      ResolvedBinaryOperator:bool '&&'
// CHECK-NEXT:        ResolvedIntLiteral:i32 '1'
// CHECK-NEXT:        ResolvedDeclRefExpr:i32 y

fn lhsUnknownRhsFalse(x: i32) -> i32 {
    return x && 0;
}
// CHECK:    ResolvedReturnStmt
// CHECK-NEXT:      ResolvedBinaryOperator:bool '&&'
// CHECK-NEXT:        ResolvedDeclRefExpr:i32 x
// CHECK-NEXT:        ResolvedIntLiteral:i32 '0'

fn lhsUnknownRhsTrue(x: i32) -> i32 {
    return x || 1;
}
// CHECK:    ResolvedReturnStmt
// CHECK-NEXT:      ResolvedBinaryOperator:bool '||'
// CHECK-NEXT:        ResolvedDeclRefExpr:i32 x
// CHECK-NEXT:        ResolvedIntLiteral:i32 '1'

fn lhsUnknownRhsFalseOr(x: i32) -> i32 {
    return x || 0;
}
// CHECK:    ResolvedReturnStmt
// CHECK-NEXT:      ResolvedBinaryOperator:bool '||'
// CHECK-NEXT:        ResolvedDeclRefExpr:i32 x
// CHECK-NEXT:        ResolvedIntLiteral:i32 '0'

fn main() -> void {}
