// RUN: compiler %s -res-dump 2>&1 | filecheck %s --match-full-lines
fn binaryLhsKnown(y: int) -> int {
    let x: int = 2;

    return (0 && y) + (1 || x);
}
// CHECK:       ResolvedBinaryOperator:int '+'
// CHECK-NEXT:       | value:int 1
// CHECK-NEXT:         ResolvedGroupingExpr:int
// CHECK-NEXT:           ResolvedBinaryOperator:int '&&'
// CHECK-NEXT:             ResolvedIntLiteral:int '0'
// CHECK-NEXT:             ResolvedDeclRefExpr:int y
// CHECK-NEXT:         ResolvedGroupingExpr:int
// CHECK-NEXT:           ResolvedBinaryOperator:int '||'
// CHECK-NEXT:             ResolvedIntLiteral:int '1'
// CHECK-NEXT:             ResolvedDeclRefExpr:int x

fn unaryNonConst() -> int {
    let x: int = 2;

    return !x;
}
// CHECK:    ResolvedReturnStmt
// CHECK-NEXT:      ResolvedUnaryOperator:int '!'
// CHECK-NEXT:        ResolvedDeclRefExpr:int x

fn ret() -> int {
    return 1;
}

fn call() -> void {
    if (!ret()) {
        return;
    }
}
// CHECK:    ResolvedIfStmt
// CHECK-NEXT:      ResolvedUnaryOperator:int '!'
// CHECK-NEXT:        ResolvedCallExpr:int ret
// CHECK-NEXT:      ResolvedBlock
// CHECK-NEXT:        ResolvedReturnStmt

fn lhsKnownRhsNot(y: int) -> int {
    return 1 && y;
}
// CHECK:    ResolvedReturnStmt
// CHECK-NEXT:      ResolvedBinaryOperator:int '&&'
// CHECK-NEXT:        ResolvedIntLiteral:int '1'
// CHECK-NEXT:        ResolvedDeclRefExpr:int y

fn lhsUnknownRhsFalse(x: int) -> int {
    return x && 0;
}
// CHECK:    ResolvedReturnStmt
// CHECK-NEXT:      ResolvedBinaryOperator:int '&&'
// CHECK-NEXT:        ResolvedDeclRefExpr:int x
// CHECK-NEXT:        ResolvedIntLiteral:int '0'

fn lhsUnknownRhsTrue(x: int) -> int {
    return x || 1;
}
// CHECK:    ResolvedReturnStmt
// CHECK-NEXT:      ResolvedBinaryOperator:int '||'
// CHECK-NEXT:        ResolvedDeclRefExpr:int x
// CHECK-NEXT:        ResolvedIntLiteral:int '1'

fn lhsUnknownRhsFalseOr(x: int) -> int {
    return x || 0;
}
// CHECK:    ResolvedReturnStmt
// CHECK-NEXT:      ResolvedBinaryOperator:int '||'
// CHECK-NEXT:        ResolvedDeclRefExpr:int x
// CHECK-NEXT:        ResolvedIntLiteral:int '0'

fn main() -> void {}
