// RUN: compiler %s -res-dump 2>&1 | filecheck %s --match-full-lines
fn foo(n: int) -> void {}

fn prefix(x: int) -> void {
    foo(!1);
    foo(!0);
    foo(!x);
    foo(-x);
    foo(-1);
}
// CHECK: ResolvedFunctionDecl: prefix:
// CHECK-NEXT:   ResolvedParamDecl: x: int
// CHECK-NEXT:   ResolvedBlock
// CHECK-NEXT:     ResolvedCallExpr: foo
// CHECK-NEXT:       ResolvedUnaryOperator: '!'
// CHECK-NEXT:       | value: 0
// CHECK-NEXT:         ResolvedNumberLiteral: '1'
// CHECK-NEXT:     ResolvedCallExpr: foo
// CHECK-NEXT:       ResolvedUnaryOperator: '!'
// CHECK-NEXT:       | value: 1
// CHECK-NEXT:         ResolvedNumberLiteral: '0'
// CHECK-NEXT:     ResolvedCallExpr: foo
// CHECK-NEXT:       ResolvedUnaryOperator: '!'
// CHECK-NEXT:         ResolvedDeclRefExpr: x
// CHECK-NEXT:     ResolvedCallExpr: foo
// CHECK-NEXT:       ResolvedUnaryOperator: '-'
// CHECK-NEXT:         ResolvedDeclRefExpr: x
// CHECK-NEXT:     ResolvedCallExpr: foo
// CHECK-NEXT:       ResolvedUnaryOperator: '-'
// CHECK-NEXT:       | value: -1
// CHECK-NEXT:         ResolvedNumberLiteral: '1'

fn multiplicative(x: int) -> void {
    foo(5 * 3);
    foo(20 / 4);

    foo(x * 1);
    foo(1 * x);
}
// CHECK: ResolvedFunctionDecl: multiplicative:
// CHECK-NEXT:   ResolvedParamDecl: x: int
// CHECK-NEXT:   ResolvedBlock
// CHECK-NEXT:     ResolvedCallExpr: foo
// CHECK-NEXT:       ResolvedBinaryOperator: '*'
// CHECK-NEXT:       | value: 15
// CHECK-NEXT:         ResolvedNumberLiteral: '5'
// CHECK-NEXT:         ResolvedNumberLiteral: '3'
// CHECK-NEXT:     ResolvedCallExpr: foo
// CHECK-NEXT:       ResolvedBinaryOperator: '/'
// CHECK-NEXT:       | value: 5
// CHECK-NEXT:         ResolvedNumberLiteral: '20'
// CHECK-NEXT:         ResolvedNumberLiteral: '4'
// CHECK-NEXT:     ResolvedCallExpr: foo
// CHECK-NEXT:       ResolvedBinaryOperator: '*'
// CHECK-NEXT:         ResolvedDeclRefExpr: x
// CHECK-NEXT:         ResolvedNumberLiteral: '1'
// CHECK-NEXT:     ResolvedCallExpr: foo
// CHECK-NEXT:       ResolvedBinaryOperator: '*'
// CHECK-NEXT:         ResolvedNumberLiteral: '1'
// CHECK-NEXT:         ResolvedDeclRefExpr: x

fn additive() -> void {
    foo(5 + 3);
    foo(20 - 4);
}
// CHECK: ResolvedFunctionDecl: additive:
// CHECK-NEXT:   ResolvedBlock
// CHECK-NEXT:     ResolvedCallExpr: foo
// CHECK-NEXT:       ResolvedBinaryOperator: '+'
// CHECK-NEXT:       | value: 8
// CHECK-NEXT:         ResolvedNumberLiteral: '5'
// CHECK-NEXT:         ResolvedNumberLiteral: '3'
// CHECK-NEXT:     ResolvedCallExpr: foo
// CHECK-NEXT:       ResolvedBinaryOperator: '-'
// CHECK-NEXT:       | value: 16
// CHECK-NEXT:         ResolvedNumberLiteral: '20'
// CHECK-NEXT:         ResolvedNumberLiteral: '4'

fn comparison() -> void {
    foo(2 < 5);
    foo(5 < 2);

    foo(2 > 5);
    foo(5 > 2);
}
// CHECK: ResolvedFunctionDecl: comparison:
// CHECK-NEXT:   ResolvedBlock
// CHECK-NEXT:     ResolvedCallExpr: foo
// CHECK-NEXT:       ResolvedBinaryOperator: '<'
// CHECK-NEXT:       | value: 1
// CHECK-NEXT:         ResolvedNumberLiteral: '2'
// CHECK-NEXT:         ResolvedNumberLiteral: '5'
// CHECK-NEXT:     ResolvedCallExpr: foo
// CHECK-NEXT:       ResolvedBinaryOperator: '<'
// CHECK-NEXT:       | value: 0
// CHECK-NEXT:         ResolvedNumberLiteral: '5'
// CHECK-NEXT:         ResolvedNumberLiteral: '2'
// CHECK-NEXT:     ResolvedCallExpr: foo
// CHECK-NEXT:       ResolvedBinaryOperator: '>'
// CHECK-NEXT:       | value: 0
// CHECK-NEXT:         ResolvedNumberLiteral: '2'
// CHECK-NEXT:         ResolvedNumberLiteral: '5'
// CHECK-NEXT:     ResolvedCallExpr: foo
// CHECK-NEXT:       ResolvedBinaryOperator: '>'
// CHECK-NEXT:       | value: 1
// CHECK-NEXT:         ResolvedNumberLiteral: '5'
// CHECK-NEXT:         ResolvedNumberLiteral: '2'

fn equality() -> void {
    foo(2 == 2);
    foo(5 == 3);
}
// CHECK: ResolvedFunctionDecl: equality:
// CHECK-NEXT:   ResolvedBlock
// CHECK-NEXT:     ResolvedCallExpr: foo
// CHECK-NEXT:       ResolvedBinaryOperator: '=='
// CHECK-NEXT:       | value: 1
// CHECK-NEXT:         ResolvedNumberLiteral: '2'
// CHECK-NEXT:         ResolvedNumberLiteral: '2'
// CHECK-NEXT:     ResolvedCallExpr: foo
// CHECK-NEXT:       ResolvedBinaryOperator: '=='
// CHECK-NEXT:       | value: 0
// CHECK-NEXT:         ResolvedNumberLiteral: '5'
// CHECK-NEXT:         ResolvedNumberLiteral: '3'

fn conjunction() -> void {
    foo(2 && 3);
    foo(0 && 1);
    foo(1 && 0);
    foo(0 && 0);
}
// CHECK: ResolvedFunctionDecl: conjunction:
// CHECK-NEXT:   ResolvedBlock
// CHECK-NEXT:     ResolvedCallExpr: foo
// CHECK-NEXT:       ResolvedBinaryOperator: '&&'
// CHECK-NEXT:       | value: 1
// CHECK-NEXT:         ResolvedNumberLiteral: '2'
// CHECK-NEXT:         ResolvedNumberLiteral: '3'
// CHECK-NEXT:     ResolvedCallExpr: foo
// CHECK-NEXT:       ResolvedBinaryOperator: '&&'
// CHECK-NEXT:       | value: 0
// CHECK-NEXT:         ResolvedNumberLiteral: '0'
// CHECK-NEXT:         ResolvedNumberLiteral: '1'
// CHECK-NEXT:     ResolvedCallExpr: foo
// CHECK-NEXT:       ResolvedBinaryOperator: '&&'
// CHECK-NEXT:       | value: 0
// CHECK-NEXT:         ResolvedNumberLiteral: '1'
// CHECK-NEXT:         ResolvedNumberLiteral: '0'
// CHECK-NEXT:     ResolvedCallExpr: foo
// CHECK-NEXT:       ResolvedBinaryOperator: '&&'
// CHECK-NEXT:       | value: 0
// CHECK-NEXT:         ResolvedNumberLiteral: '0'
// CHECK-NEXT:         ResolvedNumberLiteral: '0'

fn disjunction() -> void {
    foo(2 || 0);
    foo(0 || 2);
    foo(2 || 3);
    foo(0 || 0);
}
// CHECK: ResolvedFunctionDecl: disjunction:
// CHECK-NEXT:   ResolvedBlock
// CHECK-NEXT:     ResolvedCallExpr: foo
// CHECK-NEXT:       ResolvedBinaryOperator: '||'
// CHECK-NEXT:       | value: 1
// CHECK-NEXT:         ResolvedNumberLiteral: '2'
// CHECK-NEXT:         ResolvedNumberLiteral: '0'
// CHECK-NEXT:     ResolvedCallExpr: foo
// CHECK-NEXT:       ResolvedBinaryOperator: '||'
// CHECK-NEXT:       | value: 1
// CHECK-NEXT:         ResolvedNumberLiteral: '0'
// CHECK-NEXT:         ResolvedNumberLiteral: '2'
// CHECK-NEXT:     ResolvedCallExpr: foo
// CHECK-NEXT:       ResolvedBinaryOperator: '||'
// CHECK-NEXT:       | value: 1
// CHECK-NEXT:         ResolvedNumberLiteral: '2'
// CHECK-NEXT:         ResolvedNumberLiteral: '3'
// CHECK-NEXT:     ResolvedCallExpr: foo
// CHECK-NEXT:       ResolvedBinaryOperator: '||'
// CHECK-NEXT:       | value: 0
// CHECK-NEXT:         ResolvedNumberLiteral: '0'
// CHECK-NEXT:         ResolvedNumberLiteral: '0'

fn main() -> void {}
