// RUN: compiler %s -res-dump -no-remove-unused 2>&1 | filecheck %s --match-full-lines
fn foo(n: i32) -> void {}
fn bar(n: bool) -> void {}

fn prefix(x: i32) -> void {
    bar(!true);
    bar(!false);
    bar(!x);
    foo(-x);
    foo(-true);
}
// CHECK: ResolvedFunctionDecl prefix fn(i32)->void
// CHECK-NEXT:   ResolvedParamDecl:i32 x
// CHECK-NEXT:   ResolvedBlock
// CHECK-NEXT:     ResolvedCallExpr:void
// CHECK-NEXT:       ResolvedDeclRefExpr:fn(bool)->void bar
// CHECK-NEXT:       ResolvedUnaryOperator:bool '!'
// CHECK-NEXT:       | value: 0
// CHECK-NEXT:         ResolvedBoolLiteral:bool 'true'
// CHECK-NEXT:     ResolvedCallExpr:void
// CHECK-NEXT:       ResolvedDeclRefExpr:fn(bool)->void bar
// CHECK-NEXT:       ResolvedUnaryOperator:bool '!'
// CHECK-NEXT:       | value: 1
// CHECK-NEXT:         ResolvedBoolLiteral:bool 'false'
// CHECK-NEXT:     ResolvedCallExpr:void
// CHECK-NEXT:       ResolvedDeclRefExpr:fn(bool)->void bar
// CHECK-NEXT:       ResolvedUnaryOperator:bool '!'
// CHECK-NEXT:         ResolvedDeclRefExpr:i32 x
// CHECK-NEXT:     ResolvedCallExpr:void
// CHECK-NEXT:       ResolvedDeclRefExpr:fn(i32)->void foo
// CHECK-NEXT:       ResolvedUnaryOperator:i32 '-'
// CHECK-NEXT:         ResolvedDeclRefExpr:i32 x
// CHECK-NEXT:     ResolvedCallExpr:void
// CHECK-NEXT:       ResolvedDeclRefExpr:fn(i32)->void foo
// CHECK-NEXT:       ResolvedUnaryOperator:bool '-'
// CHECK-NEXT:       | value: -1
// CHECK-NEXT:         ResolvedBoolLiteral:bool 'true'

fn multiplicative(x: i32) -> void {
    foo(5 * 3);
    foo(20 / 4);

    foo(x * 1);
    foo(1 * x);
}
// CHECK: ResolvedFunctionDecl multiplicative fn(i32)->void
// CHECK-NEXT:   ResolvedParamDecl:i32 x
// CHECK-NEXT:   ResolvedBlock
// CHECK-NEXT:     ResolvedCallExpr:void
// CHECK-NEXT:       ResolvedDeclRefExpr:fn(i32)->void foo
// CHECK-NEXT:       ResolvedBinaryOperator:i32 '*'
// CHECK-NEXT:       | value: 15
// CHECK-NEXT:         ResolvedIntLiteral:i32 '5'
// CHECK-NEXT:         ResolvedIntLiteral:i32 '3'
// CHECK-NEXT:     ResolvedCallExpr:void
// CHECK-NEXT:       ResolvedDeclRefExpr:fn(i32)->void foo
// CHECK-NEXT:       ResolvedBinaryOperator:i32 '/'
// CHECK-NEXT:       | value: 5
// CHECK-NEXT:         ResolvedIntLiteral:i32 '20'
// CHECK-NEXT:         ResolvedIntLiteral:i32 '4'
// CHECK-NEXT:     ResolvedCallExpr:void
// CHECK-NEXT:       ResolvedDeclRefExpr:fn(i32)->void foo
// CHECK-NEXT:       ResolvedBinaryOperator:i32 '*'
// CHECK-NEXT:         ResolvedDeclRefExpr:i32 x
// CHECK-NEXT:         ResolvedIntLiteral:i32 '1'
// CHECK-NEXT:     ResolvedCallExpr:void
// CHECK-NEXT:       ResolvedDeclRefExpr:fn(i32)->void foo
// CHECK-NEXT:       ResolvedBinaryOperator:i32 '*'
// CHECK-NEXT:         ResolvedIntLiteral:i32 '1'
// CHECK-NEXT:         ResolvedDeclRefExpr:i32 x

fn additive() -> void {
    foo(5 + 3);
    foo(20 - 4);
}
// CHECK: ResolvedFunctionDecl additive fn()->void
// CHECK-NEXT:   ResolvedBlock
// CHECK-NEXT:     ResolvedCallExpr:void
// CHECK-NEXT:       ResolvedDeclRefExpr:fn(i32)->void foo
// CHECK-NEXT:       ResolvedBinaryOperator:i32 '+'
// CHECK-NEXT:       | value: 8
// CHECK-NEXT:         ResolvedIntLiteral:i32 '5'
// CHECK-NEXT:         ResolvedIntLiteral:i32 '3'
// CHECK-NEXT:     ResolvedCallExpr:void
// CHECK-NEXT:       ResolvedDeclRefExpr:fn(i32)->void foo
// CHECK-NEXT:       ResolvedBinaryOperator:i32 '-'
// CHECK-NEXT:       | value: 16
// CHECK-NEXT:         ResolvedIntLiteral:i32 '20'
// CHECK-NEXT:         ResolvedIntLiteral:i32 '4'

fn comparison() -> void {
    bar(2 < 5);
    bar(5 < 2);

    bar(2 > 5);
    bar(5 > 2);
}
// CHECK: ResolvedFunctionDecl comparison fn()->void
// CHECK-NEXT:   ResolvedBlock
// CHECK-NEXT:     ResolvedCallExpr:void
// CHECK-NEXT:       ResolvedDeclRefExpr:fn(bool)->void bar
// CHECK-NEXT:       ResolvedBinaryOperator:bool '<'
// CHECK-NEXT:       | value: 1
// CHECK-NEXT:         ResolvedIntLiteral:i32 '2'
// CHECK-NEXT:         ResolvedIntLiteral:i32 '5'
// CHECK-NEXT:     ResolvedCallExpr:void
// CHECK-NEXT:       ResolvedDeclRefExpr:fn(bool)->void bar
// CHECK-NEXT:       ResolvedBinaryOperator:bool '<'
// CHECK-NEXT:       | value: 0
// CHECK-NEXT:         ResolvedIntLiteral:i32 '5'
// CHECK-NEXT:         ResolvedIntLiteral:i32 '2'
// CHECK-NEXT:     ResolvedCallExpr:void
// CHECK-NEXT:       ResolvedDeclRefExpr:fn(bool)->void bar
// CHECK-NEXT:       ResolvedBinaryOperator:bool '>'
// CHECK-NEXT:       | value: 0
// CHECK-NEXT:         ResolvedIntLiteral:i32 '2'
// CHECK-NEXT:         ResolvedIntLiteral:i32 '5'
// CHECK-NEXT:     ResolvedCallExpr:void
// CHECK-NEXT:       ResolvedDeclRefExpr:fn(bool)->void bar
// CHECK-NEXT:       ResolvedBinaryOperator:bool '>'
// CHECK-NEXT:       | value: 1
// CHECK-NEXT:         ResolvedIntLiteral:i32 '5'
// CHECK-NEXT:         ResolvedIntLiteral:i32 '2'

fn equality() -> void {
    bar(2 == 2);
    bar(5 == 3);
}
// CHECK: ResolvedFunctionDecl equality fn()->void
// CHECK-NEXT:   ResolvedBlock
// CHECK-NEXT:     ResolvedCallExpr:void
// CHECK-NEXT:       ResolvedDeclRefExpr:fn(bool)->void bar
// CHECK-NEXT:       ResolvedBinaryOperator:bool '=='
// CHECK-NEXT:       | value: 1
// CHECK-NEXT:         ResolvedIntLiteral:i32 '2'
// CHECK-NEXT:         ResolvedIntLiteral:i32 '2'
// CHECK-NEXT:     ResolvedCallExpr:void
// CHECK-NEXT:       ResolvedDeclRefExpr:fn(bool)->void bar
// CHECK-NEXT:       ResolvedBinaryOperator:bool '=='
// CHECK-NEXT:       | value: 0
// CHECK-NEXT:         ResolvedIntLiteral:i32 '5'
// CHECK-NEXT:         ResolvedIntLiteral:i32 '3'

fn conjunction() -> void {
    bar(2 && 3);
    bar(0 && 1);
    bar(1 && 0);
    bar(0 && 0);
}
// CHECK: ResolvedFunctionDecl conjunction fn()->void
// CHECK-NEXT:   ResolvedBlock
// CHECK-NEXT:     ResolvedCallExpr:void
// CHECK-NEXT:       ResolvedDeclRefExpr:fn(bool)->void bar
// CHECK-NEXT:       ResolvedBinaryOperator:bool '&&'
// CHECK-NEXT:       | value: 1
// CHECK-NEXT:         ResolvedIntLiteral:i32 '2'
// CHECK-NEXT:         ResolvedIntLiteral:i32 '3'
// CHECK-NEXT:     ResolvedCallExpr:void
// CHECK-NEXT:       ResolvedDeclRefExpr:fn(bool)->void bar
// CHECK-NEXT:       ResolvedBinaryOperator:bool '&&'
// CHECK-NEXT:       | value: 0
// CHECK-NEXT:         ResolvedIntLiteral:i32 '0'
// CHECK-NEXT:         ResolvedIntLiteral:i32 '1'
// CHECK-NEXT:     ResolvedCallExpr:void
// CHECK-NEXT:       ResolvedDeclRefExpr:fn(bool)->void bar
// CHECK-NEXT:       ResolvedBinaryOperator:bool '&&'
// CHECK-NEXT:       | value: 0
// CHECK-NEXT:         ResolvedIntLiteral:i32 '1'
// CHECK-NEXT:         ResolvedIntLiteral:i32 '0'
// CHECK-NEXT:     ResolvedCallExpr:void
// CHECK-NEXT:       ResolvedDeclRefExpr:fn(bool)->void bar
// CHECK-NEXT:       ResolvedBinaryOperator:bool '&&'
// CHECK-NEXT:       | value: 0
// CHECK-NEXT:         ResolvedIntLiteral:i32 '0'
// CHECK-NEXT:         ResolvedIntLiteral:i32 '0'

fn disjunction() -> void {
    bar(2 || 0);
    bar(0 || 2);
    bar(2 || 3);
    bar(0 || 0);
}
// CHECK: ResolvedFunctionDecl disjunction fn()->void
// CHECK-NEXT:   ResolvedBlock
// CHECK-NEXT:     ResolvedCallExpr:void
// CHECK-NEXT:       ResolvedDeclRefExpr:fn(bool)->void bar
// CHECK-NEXT:       ResolvedBinaryOperator:bool '||'
// CHECK-NEXT:       | value: 1
// CHECK-NEXT:         ResolvedIntLiteral:i32 '2'
// CHECK-NEXT:         ResolvedIntLiteral:i32 '0'
// CHECK-NEXT:     ResolvedCallExpr:void
// CHECK-NEXT:       ResolvedDeclRefExpr:fn(bool)->void bar
// CHECK-NEXT:       ResolvedBinaryOperator:bool '||'
// CHECK-NEXT:       | value: 1
// CHECK-NEXT:         ResolvedIntLiteral:i32 '0'
// CHECK-NEXT:         ResolvedIntLiteral:i32 '2'
// CHECK-NEXT:     ResolvedCallExpr:void
// CHECK-NEXT:       ResolvedDeclRefExpr:fn(bool)->void bar
// CHECK-NEXT:       ResolvedBinaryOperator:bool '||'
// CHECK-NEXT:       | value: 1
// CHECK-NEXT:         ResolvedIntLiteral:i32 '2'
// CHECK-NEXT:         ResolvedIntLiteral:i32 '3'
// CHECK-NEXT:     ResolvedCallExpr:void
// CHECK-NEXT:       ResolvedDeclRefExpr:fn(bool)->void bar
// CHECK-NEXT:       ResolvedBinaryOperator:bool '||'
// CHECK-NEXT:       | value: 0
// CHECK-NEXT:         ResolvedIntLiteral:i32 '0'
// CHECK-NEXT:         ResolvedIntLiteral:i32 '0'

fn main() -> void {}
