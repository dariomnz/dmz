// RUN: compiler %s -ast-dump 2>&1 | filecheck %s

const e = error {
    ERROR_ONE,
    ERROR_TWO,
    ERROR_THREE,
};
// CHECK:   DeclStmt
// CHECK-NEXT:     VarDecl:const  e
// CHECK-NEXT:       ErrorGroupExprDecl 
// CHECK-NEXT:         ErrorDecl ERROR_ONE
// CHECK-NEXT:         ErrorDecl ERROR_TWO
// CHECK-NEXT:         ErrorDecl ERROR_THREE

fn foo(x:i32) -> i32! {
    if (x == 1){
        return e.ERROR_ONE;
    }else if (x == 2){
        return e.ERROR_TWO;
    }
    return 10;
}
// CHECK: FunctionDecl foo -> i32!
// CHECK-NEXT:     ParamDecl:Int i32 x
// CHECK-NEXT:     Block
// CHECK-NEXT:       IfStmt
// CHECK-NEXT:         BinaryOperator '=='
// CHECK-NEXT:           DeclRefExpr x
// CHECK-NEXT:           IntLiteral '1'
// CHECK-NEXT:         Block
// CHECK-NEXT:           ReturnStmt
// CHECK-NEXT:             MemberExpr .ERROR_ONE
// CHECK-NEXT:               DeclRefExpr e
// CHECK-NEXT:         Block
// CHECK-NEXT:           IfStmt
// CHECK-NEXT:             BinaryOperator '=='
// CHECK-NEXT:               DeclRefExpr x
// CHECK-NEXT:               IntLiteral '2'
// CHECK-NEXT:             Block
// CHECK-NEXT:               ReturnStmt
// CHECK-NEXT:                 MemberExpr .ERROR_TWO
// CHECK-NEXT:                   DeclRefExpr e
// CHECK-NEXT:       ReturnStmt
// CHECK-NEXT:         IntLiteral '10'

extern fn printf(fmt:*u8, ...) -> i32;

fn main() -> void {
    let result = foo(1);
    
    let err = catch result;
    if (err) {
        printf(&"%s\n", err);
    }
    
    let result2 = try foo(1);
    
    printf(&"No error %d\n", result);

    printf(&"No safe error %d\n", try foo(10));
}
// CHECK: FunctionDecl main -> void
// CHECK-NEXT:     Block
// CHECK-NEXT:       DeclStmt
// CHECK-NEXT:         VarDecl: result
// CHECK-NEXT:           CallExpr
// CHECK-NEXT:             DeclRefExpr foo
// CHECK-NEXT:             IntLiteral '1'
// CHECK-NEXT:       DeclStmt
// CHECK-NEXT:         VarDecl: err
// CHECK-NEXT:           CatchErrorExpr 
// CHECK-NEXT:             DeclRefExpr result
// CHECK-NEXT:       IfStmt
// CHECK-NEXT:         DeclRefExpr err
// CHECK-NEXT:         Block
// CHECK-NEXT:           CallExpr
// CHECK-NEXT:             DeclRefExpr printf
// CHECK-NEXT:             RefPtrExpr
// CHECK-NEXT:               StringLiteral '"%s\n"'
// CHECK-NEXT:             DeclRefExpr err
// CHECK-NEXT:       DeclStmt
// CHECK-NEXT:         VarDecl: result2
// CHECK-NEXT:           TryErrorExpr 
// CHECK-NEXT:             CallExpr
// CHECK-NEXT:               DeclRefExpr foo
// CHECK-NEXT:               IntLiteral '1'
// CHECK-NEXT:       CallExpr
// CHECK-NEXT:         DeclRefExpr printf
// CHECK-NEXT:         RefPtrExpr
// CHECK-NEXT:           StringLiteral '"No error %d\n"'
// CHECK-NEXT:         DeclRefExpr result
// CHECK-NEXT:       CallExpr
// CHECK-NEXT:         DeclRefExpr printf
// CHECK-NEXT:         RefPtrExpr
// CHECK-NEXT:           StringLiteral '"No safe error %d\n"'
// CHECK-NEXT:         TryErrorExpr 
// CHECK-NEXT:           CallExpr
// CHECK-NEXT:             DeclRefExpr foo
// CHECK-NEXT:             IntLiteral '10'