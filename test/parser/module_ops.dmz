// RUN: compiler %s -module -ast-dump 2>&1 | filecheck %s
module ops {
    const std = import("asdf");
    struct str_ops {
        x:i32,
        y:i32,
        z:i32,
    }

    fn print(x:i32) -> void {
        println(x);
    }

    extern fn printf(fmt:*u8, ...) -> i32;

    fn println(n:i32) -> void {
        printf(&"%d\n", n);
    }

    module integer {
        fn add(x:i32, y:i32) -> i32 {
            return x + y;
        }

        fn sub(x:i32, y:i32) -> i32 {
            return x - y;
        }
    }
}
// CHECK: ModuleDecl ops
// CHECK-NEXT:   DeclStmt
// CHECK-NEXT:     VarDecl:const  std
// CHECK-NEXT:       ImportExpr asdf
// CHECK-NEXT:   StructDecl str_ops
// CHECK-NEXT:     FieldDecl:i32 x
// CHECK-NEXT:     FieldDecl:i32 y
// CHECK-NEXT:     FieldDecl:i32 z
// CHECK-NEXT:   FunctionDecl print -> void
// CHECK-NEXT:     ParamDecl:Int i32 x
// CHECK-NEXT:     Block
// CHECK-NEXT:       CallExpr
// CHECK-NEXT:         DeclRefExpr println
// CHECK-NEXT:         DeclRefExpr x
// CHECK-NEXT:   ExternFunctionDecl printf -> i32
// CHECK-NEXT:     ParamDecl:UInt *u8 fmt
// CHECK-NEXT:     ParamDecl:vararg ...
// CHECK-NEXT:   FunctionDecl println -> void
// CHECK-NEXT:     ParamDecl:Int i32 n
// CHECK-NEXT:     Block
// CHECK-NEXT:       CallExpr
// CHECK-NEXT:         DeclRefExpr printf
// CHECK-NEXT:         RefPtrExpr
// CHECK-NEXT:           StringLiteral '"%d\n"'
// CHECK-NEXT:         DeclRefExpr n
// CHECK-NEXT:   ModuleDecl integer
// CHECK-NEXT:     FunctionDecl add -> i32
// CHECK-NEXT:       ParamDecl:Int i32 x
// CHECK-NEXT:       ParamDecl:Int i32 y
// CHECK-NEXT:       Block
// CHECK-NEXT:         ReturnStmt
// CHECK-NEXT:           BinaryOperator '+'
// CHECK-NEXT:             DeclRefExpr x
// CHECK-NEXT:             DeclRefExpr y
// CHECK-NEXT:     FunctionDecl sub -> i32
// CHECK-NEXT:       ParamDecl:Int i32 x
// CHECK-NEXT:       ParamDecl:Int i32 y
// CHECK-NEXT:       Block
// CHECK-NEXT:         ReturnStmt
// CHECK-NEXT:           BinaryOperator '-'
// CHECK-NEXT:             DeclRefExpr x
// CHECK-NEXT:             DeclRefExpr y