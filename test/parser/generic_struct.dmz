// RUN: compiler %s -ast-dump 2>&1 | filecheck %s

extern fn printf(fmt:*u8, ...) -> i32;

struct Point<T> {
    x:T,
    y:T,
}
// CHECK: StructDecl Point<T>
// CHECK-NEXT:   FieldDecl:Custom T x
// CHECK-NEXT:   FieldDecl:Custom T y

fn main() -> void {
    let p1 = Point<i32>{x:1, y:2};
    let p:Point<i32>;
    p.x = 1;
    p.y = 2;
    printf(&"Point %d %d\n", p.x, p.y);
}
// CHECK: FunctionDecl main -> Void void
// CHECK-NEXT:   Block
// CHECK-NEXT:     DeclStmt
// CHECK-NEXT:       VarDecl: p1
// CHECK-NEXT:         StructInstantiationExpr:Custom Point<Int i32>
// CHECK-NEXT:           FieldInitStmt x
// CHECK-NEXT:             IntLiteral '1'
// CHECK-NEXT:           FieldInitStmt y
// CHECK-NEXT:             IntLiteral '2'
// CHECK-NEXT:     DeclStmt
// CHECK-NEXT:       VarDecl:Custom Point<Int i32> p
// CHECK-NEXT:     Assignment
// CHECK-NEXT:       MemberExpr .x
// CHECK-NEXT:         DeclRefExpr p
// CHECK-NEXT:       IntLiteral '1'
// CHECK-NEXT:     Assignment
// CHECK-NEXT:       MemberExpr .y
// CHECK-NEXT:         DeclRefExpr p
// CHECK-NEXT:       IntLiteral '2'
// CHECK-NEXT:     CallExpr
// CHECK-NEXT:       DeclRefExpr printf
// CHECK-NEXT:       RefPtrExpr
// CHECK-NEXT:         StringLiteral '"Point %d %d\n"'
// CHECK-NEXT:       MemberExpr .x
// CHECK-NEXT:         DeclRefExpr p
// CHECK-NEXT:       MemberExpr .y
// CHECK-NEXT:         DeclRefExpr p