// RUN: compiler %s -cfg-dump 2>&1 | filecheck %s --match-full-lines
fn main() -> void {
    5;
    while (4) {
        3;
    }

    1;
}
// CHECK: main:
// CHECK-NEXT: [6 (entry)]
// CHECK-NEXT:   preds:
// CHECK-NEXT:   succs: 5
// CHECK-NEXT:
// CHECK-NEXT: [5]
// CHECK-NEXT:   preds: 6
// CHECK-NEXT:   succs: 4
// CHECK-NEXT:   ResolvedIntLiteral:i32 '5'
// CHECK-NEXT:
// CHECK-NEXT: [4]
// CHECK-NEXT:   preds: 2 5
// CHECK-NEXT:   succs: 1(U) 3
// CHECK-NEXT:   ResolvedIntLiteral:i32 '4'
// CHECK-NEXT:   ResolvedWhileStmt
// CHECK-NEXT:
// CHECK-NEXT: [3]
// CHECK-NEXT:   preds: 4
// CHECK-NEXT:   succs: 2
// CHECK-NEXT:   ResolvedIntLiteral:i32 '3'
// CHECK-NEXT:
// CHECK-NEXT: [2]
// CHECK-NEXT:   preds: 3
// CHECK-NEXT:   succs: 4
// CHECK-NEXT:
// CHECK-NEXT: [1]
// CHECK-NEXT:   preds: 4(U)
// CHECK-NEXT:   succs: 0
// CHECK-NEXT:   ResolvedIntLiteral:i32 '1'
// CHECK-NEXT:
// CHECK-NEXT: [0 (exit)]
// CHECK-NEXT:   preds: 1
// CHECK-NEXT:   succs:

fn orCondition() -> void {
    5;
    while (4 || 4 || 4) {
        3;
    }

    1;
}
// CHECK: orCondition:
// CHECK-NEXT: [6 (entry)]
// CHECK-NEXT:   preds:
// CHECK-NEXT:   succs: 5
// CHECK-NEXT:
// CHECK-NEXT: [5]
// CHECK-NEXT:   preds: 6
// CHECK-NEXT:   succs: 4
// CHECK-NEXT:   ResolvedIntLiteral:i32 '5'
// CHECK-NEXT:
// CHECK-NEXT: [4]
// CHECK-NEXT:   preds: 2 5
// CHECK-NEXT:   succs: 1(U) 3
// CHECK-NEXT:   ResolvedIntLiteral:i32 '4'
// CHECK-NEXT:   ResolvedIntLiteral:i32 '4'
// CHECK-NEXT:   ResolvedBinaryOperator:i1 '||'
// CHECK-NEXT:   ResolvedIntLiteral:i32 '4'
// CHECK-NEXT:   ResolvedBinaryOperator:i1 '||'
// CHECK-NEXT:   ResolvedWhileStmt
// CHECK-NEXT:
// CHECK-NEXT: [3]
// CHECK-NEXT:   preds: 4
// CHECK-NEXT:   succs: 2
// CHECK-NEXT:   ResolvedIntLiteral:i32 '3'
// CHECK-NEXT:
// CHECK-NEXT: [2]
// CHECK-NEXT:   preds: 3
// CHECK-NEXT:   succs: 4
// CHECK-NEXT:
// CHECK-NEXT: [1]
// CHECK-NEXT:   preds: 4(U)
// CHECK-NEXT:   succs: 0
// CHECK-NEXT:   ResolvedIntLiteral:i32 '1'
// CHECK-NEXT:
// CHECK-NEXT: [0 (exit)]
// CHECK-NEXT:   preds: 1
// CHECK-NEXT:   succs:

fn andCondition() -> void {
    5;
    while (4 && 4 && 4) {
        3;
    }

    1;
}
// CHECK: andCondition:
// CHECK-NEXT: [6 (entry)]
// CHECK-NEXT:   preds:
// CHECK-NEXT:   succs: 5
// CHECK-NEXT:
// CHECK-NEXT: [5]
// CHECK-NEXT:   preds: 6
// CHECK-NEXT:   succs: 4
// CHECK-NEXT:   ResolvedIntLiteral:i32 '5'
// CHECK-NEXT:
// CHECK-NEXT: [4]
// CHECK-NEXT:   preds: 2 5
// CHECK-NEXT:   succs: 1(U) 3
// CHECK-NEXT:   ResolvedIntLiteral:i32 '4'
// CHECK-NEXT:   ResolvedIntLiteral:i32 '4'
// CHECK-NEXT:   ResolvedBinaryOperator:i1 '&&'
// CHECK-NEXT:   ResolvedIntLiteral:i32 '4'
// CHECK-NEXT:   ResolvedBinaryOperator:i1 '&&'
// CHECK-NEXT:   ResolvedWhileStmt
// CHECK-NEXT:
// CHECK-NEXT: [3]
// CHECK-NEXT:   preds: 4
// CHECK-NEXT:   succs: 2
// CHECK-NEXT:   ResolvedIntLiteral:i32 '3'
// CHECK-NEXT:
// CHECK-NEXT: [2]
// CHECK-NEXT:   preds: 3
// CHECK-NEXT:   succs: 4
// CHECK-NEXT:
// CHECK-NEXT: [1]
// CHECK-NEXT:   preds: 4(U)
// CHECK-NEXT:   succs: 0
// CHECK-NEXT:   ResolvedIntLiteral:i32 '1'
// CHECK-NEXT:
// CHECK-NEXT: [0 (exit)]
// CHECK-NEXT:   preds: 1
// CHECK-NEXT:   succs:

fn nestedLoops() -> void {
    8;
    while (7) {
        6;
        while (5) {
            4;
        }
    }

    1;
}
// CHECK: nestedLoops:
// CHECK-NEXT: [9 (entry)]
// CHECK-NEXT:   preds:
// CHECK-NEXT:   succs: 8
// CHECK-NEXT:
// CHECK-NEXT: [8]
// CHECK-NEXT:   preds: 9
// CHECK-NEXT:   succs: 7
// CHECK-NEXT:   ResolvedIntLiteral:i32 '8'
// CHECK-NEXT:
// CHECK-NEXT: [7]
// CHECK-NEXT:   preds: 2 8
// CHECK-NEXT:   succs: 1(U) 6
// CHECK-NEXT:   ResolvedIntLiteral:i32 '7'
// CHECK-NEXT:   ResolvedWhileStmt
// CHECK-NEXT:
// CHECK-NEXT: [6]
// CHECK-NEXT:   preds: 7
// CHECK-NEXT:   succs: 5
// CHECK-NEXT:   ResolvedIntLiteral:i32 '6'
// CHECK-NEXT:
// CHECK-NEXT: [5]
// CHECK-NEXT:   preds: 3 6
// CHECK-NEXT:   succs: 2(U) 4
// CHECK-NEXT:   ResolvedIntLiteral:i32 '5'
// CHECK-NEXT:   ResolvedWhileStmt
// CHECK-NEXT:
// CHECK-NEXT: [4]
// CHECK-NEXT:   preds: 5
// CHECK-NEXT:   succs: 3
// CHECK-NEXT:   ResolvedIntLiteral:i32 '4'
// CHECK-NEXT:
// CHECK-NEXT: [3]
// CHECK-NEXT:   preds: 4
// CHECK-NEXT:   succs: 5
// CHECK-NEXT:
// CHECK-NEXT: [2]
// CHECK-NEXT:   preds: 5(U)
// CHECK-NEXT:   succs: 7
// CHECK-NEXT:
// CHECK-NEXT: [1]
// CHECK-NEXT:   preds: 7(U)
// CHECK-NEXT:   succs: 0
// CHECK-NEXT:   ResolvedIntLiteral:i32 '1'
// CHECK-NEXT:
// CHECK-NEXT: [0 (exit)]
// CHECK-NEXT:   preds: 1
// CHECK-NEXT:   succs:

fn returnMidloop() -> void {
    8;
    while (7) {
        6;
        if (6) {
            5;
            return;

            4;
        }

        3;
    }

    1;
}
// CHECK: returnMidloop:
// CHECK-NEXT: [9 (entry)]
// CHECK-NEXT:   preds:
// CHECK-NEXT:   succs: 8
// CHECK-NEXT:
// CHECK-NEXT: [8]
// CHECK-NEXT:   preds: 9
// CHECK-NEXT:   succs: 7
// CHECK-NEXT:   ResolvedIntLiteral:i32 '8'
// CHECK-NEXT:
// CHECK-NEXT: [7]
// CHECK-NEXT:   preds: 2 8
// CHECK-NEXT:   succs: 1(U) 6
// CHECK-NEXT:   ResolvedIntLiteral:i32 '7'
// CHECK-NEXT:   ResolvedWhileStmt
// CHECK-NEXT:
// CHECK-NEXT: [6]
// CHECK-NEXT:   preds: 7
// CHECK-NEXT:   succs: 3(U) 5
// CHECK-NEXT:   ResolvedIntLiteral:i32 '6'
// CHECK-NEXT:   ResolvedIntLiteral:i32 '6'
// CHECK-NEXT:   ResolvedIfStmt
// CHECK-NEXT:
// CHECK-NEXT: [5]
// CHECK-NEXT:   preds: 6
// CHECK-NEXT:   succs: 0
// CHECK-NEXT:   ResolvedIntLiteral:i32 '5'
// CHECK-NEXT:   ResolvedReturnStmt
// CHECK-NEXT:
// CHECK-NEXT: [4]
// CHECK-NEXT:   preds:
// CHECK-NEXT:   succs: 3
// CHECK-NEXT:   ResolvedIntLiteral:i32 '4'
// CHECK-NEXT:
// CHECK-NEXT: [3]
// CHECK-NEXT:   preds: 4 6(U)
// CHECK-NEXT:   succs: 2
// CHECK-NEXT:   ResolvedIntLiteral:i32 '3'
// CHECK-NEXT:
// CHECK-NEXT: [2]
// CHECK-NEXT:   preds: 3
// CHECK-NEXT:   succs: 7
// CHECK-NEXT:
// CHECK-NEXT: [1]
// CHECK-NEXT:   preds: 7(U)
// CHECK-NEXT:   succs: 0
// CHECK-NEXT:   ResolvedIntLiteral:i32 '1'
// CHECK-NEXT:
// CHECK-NEXT: [0 (exit)]
// CHECK-NEXT:   preds: 1 5
// CHECK-NEXT:   succs:

fn whileOnly() -> void {
    while (1) {

    }
}
// CHECK: whileOnly:
// CHECK-NEXT: [3 (entry)]
// CHECK-NEXT:   preds:
// CHECK-NEXT:   succs: 2
// CHECK-NEXT:
// CHECK-NEXT: [2]
// CHECK-NEXT:   preds: 1 3
// CHECK-NEXT:   succs: 0(U) 1
// CHECK-NEXT:   ResolvedIntLiteral:i32 '1'
// CHECK-NEXT:   ResolvedWhileStmt
// CHECK-NEXT:
// CHECK-NEXT: [1]
// CHECK-NEXT:   preds: 2
// CHECK-NEXT:   succs: 2
// CHECK-NEXT:
// CHECK-NEXT: [0 (exit)]
// CHECK-NEXT:   preds: 2(U)
// CHECK-NEXT:   succs:

fn whileAfterReturn() -> void {
    4;
    return;
   
    while (3) {}
    1;
}
// CHECK: whileAfterReturn:
// CHECK-NEXT: [5 (entry)]
// CHECK-NEXT:   preds:
// CHECK-NEXT:   succs: 4
// CHECK-NEXT:
// CHECK-NEXT: [4]
// CHECK-NEXT:   preds: 5
// CHECK-NEXT:   succs: 0
// CHECK-NEXT:   ResolvedIntLiteral:i32 '4'
// CHECK-NEXT:   ResolvedReturnStmt
// CHECK-NEXT:
// CHECK-NEXT: [3]
// CHECK-NEXT:   preds: 2
// CHECK-NEXT:   succs: 1(U) 2
// CHECK-NEXT:   ResolvedIntLiteral:i32 '3'
// CHECK-NEXT:   ResolvedWhileStmt
// CHECK-NEXT:
// CHECK-NEXT: [2]
// CHECK-NEXT:   preds: 3
// CHECK-NEXT:   succs: 3
// CHECK-NEXT:
// CHECK-NEXT: [1]
// CHECK-NEXT:   preds: 3(U)
// CHECK-NEXT:   succs: 0
// CHECK-NEXT:   ResolvedIntLiteral:i32 '1'
// CHECK-NEXT:
// CHECK-NEXT: [0 (exit)]
// CHECK-NEXT:   preds: 1 4
// CHECK-NEXT:   succs:

fn whileAfterIf() -> void {
    if (5) {
        4;
    }
   
    while (3) {}
    1;
}
// CHECK: whileAfterIf:
// CHECK-NEXT: [6 (entry)]
// CHECK-NEXT:   preds:
// CHECK-NEXT:   succs: 5
// CHECK-NEXT:
// CHECK-NEXT: [5]
// CHECK-NEXT:   preds: 6
// CHECK-NEXT:   succs: 3(U) 4
// CHECK-NEXT:   ResolvedIntLiteral:i32 '5'
// CHECK-NEXT:   ResolvedIfStmt
// CHECK-NEXT:
// CHECK-NEXT: [4]
// CHECK-NEXT:   preds: 5
// CHECK-NEXT:   succs: 3
// CHECK-NEXT:   ResolvedIntLiteral:i32 '4'
// CHECK-NEXT:
// CHECK-NEXT: [3]
// CHECK-NEXT:   preds: 2 4 5(U)
// CHECK-NEXT:   succs: 1(U) 2
// CHECK-NEXT:   ResolvedIntLiteral:i32 '3'
// CHECK-NEXT:   ResolvedWhileStmt
// CHECK-NEXT:
// CHECK-NEXT: [2]
// CHECK-NEXT:   preds: 3
// CHECK-NEXT:   succs: 3
// CHECK-NEXT:
// CHECK-NEXT: [1]
// CHECK-NEXT:   preds: 3(U)
// CHECK-NEXT:   succs: 0
// CHECK-NEXT:   ResolvedIntLiteral:i32 '1'
// CHECK-NEXT:
// CHECK-NEXT: [0 (exit)]
// CHECK-NEXT:   preds: 1
// CHECK-NEXT:   succs:

fn whileAfterWhile() -> void {
    while (5) {}
    while (3) {}
    1;
}
// CHECK: whileAfterWhile:
// CHECK-NEXT: [6 (entry)]
// CHECK-NEXT:   preds:
// CHECK-NEXT:   succs: 5
// CHECK-NEXT:
// CHECK-NEXT: [5]
// CHECK-NEXT:   preds: 4 6
// CHECK-NEXT:   succs: 3(U) 4
// CHECK-NEXT:   ResolvedIntLiteral:i32 '5'
// CHECK-NEXT:   ResolvedWhileStmt
// CHECK-NEXT:
// CHECK-NEXT: [4]
// CHECK-NEXT:   preds: 5
// CHECK-NEXT:   succs: 5
// CHECK-NEXT:
// CHECK-NEXT: [3]
// CHECK-NEXT:   preds: 2 5(U)
// CHECK-NEXT:   succs: 1(U) 2
// CHECK-NEXT:   ResolvedIntLiteral:i32 '3'
// CHECK-NEXT:   ResolvedWhileStmt
// CHECK-NEXT:
// CHECK-NEXT: [2]
// CHECK-NEXT:   preds: 3
// CHECK-NEXT:   succs: 3
// CHECK-NEXT:
// CHECK-NEXT: [1]
// CHECK-NEXT:   preds: 3(U)
// CHECK-NEXT:   succs: 0
// CHECK-NEXT:   ResolvedIntLiteral:i32 '1'
// CHECK-NEXT:
// CHECK-NEXT: [0 (exit)]
// CHECK-NEXT:   preds: 1
// CHECK-NEXT:   succs:
