// RUN: compiler %s -cfg-dump -no-remove-unused 2>&1 | filecheck %s --match-full-lines
fn main() -> void {
    3 || 2;
    1;
}
// CHECK: main:
// CHECK-NEXT: [2 (entry)]
// CHECK-NEXT:   preds: 
// CHECK-NEXT:   succs: 1 
// CHECK-NEXT: 
// CHECK-NEXT: [1]
// CHECK-NEXT:   preds: 2 
// CHECK-NEXT:   succs: 0 
// CHECK-NEXT:   ResolvedIntLiteral:Int i32 '3'
// CHECK-NEXT:   ResolvedIntLiteral:Int i32 '2'
// CHECK-NEXT:   ResolvedBinaryOperator:Int i1 '||'
// CHECK-NEXT:   ResolvedIntLiteral:Int i32 '1'
// CHECK-NEXT: 
// CHECK-NEXT: [0 (exit)]
// CHECK-NEXT:   preds: 1 
// CHECK-NEXT:   succs:

fn and() -> void {
    3 && 2;
    1;
}
// CHECK: and:
// CHECK-NEXT: [2 (entry)]
// CHECK-NEXT:   preds: 
// CHECK-NEXT:   succs: 1 
// CHECK-NEXT: 
// CHECK-NEXT: [1]
// CHECK-NEXT:   preds: 2 
// CHECK-NEXT:   succs: 0 
// CHECK-NEXT:   ResolvedIntLiteral:Int i32 '3'
// CHECK-NEXT:   ResolvedIntLiteral:Int i32 '2'
// CHECK-NEXT:   ResolvedBinaryOperator:Int i1 '&&'
// CHECK-NEXT:   ResolvedIntLiteral:Int i32 '1'
// CHECK-NEXT: 
// CHECK-NEXT: [0 (exit)]
// CHECK-NEXT:   preds: 1 
// CHECK-NEXT:   succs: 

fn multipleOr() -> void {
    4 || 3 || 2;
    1;
}
// CHECK: multipleOr:
// CHECK-NEXT: [2 (entry)]
// CHECK-NEXT:   preds: 
// CHECK-NEXT:   succs: 1 
// CHECK-NEXT: 
// CHECK-NEXT: [1]
// CHECK-NEXT:   preds: 2 
// CHECK-NEXT:   succs: 0 
// CHECK-NEXT:   ResolvedIntLiteral:Int i32 '4'
// CHECK-NEXT:   ResolvedIntLiteral:Int i32 '3'
// CHECK-NEXT:   ResolvedBinaryOperator:Int i1 '||'
// CHECK-NEXT:   ResolvedIntLiteral:Int i32 '2'
// CHECK-NEXT:   ResolvedBinaryOperator:Int i1 '||'
// CHECK-NEXT:   ResolvedIntLiteral:Int i32 '1'
// CHECK-NEXT: 
// CHECK-NEXT: [0 (exit)]
// CHECK-NEXT:   preds: 1 
// CHECK-NEXT:   succs: 

fn multipleAnd() -> void {
    4 && 3 && 2;
    1;
}
// CHECK: multipleAnd:
// CHECK-NEXT: [2 (entry)]
// CHECK-NEXT:   preds: 
// CHECK-NEXT:   succs: 1 
// CHECK-NEXT: 
// CHECK-NEXT: [1]
// CHECK-NEXT:   preds: 2 
// CHECK-NEXT:   succs: 0 
// CHECK-NEXT:   ResolvedIntLiteral:Int i32 '4'
// CHECK-NEXT:   ResolvedIntLiteral:Int i32 '3'
// CHECK-NEXT:   ResolvedBinaryOperator:Int i1 '&&'
// CHECK-NEXT:   ResolvedIntLiteral:Int i32 '2'
// CHECK-NEXT:   ResolvedBinaryOperator:Int i1 '&&'
// CHECK-NEXT:   ResolvedIntLiteral:Int i32 '1'
// CHECK-NEXT: 
// CHECK-NEXT: [0 (exit)]
// CHECK-NEXT:   preds: 1 
// CHECK-NEXT:   succs: 

fn andOr() -> void {
    4 && 3 || 2;
    1;
}
// CHECK: andOr:
// CHECK-NEXT: [2 (entry)]
// CHECK-NEXT:   preds: 
// CHECK-NEXT:   succs: 1 
// CHECK-NEXT: 
// CHECK-NEXT: [1]
// CHECK-NEXT:   preds: 2 
// CHECK-NEXT:   succs: 0 
// CHECK-NEXT:   ResolvedIntLiteral:Int i32 '4'
// CHECK-NEXT:   ResolvedIntLiteral:Int i32 '3'
// CHECK-NEXT:   ResolvedBinaryOperator:Int i1 '&&'
// CHECK-NEXT:   ResolvedIntLiteral:Int i32 '2'
// CHECK-NEXT:   ResolvedBinaryOperator:Int i1 '||'
// CHECK-NEXT:   ResolvedIntLiteral:Int i32 '1'
// CHECK-NEXT: 
// CHECK-NEXT: [0 (exit)]
// CHECK-NEXT:   preds: 1 
// CHECK-NEXT:   succs: 

fn orAnd() -> void {
    4 || 3 && 2;
    1;
}
// CHECK: orAnd:
// CHECK-NEXT: [2 (entry)]
// CHECK-NEXT:   preds: 
// CHECK-NEXT:   succs: 1 
// CHECK-NEXT: 
// CHECK-NEXT: [1]
// CHECK-NEXT:   preds: 2 
// CHECK-NEXT:   succs: 0 
// CHECK-NEXT:   ResolvedIntLiteral:Int i32 '4'
// CHECK-NEXT:   ResolvedIntLiteral:Int i32 '3'
// CHECK-NEXT:   ResolvedIntLiteral:Int i32 '2'
// CHECK-NEXT:   ResolvedBinaryOperator:Int i1 '&&'
// CHECK-NEXT:   ResolvedBinaryOperator:Int i1 '||'
// CHECK-NEXT:   ResolvedIntLiteral:Int i32 '1'
// CHECK-NEXT: 
// CHECK-NEXT: [0 (exit)]
// CHECK-NEXT:   preds: 1 
// CHECK-NEXT:   succs:
