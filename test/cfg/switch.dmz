// RUN: compiler %s -cfg-dump 2>&1 | filecheck %s

extern fn printf(fmt:&char[], ...) -> int;

fn main() -> void {
    let const x = 10;
    let y = 10;

    switch(x) {
        case 1 => printf(&"1\n");
        else   => printf(&"else %d\n", x);
    }
    switch(x) {
        case 10 => printf(&"10\n");
        else   => printf(&"else %d\n", x);
    }
    switch(y) {
        case 10 => printf(&"10\n");
        else   => printf(&"else %d\n", x);
    }
}
// CHECK-NEXT: main:
// CHECK-NEXT: [11 (entry)]
// CHECK-NEXT:   preds: 
// CHECK-NEXT:   succs: 10 
// CHECK-NEXT: 
// CHECK-NEXT: [10]
// CHECK-NEXT:   preds: 11 
// CHECK-NEXT:   succs: 8(U) 9 
// CHECK-NEXT:   ResolvedIntLiteral:int '10'
// CHECK-NEXT:   ResolvedDeclStmt
// CHECK-NEXT:   ResolvedIntLiteral:int '10'
// CHECK-NEXT:   ResolvedDeclStmt
// CHECK-NEXT:   ResolvedDeclRefExpr:int x
// CHECK-NEXT:   ResolvedSwitchStmt
// CHECK-NEXT: 
// CHECK-NEXT: [9]
// CHECK-NEXT:   preds: 10 
// CHECK-NEXT:   succs: 7 
// CHECK-NEXT:   ResolvedStringLiteral:char[9] 'else %d\n'
// CHECK-NEXT:   ResolvedUnaryOperator:&char[9] '&'
// CHECK-NEXT:   ResolvedDeclRefExpr:int x
// CHECK-NEXT:   ResolvedCallExpr:int printf
// CHECK-NEXT: 
// CHECK-NEXT: [8]
// CHECK-NEXT:   preds: 10(U) 
// CHECK-NEXT:   succs: 7 
// CHECK-NEXT:   ResolvedStringLiteral:char[3] '1\n'
// CHECK-NEXT:   ResolvedUnaryOperator:&char[3] '&'
// CHECK-NEXT:   ResolvedCallExpr:int printf
// CHECK-NEXT: 
// CHECK-NEXT: [7]
// CHECK-NEXT:   preds: 8 9 
// CHECK-NEXT:   succs: 5 6(U) 
// CHECK-NEXT:   ResolvedDeclRefExpr:int x
// CHECK-NEXT:   ResolvedSwitchStmt
// CHECK-NEXT: 
// CHECK-NEXT: [6]
// CHECK-NEXT:   preds: 7(U) 
// CHECK-NEXT:   succs: 4 
// CHECK-NEXT:   ResolvedStringLiteral:char[9] 'else %d\n'
// CHECK-NEXT:   ResolvedUnaryOperator:&char[9] '&'
// CHECK-NEXT:   ResolvedDeclRefExpr:int x
// CHECK-NEXT:   ResolvedCallExpr:int printf
// CHECK-NEXT: 
// CHECK-NEXT: [5]
// CHECK-NEXT:   preds: 7 
// CHECK-NEXT:   succs: 4 
// CHECK-NEXT:   ResolvedStringLiteral:char[4] '10\n'
// CHECK-NEXT:   ResolvedUnaryOperator:&char[4] '&'
// CHECK-NEXT:   ResolvedCallExpr:int printf
// CHECK-NEXT: 
// CHECK-NEXT: [4]
// CHECK-NEXT:   preds: 5 6 
// CHECK-NEXT:   succs: 2 3 
// CHECK-NEXT:   ResolvedDeclRefExpr:int y
// CHECK-NEXT:   ResolvedSwitchStmt
// CHECK-NEXT: 
// CHECK-NEXT: [3]
// CHECK-NEXT:   preds: 4 
// CHECK-NEXT:   succs: 1 
// CHECK-NEXT:   ResolvedStringLiteral:char[9] 'else %d\n'
// CHECK-NEXT:   ResolvedUnaryOperator:&char[9] '&'
// CHECK-NEXT:   ResolvedDeclRefExpr:int x
// CHECK-NEXT:   ResolvedCallExpr:int printf
// CHECK-NEXT: 
// CHECK-NEXT: [2]
// CHECK-NEXT:   preds: 4 
// CHECK-NEXT:   succs: 1 
// CHECK-NEXT:   ResolvedStringLiteral:char[4] '10\n'
// CHECK-NEXT:   ResolvedUnaryOperator:&char[4] '&'
// CHECK-NEXT:   ResolvedCallExpr:int printf
// CHECK-NEXT: 
// CHECK-NEXT: [1]
// CHECK-NEXT:   preds: 2 3 
// CHECK-NEXT:   succs: 0 
// CHECK-NEXT: 
// CHECK-NEXT: [0 (exit)]
// CHECK-NEXT:   preds: 1 
// CHECK-NEXT:   succs: 