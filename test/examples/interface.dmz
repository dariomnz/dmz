// RUN: dmz %s -I std %S/../../std/std.dmz -run | filecheck %s

// CHECK: Square h: 1 w: 2
// CHECK: Triangle h: 2 b: 4
// CHECK: Square h: 1 w: 2
// CHECK: Triangle h: 2 b: 4
// CHECK: Square h: 1 w: 2
// CHECK: Triangle h: 2 b: 4
// CHECK-NOT: {{.*}}

const std = import("std");
pub extern fn printf(fmt: *u8, ...) -> i32;

struct Shape {
    shape: *void,
    drawOpaquePtr: *fn(*void)->void,

    pub fn draw(self: *@This) -> void {
        self.drawOpaquePtr(self.shape);
    }
}

struct Square {
    h: u32,
    w: u32,
    pub fn draw(self: *@This) -> void {
        printf("Square h: %d w: %d\n", self.h, self.w);
    }

    pub fn Shape(self: *@This) -> Shape {
        return Shape{
            shape: self,
            drawOpaquePtr: &self.draw,
        };
    }
}
struct Triangle {
    h: u32,
    b: u32,
    pub fn draw(self: *@This) -> void {
        printf("Triangle h: %d b: %d\n", self.h, self.b);
    }

    pub fn Shape(self: *@This) -> Shape {
        return Shape{
            shape: self,
            drawOpaquePtr: &self.draw,
        };
    }
}

fn main() -> void {

    let s = Square{h: 1, w: 2};
    let sh = s.Shape();

    sh.draw();

    let t = Triangle{h: 2, b: 4};
    let sh2 = t.Shape();

    sh2.draw();

    let s_array: Shape[2] = {sh, sh2};

    s_array[0].draw();
    s_array[1].draw();

    let libc_alloc = std.mem.libc_allocator.init();
    let vector = std.vec<Shape>.init(libc_alloc.Allocator());
    defer vector.deinit();
    try vector.add(sh);
    try vector.add(sh2);

    let i = 0;
    while (i < vector.size()) {
        let aux_shape = try vector.get(i);
        aux_shape.draw();
        i = i + 1;
    }
}