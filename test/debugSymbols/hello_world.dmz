// RUN: dmz %s -llvm-dump -g 2>&1 | filecheck %s

extern fn printf(fmt: *u8, ...) -> i32;

struct Point {
    x: i32,
    y: i32,
}

fn foo(p: Point, a: i32, b: i32, c: i32) -> void {
    a + b;
    let a_ptr: *i32 = null;
    a_ptr.* = 1;
}

fn main() -> void {
    printf("Hello world\n");
    foo(Point{x: 1, y: 2}, 1, 2, 3);
}

// CHECK: define void @hello_world.foo(ptr readonly %0, i32 %1, i32 %2, i32 %3) !dbg !4 {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %a = alloca i32, align 4
// CHECK-NEXT:   %b = alloca i32, align 4
// CHECK-NEXT:   %c = alloca i32, align 4
// CHECK-NEXT:   %a_ptr = alloca ptr, align 8
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %a, i8 0, i64 4, i1 false)
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %b, i8 0, i64 4, i1 false)
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %c, i8 0, i64 4, i1 false)
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %a_ptr, i8 0, i64 8, i1 false)
// CHECK-NEXT:     #dbg_declare(ptr %0, !13, !DIExpression(), !17)
// CHECK-NEXT:     #dbg_declare(ptr %a, !18, !DIExpression(), !19)
// CHECK-NEXT:   store i32 %1, ptr %a, align 4
// CHECK-NEXT:     #dbg_declare(ptr %a, !14, !DIExpression(), !19)
// CHECK-NEXT:     #dbg_declare(ptr %b, !20, !DIExpression(), !21)
// CHECK-NEXT:   store i32 %2, ptr %b, align 4
// CHECK-NEXT:     #dbg_declare(ptr %b, !15, !DIExpression(), !21)
// CHECK-NEXT:     #dbg_declare(ptr %c, !22, !DIExpression(), !23)
// CHECK-NEXT:   store i32 %3, ptr %c, align 4
// CHECK-NEXT:     #dbg_declare(ptr %c, !16, !DIExpression(), !23)
// CHECK-NEXT:   %4 = load i32, ptr %a, align 4, !dbg !24
// CHECK-NEXT:   %5 = load i32, ptr %b, align 4, !dbg !25
// CHECK-NEXT:   %6 = add i32 %4, %5, !dbg !26
// CHECK-NEXT:     #dbg_declare(ptr %a_ptr, !27, !DIExpression(), !29)
// CHECK-NEXT:   store ptr null, ptr %a_ptr, align 8, !dbg !29
// CHECK-NEXT:   %7 = load ptr, ptr %a_ptr, align 8, !dbg !30
// CHECK-NEXT:   store i32 1, ptr %7, align 4, !dbg !31
// CHECK-NEXT:   ret void
// CHECK-NEXT: }
// CHECK-NEXT: 
// CHECK-NEXT: define void @__builtin_main() !dbg !32 {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %tmp.struct.hello_world.Point = alloca %hello_world.Point, align 8
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %tmp.struct.hello_world.Point, i8 0, i64 8, i1 false)
// CHECK-NEXT:   %0 = call i32 (ptr, ...) @printf(ptr byref(i8) @global.str), !dbg !36
// CHECK-NEXT:     #dbg_declare(ptr %tmp.struct.hello_world.Point, !37, !DIExpression(), !38)
// CHECK-NEXT:   %1 = getelementptr inbounds nuw %hello_world.Point, ptr %tmp.struct.hello_world.Point, i32 0, i32 0, !dbg !38
// CHECK-NEXT:   store i32 1, ptr %1, align 4, !dbg !38
// CHECK-NEXT:   %2 = getelementptr inbounds nuw %hello_world.Point, ptr %tmp.struct.hello_world.Point, i32 0, i32 1, !dbg !38
// CHECK-NEXT:   store i32 2, ptr %2, align 4, !dbg !38
// CHECK-NEXT:   call void @hello_world.foo(ptr readonly %tmp.struct.hello_world.Point, i32 1, i32 2, i32 3), !dbg !39
// CHECK-NEXT:   ret void
// CHECK-NEXT: }
// CHECK-NEXT: 
// CHECK-NEXT: ; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
// CHECK-NEXT: declare void @llvm.memset.inline.p0.i64(ptr nocapture writeonly %0, i8 %1, i64 %2, i1 immarg %3) #0
// CHECK-NEXT: 
// CHECK-NEXT: define i32 @main() {
// CHECK-NEXT: entry:
// CHECK-NEXT:   call void @__builtin_main()
// CHECK-NEXT:   ret i32 0
// CHECK-NEXT: }
// CHECK-NEXT: 
// CHECK-NEXT: attributes #0 = { nocallback nofree nounwind willreturn memory(argmem: write) }
// CHECK-NEXT: 
// CHECK-NEXT: !llvm.dbg.cu = !{!0}
// CHECK-NEXT: !llvm.module.flags = !{!2, !3}
// CHECK-NEXT: 
// CHECK-NEXT: !0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "dmz Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug)
// CHECK-NEXT: !1 = !DIFile(filename: "hello_world.dmz", directory: "/home/dario/git/dmz/test/debugSymbols")
// CHECK-NEXT: !2 = !{i32 2, !"Debug Info Version", i32 3}
// CHECK-NEXT: !3 = !{i32 2, !"Dwarf Version", i32 4}
// CHECK-NEXT: !4 = distinct !DISubprogram(name: "hello_world.foo", scope: !1, file: !1, line: 10, type: !5, scopeLine: 10, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !12)
// CHECK-NEXT: !5 = !DISubroutineType(types: !6)
// CHECK-NEXT: !6 = !{null, !7, !10, !10, !10}
// CHECK-NEXT: !7 = !DICompositeType(tag: DW_TAG_structure_type, name: "hello_world.Point", scope: !1, file: !1, line: 5, size: 64, align: 64, flags: DIFlagPrototyped, elements: !8)
// CHECK-NEXT: !8 = !{!9, !11}
// CHECK-NEXT: !9 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1, file: !1, line: 6, baseType: !10, size: 32, align: 32, flags: DIFlagPublic)
// CHECK-NEXT: !10 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
// CHECK-NEXT: !11 = !DIDerivedType(tag: DW_TAG_member, name: "y", scope: !1, file: !1, line: 7, baseType: !10, size: 32, align: 32, offset: 32, flags: DIFlagPublic)
// CHECK-NEXT: !12 = !{!13, !14, !15, !16}
// CHECK-NEXT: !13 = !DILocalVariable(name: "p", arg: 1, scope: !4, file: !1, line: 10, type: !7)
// CHECK-NEXT: !14 = !DILocalVariable(name: "a", arg: 2, scope: !4, file: !1, line: 10, type: !10)
// CHECK-NEXT: !15 = !DILocalVariable(name: "b", arg: 3, scope: !4, file: !1, line: 10, type: !10)
// CHECK-NEXT: !16 = !DILocalVariable(name: "c", arg: 4, scope: !4, file: !1, line: 10, type: !10)
// CHECK-NEXT: !17 = !DILocation(line: 10, column: 7, scope: !4)
// CHECK-NEXT: !18 = !DILocalVariable(name: "a", scope: !4, file: !1, line: 10, type: !10)
// CHECK-NEXT: !19 = !DILocation(line: 10, column: 17, scope: !4)
// CHECK-NEXT: !20 = !DILocalVariable(name: "b", scope: !4, file: !1, line: 10, type: !10)
// CHECK-NEXT: !21 = !DILocation(line: 10, column: 25, scope: !4)
// CHECK-NEXT: !22 = !DILocalVariable(name: "c", scope: !4, file: !1, line: 10, type: !10)
// CHECK-NEXT: !23 = !DILocation(line: 10, column: 33, scope: !4)
// CHECK-NEXT: !24 = !DILocation(line: 11, column: 4, scope: !4)
// CHECK-NEXT: !25 = !DILocation(line: 11, column: 8, scope: !4)
// CHECK-NEXT: !26 = !DILocation(line: 11, column: 6, scope: !4)
// CHECK-NEXT: !27 = !DILocalVariable(name: "a_ptr", scope: !4, file: !1, line: 12, type: !28)
// CHECK-NEXT: !28 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10, size: 64)
// CHECK-NEXT: !29 = !DILocation(line: 12, column: 4, scope: !4)
// CHECK-NEXT: !30 = !DILocation(line: 13, column: 4, scope: !4)
// CHECK-NEXT: !31 = !DILocation(line: 13, column: 12, scope: !4)
// CHECK-NEXT: !32 = distinct !DISubprogram(name: "hello_world.main", scope: !1, file: !1, line: 16, type: !33, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !35)
// CHECK-NEXT: !33 = !DISubroutineType(types: !34)
// CHECK-NEXT: !34 = !{null}
// CHECK-NEXT: !35 = !{}
// CHECK-NEXT: !36 = !DILocation(line: 17, column: 10, scope: !32)
// CHECK-NEXT: !37 = !DILocalVariable(name: "tmp.struct.hello_world.Point", scope: !32, file: !1, line: 18, type: !7)
// CHECK-NEXT: !38 = !DILocation(line: 18, column: 8, scope: !32)
// CHECK-NEXT: !39 = !DILocation(line: 18, column: 7, scope: !32)