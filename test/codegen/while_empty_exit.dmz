// RUN: compiler %s -llvm-dump 2>&1 | filecheck %s
// RUN: compiler %s -run | ( ! grep ^ )
fn foo(x: int) -> void {
    while x > 1 {
        return;
    }
}
// CHECK: define void @foo(i32 %x) {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %x1 = alloca i32, align 4
// CHECK-NEXT:   store i32 %x, ptr %x1, align 4
// CHECK-NEXT:   br label %while.cond
// CHECK-NEXT: 
// CHECK-NEXT: while.cond:                                       ; preds = %entry
// CHECK-NEXT:   %0 = load i32, ptr %x1, align 4
// CHECK-NEXT:   %1 = icmp sgt i32 %0, 1
// CHECK-NEXT:   %bool.to.int = zext i1 %1 to i32
// CHECK-NEXT:   %int.to.bool = icmp ne i32 %bool.to.int, 0
// CHECK-NEXT:   br i1 %int.to.bool, label %while.body, label %while.exit
// CHECK-NEXT: 
// CHECK-NEXT: while.body:                                       ; preds = %while.cond
// CHECK-NEXT:   br label %return
// CHECK-NEXT: 
// CHECK-NEXT: while.exit:                                       ; preds = %while.cond
// CHECK-NEXT:   br label %return
// CHECK-NEXT: 
// CHECK-NEXT: return:                                           ; preds = %while.exit, %while.body
// CHECK-NEXT:   ret void
// CHECK-NEXT: }

fn main() -> void {
    foo(2);
}
