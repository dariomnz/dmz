// RUN: compiler %s -llvm-dump 2>&1 | filecheck %s
// RUN: diff <(compiler %s -run 2>&1) <(echo -n -e '3\n3\n1\n2\n3\n')
struct S {
  x: i32,
  s2: S2,
}

struct S2 {
  x: i32,
  y: i32,
  z: i32,
}
extern fn printf(fmt:*u8, ...) -> i32; fn println(n:i32) -> void {printf("%d\n", n);}

fn foo() -> void {
  println(S2 { x: 1, y: 2, z: 3 }.z);
  println(S{ x: 1, s2: S2 { x: 2, y: 3, z: 4 } }.s2.y);
}
// CHECK: define void @temporary_struct.foo() {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %tmp.struct.temporary_struct.S2 = alloca %temporary_struct.S2, align 8
// CHECK-NEXT:   %tmp.struct.temporary_struct.S = alloca %temporary_struct.S, align 8
// CHECK-NEXT:   %tmp.struct.temporary_struct.S21 = alloca %temporary_struct.S2, align 8
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %tmp.struct.temporary_struct.S2, i8 0, i64 12, i1 false)
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %tmp.struct.temporary_struct.S, i8 0, i64 16, i1 false)
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %tmp.struct.temporary_struct.S21, i8 0, i64 12, i1 false)

// CHECK-NEXT:   %0 = getelementptr inbounds nuw %temporary_struct.S2, ptr %tmp.struct.temporary_struct.S2, i32 0, i32 0
// CHECK-NEXT:   store i32 1, ptr %0, align 4
// CHECK-NEXT:   %1 = getelementptr inbounds nuw %temporary_struct.S2, ptr %tmp.struct.temporary_struct.S2, i32 0, i32 1
// CHECK-NEXT:   store i32 2, ptr %1, align 4
// CHECK-NEXT:   %2 = getelementptr inbounds nuw %temporary_struct.S2, ptr %tmp.struct.temporary_struct.S2, i32 0, i32 2
// CHECK-NEXT:   store i32 3, ptr %2, align 4

// CHECK-NEXT:   %3 = getelementptr inbounds nuw %temporary_struct.S2, ptr %tmp.struct.temporary_struct.S2, i32 0, i32 2
// CHECK-NEXT:   %4 = load i32, ptr %3, align 4
// CHECK-NEXT:   call void @temporary_struct.println(i32 %4)
// CHECK-NEXT:   %5 = getelementptr inbounds nuw %temporary_struct.S2, ptr %tmp.struct.temporary_struct.S21, i32 0, i32 0
// CHECK-NEXT:   store i32 2, ptr %5, align 4
// CHECK-NEXT:   %6 = getelementptr inbounds nuw %temporary_struct.S2, ptr %tmp.struct.temporary_struct.S21, i32 0, i32 1
// CHECK-NEXT:   store i32 3, ptr %6, align 4
// CHECK-NEXT:   %7 = getelementptr inbounds nuw %temporary_struct.S2, ptr %tmp.struct.temporary_struct.S21, i32 0, i32 2
// CHECK-NEXT:   store i32 4, ptr %7, align 4
// CHECK-NEXT:   %8 = getelementptr inbounds nuw %temporary_struct.S, ptr %tmp.struct.temporary_struct.S, i32 0, i32 0
// CHECK-NEXT:   store i32 1, ptr %8, align 4
// CHECK-NEXT:   %9 = getelementptr inbounds nuw %temporary_struct.S, ptr %tmp.struct.temporary_struct.S, i32 0, i32 1
// CHECK-NEXT:   call void @llvm.memcpy.p0.p0.i64(ptr align 4 %9, ptr align 4 %tmp.struct.temporary_struct.S21, i64 12, i1 false)

// CHECK-NEXT:   %10 = getelementptr inbounds nuw %temporary_struct.S, ptr %tmp.struct.temporary_struct.S, i32 0, i32 1
// CHECK-NEXT:   %11 = getelementptr inbounds nuw %temporary_struct.S2, ptr %10, i32 0, i32 1
// CHECK-NEXT:   %12 = load i32, ptr %11, align 4
// CHECK-NEXT:   call void @temporary_struct.println(i32 %12)

// CHECK-NEXT:   ret void
// CHECK-NEXT: }

fn bar() -> void {
  println(S2 { x: 1, y: 2, z: 3 }.x);
  println(S2 { x: 1, y: 2, z: 3 }.y);
  println(S2 { x: 1, y: 2, z: 3 }.z);
}
// CHECK: define void @temporary_struct.bar() {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %tmp.struct.temporary_struct.S2 = alloca %temporary_struct.S2, align 8
// CHECK-NEXT:   %tmp.struct.temporary_struct.S21 = alloca %temporary_struct.S2, align 8
// CHECK-NEXT:   %tmp.struct.temporary_struct.S22 = alloca %temporary_struct.S2, align 8
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %tmp.struct.temporary_struct.S2, i8 0, i64 12, i1 false)
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %tmp.struct.temporary_struct.S21, i8 0, i64 12, i1 false)
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %tmp.struct.temporary_struct.S22, i8 0, i64 12, i1 false)

// CHECK-NEXT:   %0 = getelementptr inbounds nuw %temporary_struct.S2, ptr %tmp.struct.temporary_struct.S2, i32 0, i32 0
// CHECK-NEXT:   store i32 1, ptr %0, align 4
// CHECK-NEXT:   %1 = getelementptr inbounds nuw %temporary_struct.S2, ptr %tmp.struct.temporary_struct.S2, i32 0, i32 1
// CHECK-NEXT:   store i32 2, ptr %1, align 4
// CHECK-NEXT:   %2 = getelementptr inbounds nuw %temporary_struct.S2, ptr %tmp.struct.temporary_struct.S2, i32 0, i32 2
// CHECK-NEXT:   store i32 3, ptr %2, align 4

// CHECK-NEXT:   %3 = getelementptr inbounds nuw %temporary_struct.S2, ptr %tmp.struct.temporary_struct.S2, i32 0, i32 0
// CHECK-NEXT:   %4 = load i32, ptr %3, align 4
// CHECK-NEXT:   call void @temporary_struct.println(i32 %4)

// CHECK-NEXT:   %5 = getelementptr inbounds nuw %temporary_struct.S2, ptr %tmp.struct.temporary_struct.S21, i32 0, i32 0
// CHECK-NEXT:   store i32 1, ptr %5, align 4
// CHECK-NEXT:   %6 = getelementptr inbounds nuw %temporary_struct.S2, ptr %tmp.struct.temporary_struct.S21, i32 0, i32 1
// CHECK-NEXT:   store i32 2, ptr %6, align 4
// CHECK-NEXT:   %7 = getelementptr inbounds nuw %temporary_struct.S2, ptr %tmp.struct.temporary_struct.S21, i32 0, i32 2
// CHECK-NEXT:   store i32 3, ptr %7, align 4

// CHECK-NEXT:   %8 = getelementptr inbounds nuw %temporary_struct.S2, ptr %tmp.struct.temporary_struct.S21, i32 0, i32 1
// CHECK-NEXT:   %9 = load i32, ptr %8, align 4
// CHECK-NEXT:   call void @temporary_struct.println(i32 %9)

// CHECK-NEXT:   %10 = getelementptr inbounds nuw %temporary_struct.S2, ptr %tmp.struct.temporary_struct.S22, i32 0, i32 0
// CHECK-NEXT:   store i32 1, ptr %10, align 4
// CHECK-NEXT:   %11 = getelementptr inbounds nuw %temporary_struct.S2, ptr %tmp.struct.temporary_struct.S22, i32 0, i32 1
// CHECK-NEXT:   store i32 2, ptr %11, align 4
// CHECK-NEXT:   %12 = getelementptr inbounds nuw %temporary_struct.S2, ptr %tmp.struct.temporary_struct.S22, i32 0, i32 2
// CHECK-NEXT:   store i32 3, ptr %12, align 4

// CHECK-NEXT:   %13 = getelementptr inbounds nuw %temporary_struct.S2, ptr %tmp.struct.temporary_struct.S22, i32 0, i32 2
// CHECK-NEXT:   %14 = load i32, ptr %13, align 4
// CHECK-NEXT:   call void @temporary_struct.println(i32 %14)

// CHECK-NEXT:   ret void
// CHECK-NEXT: }

fn main() -> void {
  foo();
  bar();
}
