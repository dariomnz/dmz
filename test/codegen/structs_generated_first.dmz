// RUN: compiler %s -llvm-dump 2>&1 | filecheck %s
// RUN: diff <(compiler %s -run 2>&1) <(echo -n -e '10\n120\n')

// CHECK: %structs_generated_first.S2 = type { i32, i32 }
// CHECK: %structs_generated_first.S = type { i32, i32 }

fn foo(s: S) -> S2 {
  return S2 { x: s.x, y: s.y };
}
// CHECK: define void @structs_generated_first.foo(ptr sret(%structs_generated_first.S2) %ret, ptr readonly %s) {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %tmp.struct.structs_generated_first.S2 = alloca %structs_generated_first.S2, align 8
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %tmp.struct.structs_generated_first.S2, i8 0, i64 8, i1 false)

// CHECK-NEXT:   %0 = getelementptr inbounds nuw %structs_generated_first.S, ptr %s, i32 0, i32 0
// CHECK-NEXT:   %1 = load i32, ptr %0, align 4
// CHECK-NEXT:   %2 = getelementptr inbounds nuw %structs_generated_first.S, ptr %s, i32 0, i32 1
// CHECK-NEXT:   %3 = load i32, ptr %2, align 4
// CHECK-NEXT:   %4 = getelementptr inbounds nuw %structs_generated_first.S2, ptr %tmp.struct.structs_generated_first.S2, i32 0, i32 0
// CHECK-NEXT:   store i32 %1, ptr %4, align 4
// CHECK-NEXT:   %5 = getelementptr inbounds nuw %structs_generated_first.S2, ptr %tmp.struct.structs_generated_first.S2, i32 0, i32 1
// CHECK-NEXT:   store i32 %3, ptr %5, align 4
// CHECK-NEXT:   call void @llvm.memcpy.p0.p0.i64(ptr align 4 %ret, ptr align 4 %tmp.struct.structs_generated_first.S2, i64 8, i1 false)

// CHECK-NEXT:   br label %return
// CHECK-NEXT: 
// CHECK-NEXT: return:                                           ; preds = %entry
// CHECK-NEXT:   ret void
// CHECK-NEXT: }
extern fn printf(fmt:*u8, ...) -> i32; fn println(n:i32) -> void {printf("%d\n", n);}

fn main() -> void {
  let x = S { x: 10, y: 120 };
  println(foo(x).x);
  println(foo(x).y);
}

struct S { x: i32, y:i32 }
struct S2 { x: i32, y:i32 }
