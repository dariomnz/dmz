// RUN: compiler %s -llvm-dump 2>&1 | filecheck %s
// RUN: compiler %s -run | grep -Plzx '10\n120\n'

// CHECK: %struct.S2 = type { i32, i32 }
// CHECK: %struct.S = type { i32, i32 }

fn foo(const s: S) -> S2 {
  return S2 { x: s.x, y: s.y };
}
// CHECK: define void @foo(ptr sret(%struct.S2) %ret, ptr readonly %s) {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %S2.tmp = alloca %struct.S2, align 8

// CHECK-NEXT:   %0 = getelementptr inbounds %struct.S, ptr %s, i32 0, i32 0
// CHECK-NEXT:   %1 = load i32, ptr %0, align 4
// CHECK-NEXT:   %2 = getelementptr inbounds %struct.S, ptr %s, i32 0, i32 1
// CHECK-NEXT:   %3 = load i32, ptr %2, align 4
// CHECK-NEXT:   %4 = getelementptr inbounds %struct.S2, ptr %S2.tmp, i32 0, i32 0
// CHECK-NEXT:   store i32 %1, ptr %4, align 4
// CHECK-NEXT:   %5 = getelementptr inbounds %struct.S2, ptr %S2.tmp, i32 0, i32 1
// CHECK-NEXT:   store i32 %3, ptr %5, align 4
// CHECK-NEXT:   call void @llvm.memcpy.p0.p0.i64(ptr align 4 %ret, ptr align 4 %S2.tmp, i64 8, i1 false)

// CHECK-NEXT:   br label %return
// CHECK-NEXT: 
// CHECK-NEXT: return:                                           ; preds = %entry
// CHECK-NEXT:   ret void
// CHECK-NEXT: }

fn main() -> void {
  let x = S { x: 10, y: 120 };
  println(foo(x).x);
  println(foo(x).y);
}

struct S { x: int, y:int }
struct S2 { x: int, y:int }
