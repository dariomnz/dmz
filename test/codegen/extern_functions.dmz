// RUN: compiler %s -llvm-dump 2>&1 | filecheck %s
fn main() -> void {
    putchar(97); // a
    putchar(10); // \n
    let fmt = "Test %d\n";
    let fd = 1;
    dprintf(fd, fmt, 10);
    dprintf(fd, "Hello\n");
}

// CHECK: define void @__builtin_main() {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %fmt = alloca ptr, align 8
// CHECK-NEXT:   %fd = alloca i32, align 4
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %fmt, i8 0, i64 8, i1 false)
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %fd, i8 0, i64 4, i1 false)
// CHECK-NEXT:   %0 = call i32 @putchar(i32 97)
// CHECK-NEXT:   %1 = call i32 @putchar(i32 10)
// CHECK-NEXT:   store ptr @global.str, ptr %fmt, align 8
// CHECK-NEXT:   store i32 1, ptr %fd, align 4
// CHECK-NEXT:   %2 = load i32, ptr %fd, align 4
// CHECK-NEXT:   %3 = load ptr, ptr %fmt, align 8
// CHECK-NEXT:   %4 = call i32 (i32, ptr, ...) @dprintf(i32 %2, ptr byref(i8) %3, i32 10)
// CHECK-NEXT:   %5 = load i32, ptr %fd, align 4
// CHECK-NEXT:   %6 = call i32 (i32, ptr, ...) @dprintf(i32 %5, ptr byref(i8) @global.str.1)
// CHECK-NEXT:   ret void
// CHECK-NEXT: }


// CHECK: declare i32 @putchar(i32 %0)
extern fn putchar(c:i32) -> i32;

// CHECK: declare i32 @dprintf(i32 %0, ptr byref(i8) %1, ...)
extern fn dprintf(fd:i32, fmt:*u8, ...) -> i32;
