// RUN: compiler %s -llvm-dump 2>&1 | filecheck %s
// RUN: diff <(compiler %s -run) <(echo -n -e '2\n10\n52\n')
fn foo(x: int) -> int {
    if (x == 1) {
        return 2;

        return 3;
    } else if (x == 2) {
        return 10;

        let y: int = 5 + 1;
    }

    return 52;
}
// CHECK: define i32 @foo(i32 %x) {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %retval = alloca i32, align 4
// CHECK-NEXT:   %x1 = alloca i32, align 4
// CHECK-NEXT:   store i32 %x, ptr %x1, align 4
// CHECK-NEXT:   %0 = load i32, ptr %x1, align 4
// CHECK-NEXT:   %1 = icmp eq i32 %0, 1
// CHECK-NEXT:   %bool.to.int = zext i1 %1 to i32
// CHECK-NEXT:   %int.to.bool = icmp ne i32 %bool.to.int, 0
// CHECK-NEXT:   br i1 %int.to.bool, label %if.true, label %if.false
// CHECK-NEXT: 
// CHECK-NEXT: if.true:                                          ; preds = %entry
// CHECK-NEXT:   store i32 2, ptr %retval, align 4
// CHECK-NEXT:   br label %return
// CHECK-NEXT: 
// CHECK-NEXT: if.false:                                         ; preds = %entry
// CHECK-NEXT:   %2 = load i32, ptr %x1, align 4
// CHECK-NEXT:   %3 = icmp eq i32 %2, 2
// CHECK-NEXT:   %bool.to.int2 = zext i1 %3 to i32
// CHECK-NEXT:   %int.to.bool3 = icmp ne i32 %bool.to.int2, 0
// CHECK-NEXT:   br i1 %int.to.bool3, label %if.true4, label %if.exit
// CHECK-NEXT: 
// CHECK-NEXT: if.true4:                                         ; preds = %if.false
// CHECK-NEXT:   store i32 10, ptr %retval, align 4
// CHECK-NEXT:   br label %return
// CHECK-NEXT: 
// CHECK-NEXT: if.exit:                                          ; preds = %if.false
// CHECK-NEXT:   br label %if.exit5
// CHECK-NEXT: 
// CHECK-NEXT: if.exit5:                                         ; preds = %if.exit
// CHECK-NEXT:   store i32 52, ptr %retval, align 4
// CHECK-NEXT:   br label %return
// CHECK-NEXT: 
// CHECK-NEXT: return:                                           ; preds = %if.exit5, %if.true4, %if.true
// CHECK-NEXT:   %4 = load i32, ptr %retval, align 4
// CHECK-NEXT:   ret i32 %4
// CHECK-NEXT: }

fn main() -> void {
    println(foo(1));
    println(foo(2));
    println(foo(3));
}
