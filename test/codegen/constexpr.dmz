// RUN: compiler %s -llvm-dump 2>&1 | filecheck %s
// RUN: diff <(compiler %s -run 2>&1) <(echo -n -e '3\n4\n')
extern fn printf(fmt:&char[], ...) -> int; fn println(const n:int) -> void {printf(&"%d\n", n);}
fn sideEffect(x: int) -> int {
    println(x);
    return x;
}

fn constant() -> int {
    return 1 || sideEffect(2);
}
// CHECK: define i32 @constant() {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %retval = alloca i32, align 4
// CHECK-NEXT:   store i1 true, ptr %retval, align 1
// CHECK-NEXT:   br label %return
// CHECK-NEXT: 
// CHECK-NEXT: return:                                           ; preds = %entry
// CHECK-NEXT:   %0 = load i32, ptr %retval, align 4
// CHECK-NEXT:   ret i32 %0
// CHECK-NEXT: }

fn constant2() -> int {
    return 0 && sideEffect(2);
}
// CHECK: define i32 @constant2() {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %retval = alloca i32, align 4
// CHECK-NEXT:   store i1 false, ptr %retval, align 1
// CHECK-NEXT:   br label %return
// CHECK-NEXT: 
// CHECK-NEXT: return:                                           ; preds = %entry
// CHECK-NEXT:   %0 = load i32, ptr %retval, align 4
// CHECK-NEXT:   ret i32 %0
// CHECK-NEXT: }

fn nonConstant() -> int {
    return sideEffect(3) || 1;
}
// CHECK: define i32 @nonConstant() {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %retval = alloca i32, align 4
// CHECK-NEXT:   %0 = call i32 @sideEffect(i32 3)
// CHECK-NEXT:   %int.to.bool = icmp ne i32 %0, 0
// CHECK-NEXT:   br i1 %int.to.bool, label %or.merge, label %or.rhs

fn nonConstant2() -> int {
    return sideEffect(4) && 0;
}
// CHECK: define i32 @nonConstant2() {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %retval = alloca i32, align 4
// CHECK-NEXT:   %0 = call i32 @sideEffect(i32 4)
// CHECK-NEXT:   %int.to.bool = icmp ne i32 %0, 0
// CHECK-NEXT:   br i1 %int.to.bool, label %and.rhs, label %and.merge

fn main() -> void {
    constant();
    constant2();

    nonConstant();
    nonConstant2();
}
