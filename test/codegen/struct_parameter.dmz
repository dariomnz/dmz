// RUN: dmz %s -llvm-dump 2>&1 | filecheck %s
// RUN: diff <(dmz %s -run 2>&1) <(echo -n -e '1\n2\n')

struct S {
  x: i32,
  y: i32,
}
extern fn printf(fmt:*u8, ...) -> i32; fn println(n:i32) -> void {printf("%d\n", n);}

fn foo(s: S) -> void {
  println(s.x);
  println(s.y);
}
// CHECK: define void @struct_parameter.foo(ptr readonly %s) {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %0 = getelementptr inbounds nuw %struct_parameter.S, ptr %s, i32 0, i32 0
// CHECK-NEXT:   %1 = load i32, ptr %0, align 4
// CHECK-NEXT:   call void @struct_parameter.println(i32 %1)
// CHECK-NEXT:   %2 = getelementptr inbounds nuw %struct_parameter.S, ptr %s, i32 0, i32 1
// CHECK-NEXT:   %3 = load i32, ptr %2, align 4
// CHECK-NEXT:   call void @struct_parameter.println(i32 %3)
// CHECK-NEXT:   ret void
// CHECK-NEXT: }

fn bar(s: S) -> S {
  return s;
}
// CHECK: define void @struct_parameter.bar(ptr sret(%struct_parameter.S) %ret, ptr readonly %s) {
// CHECK-NEXT: entry:
// CHECK-NEXT:   call void @llvm.memcpy.p0.p0.i64(ptr align 4 %ret, ptr align 4 %s, i64 8, i1 false)
// CHECK-NEXT:   br label %return
// CHECK-NEXT: 
// CHECK-NEXT: return:                                           ; preds = %entry
// CHECK-NEXT:   ret void
// CHECK-NEXT: }

fn main() -> void {
  let s = S { x: 1, y: 2 };
  foo(s);
  s = bar(s);
}
// CHECK: define void @__builtin_main() {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %s = alloca %struct_parameter.S, align 8
// CHECK-NEXT:   %tmp.struct.struct_parameter.S = alloca %struct_parameter.S, align 8
// CHECK-NEXT:   %struct.ret.tmp = alloca %struct_parameter.S, align 8
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %s, i8 0, i64 8, i1 false)
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %tmp.struct.struct_parameter.S, i8 0, i64 8, i1 false)
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %struct.ret.tmp, i8 0, i64 8, i1 false)
// CHECK-NEXT:   %0 = getelementptr inbounds nuw %struct_parameter.S, ptr %tmp.struct.struct_parameter.S, i32 0, i32 0
// CHECK-NEXT:   store i32 1, ptr %0, align 4
// CHECK-NEXT:   %1 = getelementptr inbounds nuw %struct_parameter.S, ptr %tmp.struct.struct_parameter.S, i32 0, i32 1
// CHECK-NEXT:   store i32 2, ptr %1, align 4
// CHECK-NEXT:   call void @llvm.memcpy.p0.p0.i64(ptr align 4 %s, ptr align 4 %tmp.struct.struct_parameter.S, i64 8, i1 false)
// CHECK-NEXT:   call void @struct_parameter.foo(ptr readonly %s)
// CHECK-NEXT:   call void @struct_parameter.bar(ptr sret(%struct_parameter.S) %struct.ret.tmp, ptr readonly %s)
// CHECK-NEXT:   call void @llvm.memcpy.p0.p0.i64(ptr align 4 %s, ptr align 4 %struct.ret.tmp, i64 8, i1 false)
// CHECK-NEXT:   ret void
// CHECK-NEXT: }
