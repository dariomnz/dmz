// RUN: compiler %s -llvm-dump 2>&1 | filecheck %s
// RUN: diff <(compiler %s -run 2>&1) <(echo -n -e 'Sizeof u1 1\nSizeof i32 4\nSizeof i64 8\nSizeof f16 2\nSizeof *void 8\n')

extern fn printf(fmt: *u8, ...) -> i32;
fn main() -> void {
    let size_u1 = @sizeof(u1);
    let size_i32 = @sizeof(i32);
    let size_i64 = @sizeof(i64);
    let size_f16 = @sizeof(f16);
    let size_void_ptr = @sizeof(*void);

    printf("Sizeof u1 %d\n", size_u1);
    printf("Sizeof i32 %d\n", size_i32);
    printf("Sizeof i64 %d\n", size_i64);
    printf("Sizeof f16 %d\n", size_f16);
    printf("Sizeof *void %d\n", size_void_ptr);
}
// CHECK:  store i64 1, ptr %size_u1, align 4
// CHECK-NEXT:   store i64 4, ptr %size_i32, align 4
// CHECK-NEXT:   store i64 8, ptr %size_i64, align 4
// CHECK-NEXT:   store i64 2, ptr %size_f16, align 4
// CHECK-NEXT:   store i64 8, ptr %size_void_ptr, align 4
// CHECK-NEXT:   %0 = load i64, ptr %size_u1, align 4
// CHECK-NEXT:   %1 = call i32 (ptr, ...) @printf(ptr byref(i8) @global.str, i64 %0)
// CHECK-NEXT:   %2 = load i64, ptr %size_i32, align 4
// CHECK-NEXT:   %3 = call i32 (ptr, ...) @printf(ptr byref(i8) @global.str.1, i64 %2)
// CHECK-NEXT:   %4 = load i64, ptr %size_i64, align 4
// CHECK-NEXT:   %5 = call i32 (ptr, ...) @printf(ptr byref(i8) @global.str.2, i64 %4)
// CHECK-NEXT:   %6 = load i64, ptr %size_f16, align 4
// CHECK-NEXT:   %7 = call i32 (ptr, ...) @printf(ptr byref(i8) @global.str.3, i64 %6)
// CHECK-NEXT:   %8 = load i64, ptr %size_void_ptr, align 4
// CHECK-NEXT:   %9 = call i32 (ptr, ...) @printf(ptr byref(i8) @global.str.4, i64 %8)
// CHECK-NEXT:   ret void