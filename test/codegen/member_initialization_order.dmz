// RUN: compiler %s -llvm-dump 2>&1 | filecheck %s
// RUN: diff <(compiler %s -run 2>&1) <(echo -n -e '1\n2\n3\n2\n1\n3\n3\n2\n1\n')
extern fn printf(fmt:*u8, ...) -> i32; fn println(n:i32) -> void {printf("%d\n", n);}
struct Color {
  r: i32,
  g: i32,
  b: i32,
}

fn printAndReturn(n: i32) -> i32 {
  println(n);
  return n;
}

fn main() -> void {
  Color {
    r: printAndReturn(1),
    g: printAndReturn(2),
    b: printAndReturn(3),
  };

  Color {
    g: printAndReturn(2),
    r: printAndReturn(1),
    b: printAndReturn(3),
  };

  Color {
    b: printAndReturn(3),
    g: printAndReturn(2),
    r: printAndReturn(1),
  };
}
// CHECK: define void @__builtin_main() {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %tmp.struct.member_initialization_order.Color = alloca %member_initialization_order.Color, align 8
// CHECK-NEXT:   %tmp.struct.member_initialization_order.Color1 = alloca %member_initialization_order.Color, align 8
// CHECK-NEXT:   %tmp.struct.member_initialization_order.Color2 = alloca %member_initialization_order.Color, align 8
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %tmp.struct.member_initialization_order.Color, i8 0, i64 12, i1 false)
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %tmp.struct.member_initialization_order.Color1, i8 0, i64 12, i1 false)
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %tmp.struct.member_initialization_order.Color2, i8 0, i64 12, i1 false)

// CHECK-NEXT:   %0 = call i32 @member_initialization_order.printAndReturn(i32 1)
// CHECK-NEXT:   %1 = call i32 @member_initialization_order.printAndReturn(i32 2)
// CHECK-NEXT:   %2 = call i32 @member_initialization_order.printAndReturn(i32 3)
// CHECK-NEXT:   %3 = getelementptr inbounds nuw %member_initialization_order.Color, ptr %tmp.struct.member_initialization_order.Color, i32 0, i32 0
// CHECK-NEXT:   store i32 %0, ptr %3, align 4
// CHECK-NEXT:   %4 = getelementptr inbounds nuw %member_initialization_order.Color, ptr %tmp.struct.member_initialization_order.Color, i32 0, i32 1
// CHECK-NEXT:   store i32 %1, ptr %4, align 4
// CHECK-NEXT:   %5 = getelementptr inbounds nuw %member_initialization_order.Color, ptr %tmp.struct.member_initialization_order.Color, i32 0, i32 2
// CHECK-NEXT:   store i32 %2, ptr %5, align 4

// CHECK-NEXT:   %6 = call i32 @member_initialization_order.printAndReturn(i32 2)
// CHECK-NEXT:   %7 = call i32 @member_initialization_order.printAndReturn(i32 1)
// CHECK-NEXT:   %8 = call i32 @member_initialization_order.printAndReturn(i32 3)
// CHECK-NEXT:   %9 = getelementptr inbounds nuw %member_initialization_order.Color, ptr %tmp.struct.member_initialization_order.Color1, i32 0, i32 0
// CHECK-NEXT:   store i32 %7, ptr %9, align 4
// CHECK-NEXT:   %10 = getelementptr inbounds nuw %member_initialization_order.Color, ptr %tmp.struct.member_initialization_order.Color1, i32 0, i32 1
// CHECK-NEXT:   store i32 %6, ptr %10, align 4
// CHECK-NEXT:   %11 = getelementptr inbounds nuw %member_initialization_order.Color, ptr %tmp.struct.member_initialization_order.Color1, i32 0, i32 2
// CHECK-NEXT:   store i32 %8, ptr %11, align 4

// CHECK-NEXT:   %12 = call i32 @member_initialization_order.printAndReturn(i32 3)
// CHECK-NEXT:   %13 = call i32 @member_initialization_order.printAndReturn(i32 2)
// CHECK-NEXT:   %14 = call i32 @member_initialization_order.printAndReturn(i32 1)
// CHECK-NEXT:   %15 = getelementptr inbounds nuw %member_initialization_order.Color, ptr %tmp.struct.member_initialization_order.Color2, i32 0, i32 0
// CHECK-NEXT:   store i32 %14, ptr %15, align 4
// CHECK-NEXT:   %16 = getelementptr inbounds nuw %member_initialization_order.Color, ptr %tmp.struct.member_initialization_order.Color2, i32 0, i32 1
// CHECK-NEXT:   store i32 %13, ptr %16, align 4
// CHECK-NEXT:   %17 = getelementptr inbounds nuw %member_initialization_order.Color, ptr %tmp.struct.member_initialization_order.Color2, i32 0, i32 2
// CHECK-NEXT:   store i32 %12, ptr %17, align 4

// CHECK-NEXT:   ret void
// CHECK-NEXT: }
