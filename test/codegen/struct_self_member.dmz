// RUN: dmz %s -llvm-dump 2>&1 | filecheck %s
// RUN: diff <(dmz %s -run 2>&1) <(echo -n -e 'Point 2 2\n')

struct Point {
    x: i32,
    y: i32,

    pub fn addOne(self: *@This) -> void {
        self.x += 1;
        self.y += 1;
    }
// CHECK: define void @struct_self_member.Point.addOne(ptr byref(%struct_self_member.Point) %self) {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %0 = getelementptr inbounds nuw %struct_self_member.Point, ptr %self, i32 0, i32 0
// CHECK-NEXT:   %1 = load i32, ptr %0, align 4
// CHECK-NEXT:   %2 = add i32 %1, 1
// CHECK-NEXT:   %3 = getelementptr inbounds nuw %struct_self_member.Point, ptr %self, i32 0, i32 0
// CHECK-NEXT:   store i32 %2, ptr %3, align 4
// CHECK-NEXT:   %4 = getelementptr inbounds nuw %struct_self_member.Point, ptr %self, i32 0, i32 1
// CHECK-NEXT:   %5 = load i32, ptr %4, align 4
// CHECK-NEXT:   %6 = add i32 %5, 1
// CHECK-NEXT:   %7 = getelementptr inbounds nuw %struct_self_member.Point, ptr %self, i32 0, i32 1
// CHECK-NEXT:   store i32 %6, ptr %7, align 4
// CHECK-NEXT:   ret void
// CHECK-NEXT: }
}

extern fn printf(fmt:*u8, ...) -> i32;

fn main() -> void {
    let p = Point{x:1,y:1};
    p.addOne();

    printf("Point %d %d\n", p.x, p.y);
}
// CHECK: define void @__builtin_main() {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %p = alloca %struct_self_member.Point, align 8
// CHECK-NEXT:   %tmp.struct.struct_self_member.Point = alloca %struct_self_member.Point, align 8
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %p, i8 0, i64 8, i1 false)
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %tmp.struct.struct_self_member.Point, i8 0, i64 8, i1 false)
// CHECK-NEXT:   %0 = getelementptr inbounds nuw %struct_self_member.Point, ptr %tmp.struct.struct_self_member.Point, i32 0, i32 0
// CHECK-NEXT:   store i32 1, ptr %0, align 4
// CHECK-NEXT:   %1 = getelementptr inbounds nuw %struct_self_member.Point, ptr %tmp.struct.struct_self_member.Point, i32 0, i32 1
// CHECK-NEXT:   store i32 1, ptr %1, align 4
// CHECK-NEXT:   call void @llvm.memcpy.p0.p0.i64(ptr align 4 %p, ptr align 4 %tmp.struct.struct_self_member.Point, i64 8, i1 false)
// CHECK-NEXT:   call void @struct_self_member.Point.addOne(ptr byref(%struct_self_member.Point) %p)
