// RUN: compiler %s -llvm-dump 2>&1 | filecheck %s

err {
    ERROR_ONE,
    ERROR_TWO,
    ERROR_THREE,
}
// CHECK: ResolvedErrGroupDecl: 
// CHECK-NEXT:   ResolvedErrDecl: ERROR_ONE
// CHECK-NEXT:   ResolvedErrDecl: ERROR_TWO
// CHECK-NEXT:   ResolvedErrDecl: ERROR_THREE

fn foo(x:int) -> int? {
    if (x == 1){
        return ERROR_ONE?;
    }
    // else if (x == 2){
    //     return ERROR_TWO?;
    // }
    return x;
}
fn bar(x:int) -> int? {
    // if (x == 2){
    //     return ERROR_TWO?;
    // }
    // else if (x == 2){
    //     return ERROR_TWO?;
    // }
    return foo(x)!;
}
// CHECK: ResolvedFunctionDecl: foo -> int?
// CHECK-NEXT:   ResolvedParamDecl: x:int
// CHECK-NEXT:   ResolvedBlock
// CHECK-NEXT:     ResolvedIfStmt
// CHECK-NEXT:       ResolvedBinaryOperator: '=='
// CHECK-NEXT:         ResolvedDeclRefExpr: x:int
// CHECK-NEXT:         ResolvedIntLiteral: '1'
// CHECK-NEXT:       ResolvedBlock
// CHECK-NEXT:         ResolvedReturnStmt
// CHECK-NEXT:           ResolvedErrDeclRef: ERROR_ONE
// CHECK-NEXT:       ResolvedBlock
// CHECK-NEXT:         ResolvedIfStmt
// CHECK-NEXT:           ResolvedBinaryOperator: '=='
// CHECK-NEXT:             ResolvedDeclRefExpr: x:int
// CHECK-NEXT:             ResolvedIntLiteral: '2'
// CHECK-NEXT:           ResolvedBlock
// CHECK-NEXT:             ResolvedReturnStmt
// CHECK-NEXT:               ResolvedErrDeclRef: ERROR_TWO
// CHECK-NEXT:     ResolvedReturnStmt
// CHECK-NEXT:       ResolvedDeclRefExpr: x:int

extern fn dprintf(fd:int, fmt:&char[], ...) -> int;

fn main() -> void {
    let result = foo(10);
    let result2 = bar(10);
    dprintf(1, &"%d\n", result!);
    dprintf(1, &"%d\n", result2!);
    // catch result_e = result;
    // dprintf(1, &"%s\n", result_e);

    // if (catch error = result){
    //     dprintf(1, &"%s\n", error);
    // }

    // if (catch result){
    //     dprintf(1, &"There are an error\n");
    // }
    // if (catch foo(2)){
    //     dprintf(1, &"There are an error\n");
    // }

    // dprintf(1, &"No error %d\n", result);
    // dprintf(1, &"No safe error %d\n", foo(10)!);
}
// CHECK: ResolvedFunctionDecl: main -> void
// CHECK-NEXT:   ResolvedBlock
// CHECK-NEXT:     ResolvedDeclStmt:
// CHECK-NEXT:       ResolvedVarDecl: result:int?
// CHECK-NEXT:         ResolvedCallExpr: foo:int?
// CHECK-NEXT:           ResolvedIntLiteral: '2'
// CHECK-NEXT:           | value: 2
// CHECK-NEXT:     ResolvedCatchErrExpr: 
// CHECK-NEXT:       ResolvedDeclStmt:
// CHECK-NEXT:         ResolvedVarDecl const: result_e:err
// CHECK-NEXT:           ResolvedDeclRefExpr: result:int?
// CHECK-NEXT:     ResolvedCallExpr: dprintf:int
// CHECK-NEXT:       ResolvedIntLiteral: '1'
// CHECK-NEXT:       | value: 1
// CHECK-NEXT:       ResolvedUnaryOperator: '&'
// CHECK-NEXT:         ResolvedStringLiteral: '%s\n'
// CHECK-NEXT:       ResolvedDeclRefExpr: result_e:err
// CHECK-NEXT:     ResolvedIfStmt
// CHECK-NEXT:       ResolvedCatchErrExpr: 
// CHECK-NEXT:         ResolvedDeclStmt:
// CHECK-NEXT:           ResolvedVarDecl const: error:err
// CHECK-NEXT:             ResolvedDeclRefExpr: result:int?
// CHECK-NEXT:       ResolvedBlock
// CHECK-NEXT:         ResolvedCallExpr: dprintf:int
// CHECK-NEXT:           ResolvedIntLiteral: '1'
// CHECK-NEXT:           | value: 1
// CHECK-NEXT:           ResolvedUnaryOperator: '&'
// CHECK-NEXT:             ResolvedStringLiteral: '%s\n'
// CHECK-NEXT:           ResolvedDeclRefExpr: error:err
// CHECK-NEXT:     ResolvedIfStmt
// CHECK-NEXT:       ResolvedCatchErrExpr: 
// CHECK-NEXT:         ResolvedDeclRefExpr: result:int?
// CHECK-NEXT:       ResolvedBlock
// CHECK-NEXT:         ResolvedCallExpr: dprintf:int
// CHECK-NEXT:           ResolvedIntLiteral: '1'
// CHECK-NEXT:           | value: 1
// CHECK-NEXT:           ResolvedUnaryOperator: '&'
// CHECK-NEXT:             ResolvedStringLiteral: 'There are an error\n'
// CHECK-NEXT:     ResolvedIfStmt
// CHECK-NEXT:       ResolvedCatchErrExpr: 
// CHECK-NEXT:         ResolvedCallExpr: foo:int?
// CHECK-NEXT:           ResolvedIntLiteral: '2'
// CHECK-NEXT:           | value: 2
// CHECK-NEXT:       ResolvedBlock
// CHECK-NEXT:         ResolvedCallExpr: dprintf:int
// CHECK-NEXT:           ResolvedIntLiteral: '1'
// CHECK-NEXT:           | value: 1
// CHECK-NEXT:           ResolvedUnaryOperator: '&'
// CHECK-NEXT:             ResolvedStringLiteral: 'There are an error\n'
// CHECK-NEXT:     ResolvedCallExpr: dprintf:int
// CHECK-NEXT:       ResolvedIntLiteral: '1'
// CHECK-NEXT:       | value: 1
// CHECK-NEXT:       ResolvedUnaryOperator: '&'
// CHECK-NEXT:         ResolvedStringLiteral: 'No error %d\n'
// CHECK-NEXT:       ResolvedDeclRefExpr: result:int?
// CHECK-NEXT:     ResolvedCallExpr: dprintf:int
// CHECK-NEXT:       ResolvedIntLiteral: '1'
// CHECK-NEXT:       | value: 1
// CHECK-NEXT:       ResolvedUnaryOperator: '&'
// CHECK-NEXT:         ResolvedStringLiteral: 'No safe error %d\n'
// CHECK-NEXT:       ResolvedErrUnwrapExpr: int
// CHECK-NEXT:         ResolvedCallExpr: foo:int?
// CHECK-NEXT:           ResolvedIntLiteral: '10'
// CHECK-NEXT:           | value: 10