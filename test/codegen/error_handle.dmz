// RUN: compiler %s -llvm-dump 2>&1 | filecheck %s
// RUN: diff <(compiler %s -run 2>&1) <(echo -n -e "10\nERROR_TWO\nThere was no error\n10\nThere are an error\nNo error 10\nNo safe error 10\n")

err {
    ERROR_ONE,
    ERROR_TWO,
    ERROR_THREE,
}
// CHECK: @err.str.SUCCESS = private constant [8 x i8] c"SUCCESS\00"
// CHECK-NEXT: @err.str.ERROR_ONE = private constant [10 x i8] c"ERROR_ONE\00"
// CHECK-NEXT: @err.str.ERROR_TWO = private constant [10 x i8] c"ERROR_TWO\00"
// CHECK-NEXT: @err.str.ERROR_THREE = private constant [12 x i8] c"ERROR_THREE\00"

fn foo(x:i32) -> i32? {
    if (x == 1){
        return ERROR_ONE?;
    }
    return x;
}
// CHECK: define void @foo(ptr sret(%err.struct.i32) %ret, i32 %x) {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %x1 = alloca i32, align 4
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %x1, i8 0, i64 4, i1 false)
// CHECK-NEXT:   store i32 %x, ptr %x1, align 4
// CHECK-NEXT:   %0 = load i32, ptr %x1, align 4
// CHECK-NEXT:   %1 = icmp eq i32 %0, 1
// CHECK-NEXT:   br i1 %1, label %if.true, label %if.exit
// CHECK-NEXT: 
// CHECK-NEXT: if.true:                                          ; preds = %entry
// CHECK-NEXT:   %2 = getelementptr inbounds %err.struct.i32, ptr %ret, i32 0, i32 1
// CHECK-NEXT:   store ptr @err.str.ERROR_ONE, ptr %2, align 8
// CHECK-NEXT:   br label %return
// CHECK-NEXT: 
// CHECK-NEXT: if.exit:                                          ; preds = %entry
// CHECK-NEXT:   %3 = load i32, ptr %x1, align 4
// CHECK-NEXT:   store i32 %3, ptr %ret, align 4
// CHECK-NEXT:   br label %return
// CHECK-NEXT: 
// CHECK-NEXT: return:                                           ; preds = %if.exit, %if.true
// CHECK-NEXT:   ret void
// CHECK-NEXT: }


fn bar(x:i32) -> i32? {
    if (x == 2){
        return ERROR_TWO?;
    }
    return foo(x)!;
}
// CHECK: define void @bar(ptr sret(%err.struct.i32) %ret, i32 %x) {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %x1 = alloca i32, align 4
// CHECK-NEXT:   %struct.ret.tmp = alloca %err.struct.i32, align 8
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %x1, i8 0, i64 4, i1 false)
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %struct.ret.tmp, i8 0, i64 16, i1 false)
// CHECK-NEXT:   store i32 %x, ptr %x1, align 4
// CHECK-NEXT:   %0 = load i32, ptr %x1, align 4
// CHECK-NEXT:   %1 = icmp eq i32 %0, 2
// CHECK-NEXT:   br i1 %1, label %if.true, label %if.exit
// CHECK-NEXT: 
// CHECK-NEXT: if.true:                                          ; preds = %entry
// CHECK-NEXT:   %2 = getelementptr inbounds %err.struct.i32, ptr %ret, i32 0, i32 1
// CHECK-NEXT:   store ptr @err.str.ERROR_TWO, ptr %2, align 8
// CHECK-NEXT:   br label %return
// CHECK-NEXT: 
// CHECK-NEXT: if.exit:                                          ; preds = %entry
// CHECK-NEXT:   %3 = load i32, ptr %x1, align 4
// CHECK-NEXT:   call void @foo(ptr sret(%err.struct.i32) %struct.ret.tmp, i32 %3)
// CHECK-NEXT:   %4 = getelementptr inbounds %err.struct.i32, ptr %struct.ret.tmp, i32 0, i32 1
// CHECK-NEXT:   %5 = load ptr, ptr %4, align 8
// CHECK-NEXT:   %6 = ptrtoint ptr %5 to i64
// CHECK-NEXT:   %ptr.to.bool = icmp ne i64 %6, 0
// CHECK-NEXT:   br i1 %ptr.to.bool, label %if.true.unwrap, label %if.exit.unwrap
// CHECK-NEXT: 
// CHECK-NEXT: if.true.unwrap:                                   ; preds = %if.exit
// CHECK-NEXT:   %7 = getelementptr inbounds %err.struct.i32, ptr %ret, i32 0, i32 1
// CHECK-NEXT:   store ptr %5, ptr %7, align 8
// CHECK-NEXT:   br label %return
// CHECK-NEXT: 
// CHECK-NEXT: if.exit.unwrap:                                   ; preds = %if.exit
// CHECK-NEXT:   %8 = getelementptr inbounds %err.struct.i32, ptr %struct.ret.tmp, i32 0, i32 0
// CHECK-NEXT:   %9 = load i32, ptr %8, align 4
// CHECK-NEXT:   store i32 %9, ptr %ret, align 4
// CHECK-NEXT:   br label %return
// CHECK-NEXT: 
// CHECK-NEXT: return:                                           ; preds = %if.exit.unwrap, %if.true.unwrap, %if.true
// CHECK-NEXT:   ret void
// CHECK-NEXT: }

extern fn dprintf(fd:i32, fmt:&u8[], ...) -> i32;

fn main() -> void {
    let result = foo(10);
    let result2 = bar(2);
    dprintf(1, &"%d\n", result!);
    catch result_e = result2;
    dprintf(1, &"%s\n", result_e);

    if (catch error = result){
        dprintf(1, &"%s\n", error);
    } else {
        dprintf(1, &"There was no error\n");
    }

    if (try value = result){
        dprintf(1, &"%d\n", value);
    }

    if (catch result){
        dprintf(1, &"There are an error\n");
    }
    if (catch foo(1)){
        dprintf(1, &"There are an error\n");
    }

    dprintf(1, &"No error %d\n", result!);
    dprintf(1, &"No safe error %d\n", foo(10)!);
}
// CHECK: define void @__builtin_main() {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %result = alloca %err.struct.i32, align 8
// CHECK-NEXT:   %struct.ret.tmp = alloca %err.struct.i32, align 8
// CHECK-NEXT:   %result2 = alloca %err.struct.i32, align 8
// CHECK-NEXT:   %struct.ret.tmp1 = alloca %err.struct.i32, align 8
// CHECK-NEXT:   %result_e = alloca ptr, align 8
// CHECK-NEXT:   %error = alloca ptr, align 8
// CHECK-NEXT:   %value = alloca i32, align 4
// CHECK-NEXT:   %struct.ret.tmp13 = alloca %err.struct.i32, align 8
// CHECK-NEXT:   %struct.ret.tmp21 = alloca %err.struct.i32, align 8
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %result, i8 0, i64 16, i1 false)
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %struct.ret.tmp, i8 0, i64 16, i1 false)
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %result2, i8 0, i64 16, i1 false)
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %struct.ret.tmp1, i8 0, i64 16, i1 false)
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %result_e, i8 0, i64 8, i1 false)
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %error, i8 0, i64 8, i1 false)
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %value, i8 0, i64 4, i1 false)
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %struct.ret.tmp13, i8 0, i64 16, i1 false)
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %struct.ret.tmp21, i8 0, i64 16, i1 false)
// CHECK-NEXT:   call void @foo(ptr sret(%err.struct.i32) %struct.ret.tmp, i32 10)
// CHECK-NEXT:   call void @llvm.memcpy.p0.p0.i64(ptr align 8 %result, ptr align 8 %struct.ret.tmp, i64 16, i1 false)
// CHECK-NEXT:   call void @bar(ptr sret(%err.struct.i32) %struct.ret.tmp1, i32 2)
// CHECK-NEXT:   call void @llvm.memcpy.p0.p0.i64(ptr align 8 %result2, ptr align 8 %struct.ret.tmp1, i64 16, i1 false)
// CHECK-NEXT:   %0 = getelementptr inbounds %err.struct.i32, ptr %result, i32 0, i32 1
// CHECK-NEXT:   %1 = load ptr, ptr %0, align 8
// CHECK-NEXT:   %2 = ptrtoint ptr %1 to i64
// CHECK-NEXT:   %ptr.to.bool = icmp ne i64 %2, 0
// CHECK-NEXT:   br i1 %ptr.to.bool, label %if.true.unwrap, label %if.exit.unwrap
// CHECK-NEXT: 
// CHECK-NEXT: if.true.unwrap:                                   ; preds = %entry
// CHECK-NEXT:   call void @llvm.trap()
// CHECK-NEXT:   br label %if.exit.unwrap
// CHECK-NEXT: 
// CHECK-NEXT: if.exit.unwrap:                                   ; preds = %if.true.unwrap, %entry
// CHECK-NEXT:   %3 = getelementptr inbounds %err.struct.i32, ptr %result, i32 0, i32 0
// CHECK-NEXT:   %4 = load i32, ptr %3, align 4
// CHECK-NEXT:   %5 = call i32 (i32, ptr, ...) @dprintf(i32 1, ptr byref(ptr) @global.str, i32 %4)
// CHECK-NEXT:   %6 = getelementptr inbounds %err.struct.i32, ptr %result2, i32 0, i32 1
// CHECK-NEXT:   %7 = load ptr, ptr %6, align 8
// CHECK-NEXT:   %8 = ptrtoint ptr %7 to i64
// CHECK-NEXT:   %ptr.to.bool2 = icmp ne i64 %8, 0
// CHECK-NEXT:   %select.err = select i1 %ptr.to.bool2, ptr %7, ptr @err.str.SUCCESS
// CHECK-NEXT:   store ptr %select.err, ptr %result_e, align 8
// CHECK-NEXT:   %catch.result = select i1 %ptr.to.bool2, i1 true, i1 false
// CHECK-NEXT:   %9 = load ptr, ptr %result_e, align 8
// CHECK-NEXT:   %10 = call i32 (i32, ptr, ...) @dprintf(i32 1, ptr byref(ptr) @global.str.1, ptr %9)
// CHECK-NEXT:   %11 = getelementptr inbounds %err.struct.i32, ptr %result, i32 0, i32 1
// CHECK-NEXT:   %12 = load ptr, ptr %11, align 8
// CHECK-NEXT:   %13 = ptrtoint ptr %12 to i64
// CHECK-NEXT:   %ptr.to.bool3 = icmp ne i64 %13, 0
// CHECK-NEXT:   %select.err4 = select i1 %ptr.to.bool3, ptr %12, ptr @err.str.SUCCESS
// CHECK-NEXT:   store ptr %select.err4, ptr %error, align 8
// CHECK-NEXT:   %catch.result5 = select i1 %ptr.to.bool3, i1 true, i1 false
// CHECK-NEXT:   br i1 %catch.result5, label %if.true, label %if.false
// CHECK-NEXT: 
// CHECK-NEXT: if.true:                                          ; preds = %if.exit.unwrap
// CHECK-NEXT:   %14 = load ptr, ptr %error, align 8
// CHECK-NEXT:   %15 = call i32 (i32, ptr, ...) @dprintf(i32 1, ptr byref(ptr) @global.str.2, ptr %14)
// CHECK-NEXT:   br label %if.exit
// CHECK-NEXT: 
// CHECK-NEXT: if.false:                                         ; preds = %if.exit.unwrap
// CHECK-NEXT:   %16 = call i32 (i32, ptr, ...) @dprintf(i32 1, ptr byref(ptr) @global.str.3)
// CHECK-NEXT:   br label %if.exit
// CHECK-NEXT: 
// CHECK-NEXT: if.exit:                                          ; preds = %if.false, %if.true
// CHECK-NEXT:   %17 = getelementptr inbounds %err.struct.i32, ptr %result, i32 0, i32 1
// CHECK-NEXT:   %18 = load ptr, ptr %17, align 8
// CHECK-NEXT:   %19 = getelementptr inbounds %err.struct.i32, ptr %result, i32 0, i32 0
// CHECK-NEXT:   %20 = load i32, ptr %19, align 4
// CHECK-NEXT:   store i32 %20, ptr %value, align 4
// CHECK-NEXT:   %21 = ptrtoint ptr %18 to i64
// CHECK-NEXT:   %ptr.to.bool6 = icmp ne i64 %21, 0
// CHECK-NEXT:   %try.result = select i1 %ptr.to.bool6, i1 false, i1 true
// CHECK-NEXT:   br i1 %try.result, label %if.true7, label %if.exit8
// CHECK-NEXT: 
// CHECK-NEXT: if.true7:                                         ; preds = %if.exit
// CHECK-NEXT:   %22 = load i32, ptr %value, align 4
// CHECK-NEXT:   %23 = call i32 (i32, ptr, ...) @dprintf(i32 1, ptr byref(ptr) @global.str.4, i32 %22)
// CHECK-NEXT:   br label %if.exit8
// CHECK-NEXT: 
// CHECK-NEXT: if.exit8:                                         ; preds = %if.true7, %if.exit
// CHECK-NEXT:   %24 = getelementptr inbounds %err.struct.i32, ptr %result, i32 0, i32 1
// CHECK-NEXT:   %25 = load ptr, ptr %24, align 8
// CHECK-NEXT:   %26 = ptrtoint ptr %25 to i64
// CHECK-NEXT:   %ptr.to.bool9 = icmp ne i64 %26, 0
// CHECK-NEXT:   %catch.result10 = select i1 %ptr.to.bool9, i1 true, i1 false
// CHECK-NEXT:   br i1 %catch.result10, label %if.true11, label %if.exit12
// CHECK-NEXT: 
// CHECK-NEXT: if.true11:                                        ; preds = %if.exit8
// CHECK-NEXT:   %27 = call i32 (i32, ptr, ...) @dprintf(i32 1, ptr byref(ptr) @global.str.5)
// CHECK-NEXT:   br label %if.exit12
// CHECK-NEXT: 
// CHECK-NEXT: if.exit12:                                        ; preds = %if.true11, %if.exit8
// CHECK-NEXT:   call void @foo(ptr sret(%err.struct.i32) %struct.ret.tmp13, i32 1)
// CHECK-NEXT:   %28 = getelementptr inbounds %err.struct.i32, ptr %struct.ret.tmp13, i32 0, i32 1
// CHECK-NEXT:   %29 = load ptr, ptr %28, align 8
// CHECK-NEXT:   %30 = ptrtoint ptr %29 to i64
// CHECK-NEXT:   %ptr.to.bool14 = icmp ne i64 %30, 0
// CHECK-NEXT:   %catch.result15 = select i1 %ptr.to.bool14, i1 true, i1 false
// CHECK-NEXT:   br i1 %catch.result15, label %if.true16, label %if.exit17
// CHECK-NEXT: 
// CHECK-NEXT: if.true16:                                        ; preds = %if.exit12
// CHECK-NEXT:   %31 = call i32 (i32, ptr, ...) @dprintf(i32 1, ptr byref(ptr) @global.str.6)
// CHECK-NEXT:   br label %if.exit17
// CHECK-NEXT: 
// CHECK-NEXT: if.exit17:                                        ; preds = %if.true16, %if.exit12
// CHECK-NEXT:   %32 = getelementptr inbounds %err.struct.i32, ptr %result, i32 0, i32 1
// CHECK-NEXT:   %33 = load ptr, ptr %32, align 8
// CHECK-NEXT:   %34 = ptrtoint ptr %33 to i64
// CHECK-NEXT:   %ptr.to.bool18 = icmp ne i64 %34, 0
// CHECK-NEXT:   br i1 %ptr.to.bool18, label %if.true.unwrap19, label %if.exit.unwrap20
// CHECK-NEXT: 
// CHECK-NEXT: if.true.unwrap19:                                 ; preds = %if.exit17
// CHECK-NEXT:   call void @llvm.trap()
// CHECK-NEXT:   br label %if.exit.unwrap20
// CHECK-NEXT: 
// CHECK-NEXT: if.exit.unwrap20:                                 ; preds = %if.true.unwrap19, %if.exit17
// CHECK-NEXT:   %35 = getelementptr inbounds %err.struct.i32, ptr %result, i32 0, i32 0
// CHECK-NEXT:   %36 = load i32, ptr %35, align 4
// CHECK-NEXT:   %37 = call i32 (i32, ptr, ...) @dprintf(i32 1, ptr byref(ptr) @global.str.7, i32 %36)
// CHECK-NEXT:   call void @foo(ptr sret(%err.struct.i32) %struct.ret.tmp21, i32 10)
// CHECK-NEXT:   %38 = getelementptr inbounds %err.struct.i32, ptr %struct.ret.tmp21, i32 0, i32 1
// CHECK-NEXT:   %39 = load ptr, ptr %38, align 8
// CHECK-NEXT:   %40 = ptrtoint ptr %39 to i64
// CHECK-NEXT:   %ptr.to.bool22 = icmp ne i64 %40, 0
// CHECK-NEXT:   br i1 %ptr.to.bool22, label %if.true.unwrap23, label %if.exit.unwrap24
// CHECK-NEXT: 
// CHECK-NEXT: if.true.unwrap23:                                 ; preds = %if.exit.unwrap20
// CHECK-NEXT:   call void @llvm.trap()
// CHECK-NEXT:   br label %if.exit.unwrap24
// CHECK-NEXT: 
// CHECK-NEXT: if.exit.unwrap24:                                 ; preds = %if.true.unwrap23, %if.exit.unwrap20
// CHECK-NEXT:   %41 = getelementptr inbounds %err.struct.i32, ptr %struct.ret.tmp21, i32 0, i32 0
// CHECK-NEXT:   %42 = load i32, ptr %41, align 4
// CHECK-NEXT:   %43 = call i32 (i32, ptr, ...) @dprintf(i32 1, ptr byref(ptr) @global.str.8, i32 %42)
// CHECK-NEXT:   ret void
// CHECK-NEXT: }