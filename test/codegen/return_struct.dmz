// RUN: dmz %s -llvm-dump 2>&1 | filecheck %s
// RUN: diff <(dmz %s -run 2>&1) <(echo -n -e '0\n1\n2\n3\n10\n15\n')
struct S {
  x: i32,
  s2: S2,
}

struct S2 {
  x: i32,
  y: i32,
  z: i32,
}

struct Small {
  x: i32,
  y: i32,
}

fn foo(x: i32) -> Small {
  let s = Small { x: x, y: x + 5 };
  return s;
}
// CHECK: define void @return_struct.foo(ptr sret(%return_struct.Small) %ret, i32 %0) {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %x = alloca i32, align 4
// CHECK-NEXT:   %s = alloca %return_struct.Small, align 8
// CHECK-NEXT:   %tmp.struct.return_struct.Small = alloca %return_struct.Small, align 8
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %x, i8 0, i64 4, i1 false)
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %s, i8 0, i64 8, i1 false)
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %tmp.struct.return_struct.Small, i8 0, i64 8, i1 false)
// CHECK-NEXT:   store i32 %0, ptr %x, align 4
// CHECK-NEXT:   %1 = load i32, ptr %x, align 4
// CHECK-NEXT:   %2 = load i32, ptr %x, align 4
// CHECK-NEXT:   %3 = add i32 %2, 5
// CHECK-NEXT:   %4 = getelementptr inbounds nuw %return_struct.Small, ptr %tmp.struct.return_struct.Small, i32 0, i32 0
// CHECK-NEXT:   store i32 %1, ptr %4, align 4
// CHECK-NEXT:   %5 = getelementptr inbounds nuw %return_struct.Small, ptr %tmp.struct.return_struct.Small, i32 0, i32 1
// CHECK-NEXT:   store i32 %3, ptr %5, align 4
// CHECK-NEXT:   call void @llvm.memcpy.p0.p0.i64(ptr align 4 %s, ptr align 4 %tmp.struct.return_struct.Small, i64 8, i1 false)
// CHECK-NEXT:   call void @llvm.memcpy.p0.p0.i64(ptr align 4 %ret, ptr align 4 %s, i64 8, i1 false)
// CHECK-NEXT:   br label %return
// CHECK-NEXT: 
// CHECK-NEXT: return:                                           ; preds = %entry
// CHECK-NEXT:   ret void
// CHECK-NEXT: }

fn bar() -> S {
  return S { x: 0, s2: S2 { x: 1, y: 2, z: 3 } };
}
// CHECK: define void @return_struct.bar(ptr sret(%return_struct.S) %ret) {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %tmp.struct.return_struct.S = alloca %return_struct.S, align 8
// CHECK-NEXT:   %tmp.struct.return_struct.S2 = alloca %return_struct.S2, align 8
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %tmp.struct.return_struct.S, i8 0, i64 16, i1 false)
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %tmp.struct.return_struct.S2, i8 0, i64 12, i1 false)
// CHECK-NEXT:   %0 = getelementptr inbounds nuw %return_struct.S2, ptr %tmp.struct.return_struct.S2, i32 0, i32 0
// CHECK-NEXT:   store i32 1, ptr %0, align 4
// CHECK-NEXT:   %1 = getelementptr inbounds nuw %return_struct.S2, ptr %tmp.struct.return_struct.S2, i32 0, i32 1
// CHECK-NEXT:   store i32 2, ptr %1, align 4
// CHECK-NEXT:   %2 = getelementptr inbounds nuw %return_struct.S2, ptr %tmp.struct.return_struct.S2, i32 0, i32 2
// CHECK-NEXT:   store i32 3, ptr %2, align 4
// CHECK-NEXT:   %3 = getelementptr inbounds nuw %return_struct.S, ptr %tmp.struct.return_struct.S, i32 0, i32 0
// CHECK-NEXT:   store i32 0, ptr %3, align 4
// CHECK-NEXT:   %4 = getelementptr inbounds nuw %return_struct.S, ptr %tmp.struct.return_struct.S, i32 0, i32 1
// CHECK-NEXT:   call void @llvm.memcpy.p0.p0.i64(ptr align 4 %4, ptr align 4 %tmp.struct.return_struct.S2, i64 12, i1 false)
// CHECK-NEXT:   call void @llvm.memcpy.p0.p0.i64(ptr align 4 %ret, ptr align 4 %tmp.struct.return_struct.S, i64 16, i1 false)
// CHECK-NEXT:   br label %return
// CHECK-NEXT: 
// CHECK-NEXT: return:                                           ; preds = %entry
// CHECK-NEXT:   ret void
// CHECK-NEXT: }

extern fn printf(fmt:*u8, ...) -> i32; fn println(n:i32) -> void {printf("%d\n", n);}

fn main() -> void {
  println(bar().x);
  println(bar().s2.x);
  println(bar().s2.y);
  println(bar().s2.z);

  println(foo(10).x);
  println(foo(10).y);
}
// CHECK: define void @__builtin_main() {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %struct.ret.tmp = alloca %return_struct.S, align 8
// CHECK-NEXT:   %struct.ret.tmp1 = alloca %return_struct.S, align 8
// CHECK-NEXT:   %struct.ret.tmp2 = alloca %return_struct.S, align 8
// CHECK-NEXT:   %struct.ret.tmp3 = alloca %return_struct.S, align 8
// CHECK-NEXT:   %struct.ret.tmp4 = alloca %return_struct.Small, align 8
// CHECK-NEXT:   %struct.ret.tmp5 = alloca %return_struct.Small, align 8
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %struct.ret.tmp, i8 0, i64 16, i1 false)
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %struct.ret.tmp1, i8 0, i64 16, i1 false)
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %struct.ret.tmp2, i8 0, i64 16, i1 false)
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %struct.ret.tmp3, i8 0, i64 16, i1 false)
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %struct.ret.tmp4, i8 0, i64 8, i1 false)
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %struct.ret.tmp5, i8 0, i64 8, i1 false)

// CHECK-NEXT:   call void @return_struct.bar(ptr sret(%return_struct.S) %struct.ret.tmp)
// CHECK-NEXT:   %0 = getelementptr inbounds nuw %return_struct.S, ptr %struct.ret.tmp, i32 0, i32 0
// CHECK-NEXT:   %1 = load i32, ptr %0, align 4
// CHECK-NEXT:   call void @return_struct.println(i32 %1)

// CHECK-NEXT:   call void @return_struct.bar(ptr sret(%return_struct.S) %struct.ret.tmp1)
// CHECK-NEXT:   %2 = getelementptr inbounds nuw %return_struct.S, ptr %struct.ret.tmp1, i32 0, i32 1
// CHECK-NEXT:   %3 = getelementptr inbounds nuw %return_struct.S2, ptr %2, i32 0, i32 0
// CHECK-NEXT:   %4 = load i32, ptr %3, align 4
// CHECK-NEXT:   call void @return_struct.println(i32 %4)

// CHECK-NEXT:   call void @return_struct.bar(ptr sret(%return_struct.S) %struct.ret.tmp2)
// CHECK-NEXT:   %5 = getelementptr inbounds nuw %return_struct.S, ptr %struct.ret.tmp2, i32 0, i32 1
// CHECK-NEXT:   %6 = getelementptr inbounds nuw %return_struct.S2, ptr %5, i32 0, i32 1
// CHECK-NEXT:   %7 = load i32, ptr %6, align 4
// CHECK-NEXT:   call void @return_struct.println(i32 %7)

// CHECK-NEXT:   call void @return_struct.bar(ptr sret(%return_struct.S) %struct.ret.tmp3)
// CHECK-NEXT:   %8 = getelementptr inbounds nuw %return_struct.S, ptr %struct.ret.tmp3, i32 0, i32 1
// CHECK-NEXT:   %9 = getelementptr inbounds nuw %return_struct.S2, ptr %8, i32 0, i32 2
// CHECK-NEXT:   %10 = load i32, ptr %9, align 4
// CHECK-NEXT:   call void @return_struct.println(i32 %10)

// CHECK-NEXT:   call void @return_struct.foo(ptr sret(%return_struct.Small) %struct.ret.tmp4, i32 10)
// CHECK-NEXT:   %11 = getelementptr inbounds nuw %return_struct.Small, ptr %struct.ret.tmp4, i32 0, i32 0
// CHECK-NEXT:   %12 = load i32, ptr %11, align 4
// CHECK-NEXT:   call void @return_struct.println(i32 %12)

// CHECK-NEXT:   call void @return_struct.foo(ptr sret(%return_struct.Small) %struct.ret.tmp5, i32 10)
// CHECK-NEXT:   %13 = getelementptr inbounds nuw %return_struct.Small, ptr %struct.ret.tmp5, i32 0, i32 1
// CHECK-NEXT:   %14 = load i32, ptr %13, align 4
// CHECK-NEXT:   call void @return_struct.println(i32 %14)

// CHECK-NEXT:   ret void
// CHECK-NEXT: }
