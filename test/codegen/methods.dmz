// RUN: compiler %s -llvm-dump 2>&1 | filecheck %s
// RUN: diff <(compiler %s -run 2>&1) <(echo -n -e 'Color{1, 2, 3}\nColor{11, 12, 13}\n')

extern fn printf(fmt:*u8, ...) -> i32;

struct Color {
    r: i32,
    g: i32,
    b: i32,
}

fn Color.print(self:&Color) -> i32 {
    return printf("Color{%d, %d, %d}\n", self.r, self.g, self.b);
}
// CHECK: define i32 @Color__print(ptr byref(%struct.Color) %self) {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %retval = alloca i32, align 4
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %retval, i8 0, i64 4, i1 false)
// CHECK-NEXT:   %0 = getelementptr inbounds %struct.Color, ptr %self, i32 0, i32 0
// CHECK-NEXT:   %1 = load i32, ptr %0, align 4
// CHECK-NEXT:   %2 = getelementptr inbounds %struct.Color, ptr %self, i32 0, i32 1
// CHECK-NEXT:   %3 = load i32, ptr %2, align 4
// CHECK-NEXT:   %4 = getelementptr inbounds %struct.Color, ptr %self, i32 0, i32 2
// CHECK-NEXT:   %5 = load i32, ptr %4, align 4
// CHECK-NEXT:   %6 = call i32 (ptr, ...) @printf(ptr @global.str, i32 %1, i32 %3, i32 %5)
// CHECK-NEXT:   store i32 %6, ptr %retval, align 4
// CHECK-NEXT:   br label %return
// CHECK-NEXT: 
// CHECK-NEXT: return:                                           ; preds = %entry
// CHECK-NEXT:   %7 = load i32, ptr %retval, align 4
// CHECK-NEXT:   ret i32 %7
// CHECK-NEXT: }

fn Color.add(self:&Color, const n:i32) -> void {
    self.r = self.r + n;
    self.g = self.g + n;
    self.b = self.b + n;
}
// CHECK: define void @Color__add(ptr byref(%struct.Color) %self, i32 %n) {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %0 = getelementptr inbounds %struct.Color, ptr %self, i32 0, i32 0
// CHECK-NEXT:   %1 = load i32, ptr %0, align 4
// CHECK-NEXT:   %2 = add i32 %1, %n
// CHECK-NEXT:   %3 = getelementptr inbounds %struct.Color, ptr %self, i32 0, i32 0
// CHECK-NEXT:   store i32 %2, ptr %3, align 4
// CHECK-NEXT:   %4 = getelementptr inbounds %struct.Color, ptr %self, i32 0, i32 1
// CHECK-NEXT:   %5 = load i32, ptr %4, align 4
// CHECK-NEXT:   %6 = add i32 %5, %n
// CHECK-NEXT:   %7 = getelementptr inbounds %struct.Color, ptr %self, i32 0, i32 1
// CHECK-NEXT:   store i32 %6, ptr %7, align 4
// CHECK-NEXT:   %8 = getelementptr inbounds %struct.Color, ptr %self, i32 0, i32 2
// CHECK-NEXT:   %9 = load i32, ptr %8, align 4
// CHECK-NEXT:   %10 = add i32 %9, %n
// CHECK-NEXT:   %11 = getelementptr inbounds %struct.Color, ptr %self, i32 0, i32 2
// CHECK-NEXT:   store i32 %10, ptr %11, align 4
// CHECK-NEXT:   ret void
// CHECK-NEXT: }

fn main() -> void {
    let c:Color = Color{r:1, g:2, b:3};
    c.print();
    c.add(10);
    c.print();
}
// CHECK: define void @__builtin_main() {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %c = alloca %struct.Color, align 8
// CHECK-NEXT:   %Color.tmp = alloca %struct.Color, align 8
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %c, i8 0, i64 12, i1 false)
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %Color.tmp, i8 0, i64 12, i1 false)
// CHECK-NEXT:   %0 = getelementptr inbounds %struct.Color, ptr %Color.tmp, i32 0, i32 0
// CHECK-NEXT:   store i32 1, ptr %0, align 4
// CHECK-NEXT:   %1 = getelementptr inbounds %struct.Color, ptr %Color.tmp, i32 0, i32 1
// CHECK-NEXT:   store i32 2, ptr %1, align 4
// CHECK-NEXT:   %2 = getelementptr inbounds %struct.Color, ptr %Color.tmp, i32 0, i32 2
// CHECK-NEXT:   store i32 3, ptr %2, align 4
// CHECK-NEXT:   call void @llvm.memcpy.p0.p0.i64(ptr align 4 %c, ptr align 4 %Color.tmp, i64 12, i1 false)
// CHECK-NEXT:   %3 = call i32 @Color__print(ptr byref(%struct.Color) %c)
// CHECK-NEXT:   call void @Color__add(ptr byref(%struct.Color) %c, i32 10)
// CHECK-NEXT:   %4 = call i32 @Color__print(ptr byref(%struct.Color) %c)
// CHECK-NEXT:   ret void
// CHECK-NEXT: }