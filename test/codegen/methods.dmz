// RUN: compiler %s -llvm-dump 2>&1 | filecheck %s
// RUN: diff <(compiler %s -run 2>&1) <(echo -n -e 'Color{1, 2, 3}\nColor{11, 12, 13}\n')

extern fn printf(fmt:*u8, ...) -> i32;

struct Color {
    r: i32,
    g: i32,
    b: i32,
    
    pub fn print() -> i32 {
        return printf("Color{%d, %d, %d}\n", .r, .g, .b);
    }
    pub fn add(n:i32) -> void {
        .r = .r + n;
        .g = .g + n;
        .b = .b + n;
    }
}

// CHECK: define i32 @methods.Color.print(ptr byref(%methods.Color) %0) {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %retval = alloca i32, align 4
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %retval, i8 0, i64 4, i1 false)
// CHECK-NEXT:   %1 = getelementptr inbounds nuw %methods.Color, ptr %0, i32 0, i32 0
// CHECK-NEXT:   %2 = load i32, ptr %1, align 4
// CHECK-NEXT:   %3 = getelementptr inbounds nuw %methods.Color, ptr %0, i32 0, i32 1
// CHECK-NEXT:   %4 = load i32, ptr %3, align 4
// CHECK-NEXT:   %5 = getelementptr inbounds nuw %methods.Color, ptr %0, i32 0, i32 2
// CHECK-NEXT:   %6 = load i32, ptr %5, align 4
// CHECK-NEXT:   %7 = call i32 (ptr, ...) @printf(ptr byref(i8) @global.str, i32 %2, i32 %4, i32 %6)
// CHECK-NEXT:   store i32 %7, ptr %retval, align 4
// CHECK-NEXT:   br label %return
// CHECK-NEXT: 
// CHECK-NEXT: return:                                           ; preds = %entry
// CHECK-NEXT:   %8 = load i32, ptr %retval, align 4
// CHECK-NEXT:   ret i32 %8
// CHECK-NEXT: }

// CHECK: define void @methods.Color.add(ptr byref(%methods.Color) %0, i32 %n) {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %1 = getelementptr inbounds nuw %methods.Color, ptr %0, i32 0, i32 0
// CHECK-NEXT:   %2 = load i32, ptr %1, align 4
// CHECK-NEXT:   %3 = add i32 %2, %n
// CHECK-NEXT:   %4 = getelementptr inbounds nuw %methods.Color, ptr %0, i32 0, i32 0
// CHECK-NEXT:   store i32 %3, ptr %4, align 4
// CHECK-NEXT:   %5 = getelementptr inbounds nuw %methods.Color, ptr %0, i32 0, i32 1
// CHECK-NEXT:   %6 = load i32, ptr %5, align 4
// CHECK-NEXT:   %7 = add i32 %6, %n
// CHECK-NEXT:   %8 = getelementptr inbounds nuw %methods.Color, ptr %0, i32 0, i32 1
// CHECK-NEXT:   store i32 %7, ptr %8, align 4
// CHECK-NEXT:   %9 = getelementptr inbounds nuw %methods.Color, ptr %0, i32 0, i32 2
// CHECK-NEXT:   %10 = load i32, ptr %9, align 4
// CHECK-NEXT:   %11 = add i32 %10, %n
// CHECK-NEXT:   %12 = getelementptr inbounds nuw %methods.Color, ptr %0, i32 0, i32 2
// CHECK-NEXT:   store i32 %11, ptr %12, align 4
// CHECK-NEXT:   ret void
// CHECK-NEXT: }

fn main() -> void {
    let c:Color = Color{r:1, g:2, b:3};
    c.print();
    c.add(10);
    c.print();
}
// CHECK: define void @__builtin_main() {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %c = alloca %methods.Color, align 8
// CHECK-NEXT:   %tmp.struct.methods.Color = alloca %methods.Color, align 8
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %c, i8 0, i64 12, i1 false)
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %tmp.struct.methods.Color, i8 0, i64 12, i1 false)
// CHECK-NEXT:   %0 = getelementptr inbounds nuw %methods.Color, ptr %tmp.struct.methods.Color, i32 0, i32 0
// CHECK-NEXT:   store i32 1, ptr %0, align 4
// CHECK-NEXT:   %1 = getelementptr inbounds nuw %methods.Color, ptr %tmp.struct.methods.Color, i32 0, i32 1
// CHECK-NEXT:   store i32 2, ptr %1, align 4
// CHECK-NEXT:   %2 = getelementptr inbounds nuw %methods.Color, ptr %tmp.struct.methods.Color, i32 0, i32 2
// CHECK-NEXT:   store i32 3, ptr %2, align 4
// CHECK-NEXT:   call void @llvm.memcpy.p0.p0.i64(ptr align 4 %c, ptr align 4 %tmp.struct.methods.Color, i64 12, i1 false)
// CHECK-NEXT:   %3 = call i32 @methods.Color.print(ptr byref(%methods.Color) %c)
// CHECK-NEXT:   call void @methods.Color.add(ptr byref(%methods.Color) %c, i32 10)
// CHECK-NEXT:   %4 = call i32 @methods.Color.print(ptr byref(%methods.Color) %c)
// CHECK-NEXT:   ret void
// CHECK-NEXT: }