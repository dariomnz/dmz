// RUN: dmz %s -llvm-dump 2>&1 | filecheck %s
// RUN: diff <(dmz %s -run 2>&1) <(echo -n -e 'Color{1, 2, 3}\nColor{11, 12, 13}\n')

extern fn printf(fmt:*u8, ...) -> i32;

struct Color {
    r: i32,
    g: i32,
    b: i32,
    
    pub fn print(self: *@This) -> i32 {
        return printf("Color{%d, %d, %d}\n", self.r, self.g, self.b);
    }
    pub fn add(self: *@This, n:i32) -> void {
        self.r += n;
        self.g += n;
        self.b += n;
    }
}
// CHECK: define i32 @methods.Color.print(ptr byref(%methods.Color) %0) {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %retval = alloca i32, align 4
// CHECK-NEXT:   %self = alloca ptr, align 8
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %retval, i8 0, i64 4, i1 false)
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %self, i8 0, i64 8, i1 false)
// CHECK-NEXT:   store ptr %0, ptr %self, align 8
// CHECK-NEXT:   %1 = load ptr, ptr %self, align 8
// CHECK-NEXT:   %2 = getelementptr inbounds nuw %methods.Color, ptr %1, i32 0, i32 0
// CHECK-NEXT:   %3 = load i32, ptr %2, align 4
// CHECK-NEXT:   %4 = load ptr, ptr %self, align 8
// CHECK-NEXT:   %5 = getelementptr inbounds nuw %methods.Color, ptr %4, i32 0, i32 1
// CHECK-NEXT:   %6 = load i32, ptr %5, align 4
// CHECK-NEXT:   %7 = load ptr, ptr %self, align 8
// CHECK-NEXT:   %8 = getelementptr inbounds nuw %methods.Color, ptr %7, i32 0, i32 2
// CHECK-NEXT:   %9 = load i32, ptr %8, align 4
// CHECK-NEXT:   %10 = call i32 (ptr, ...) @printf(ptr byref(i8) @global.str, i32 %3, i32 %6, i32 %9)
// CHECK-NEXT:   store i32 %10, ptr %retval, align 4
// CHECK-NEXT:   br label %return
// CHECK-NEXT: 
// CHECK-NEXT: return:                                           ; preds = %entry
// CHECK-NEXT:   %11 = load i32, ptr %retval, align 4
// CHECK-NEXT:   ret i32 %11
// CHECK-NEXT: }

// CHECK: define void @methods.Color.add(ptr byref(%methods.Color) %0, i32 %1) {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %self = alloca ptr, align 8
// CHECK-NEXT:   %n = alloca i32, align 4
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %self, i8 0, i64 8, i1 false)
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %n, i8 0, i64 4, i1 false)
// CHECK-NEXT:   store ptr %0, ptr %self, align 8
// CHECK-NEXT:   store i32 %1, ptr %n, align 4
// CHECK-NEXT:   %2 = load ptr, ptr %self, align 8
// CHECK-NEXT:   %3 = getelementptr inbounds nuw %methods.Color, ptr %2, i32 0, i32 0
// CHECK-NEXT:   %4 = load i32, ptr %3, align 4
// CHECK-NEXT:   %5 = load i32, ptr %n, align 4
// CHECK-NEXT:   %6 = add i32 %4, %5
// CHECK-NEXT:   %7 = load ptr, ptr %self, align 8
// CHECK-NEXT:   %8 = getelementptr inbounds nuw %methods.Color, ptr %7, i32 0, i32 0
// CHECK-NEXT:   store i32 %6, ptr %8, align 4
// CHECK-NEXT:   %9 = load ptr, ptr %self, align 8
// CHECK-NEXT:   %10 = getelementptr inbounds nuw %methods.Color, ptr %9, i32 0, i32 1
// CHECK-NEXT:   %11 = load i32, ptr %10, align 4
// CHECK-NEXT:   %12 = load i32, ptr %n, align 4
// CHECK-NEXT:   %13 = add i32 %11, %12
// CHECK-NEXT:   %14 = load ptr, ptr %self, align 8
// CHECK-NEXT:   %15 = getelementptr inbounds nuw %methods.Color, ptr %14, i32 0, i32 1
// CHECK-NEXT:   store i32 %13, ptr %15, align 4
// CHECK-NEXT:   %16 = load ptr, ptr %self, align 8
// CHECK-NEXT:   %17 = getelementptr inbounds nuw %methods.Color, ptr %16, i32 0, i32 2
// CHECK-NEXT:   %18 = load i32, ptr %17, align 4
// CHECK-NEXT:   %19 = load i32, ptr %n, align 4
// CHECK-NEXT:   %20 = add i32 %18, %19
// CHECK-NEXT:   %21 = load ptr, ptr %self, align 8
// CHECK-NEXT:   %22 = getelementptr inbounds nuw %methods.Color, ptr %21, i32 0, i32 2
// CHECK-NEXT:   store i32 %20, ptr %22, align 4
// CHECK-NEXT:   ret void
// CHECK-NEXT: }

fn main() -> void {
    let c:Color = Color{r:1, g:2, b:3};
    c.print();
    c.add(10);
    c.print();
}
// CHECK: define void @__builtin_main() {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %c = alloca %methods.Color, align 8
// CHECK-NEXT:   %tmp.struct.methods.Color = alloca %methods.Color, align 8
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %c, i8 0, i64 12, i1 false)
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %tmp.struct.methods.Color, i8 0, i64 12, i1 false)
// CHECK-NEXT:   %0 = getelementptr inbounds nuw %methods.Color, ptr %tmp.struct.methods.Color, i32 0, i32 0
// CHECK-NEXT:   store i32 1, ptr %0, align 4
// CHECK-NEXT:   %1 = getelementptr inbounds nuw %methods.Color, ptr %tmp.struct.methods.Color, i32 0, i32 1
// CHECK-NEXT:   store i32 2, ptr %1, align 4
// CHECK-NEXT:   %2 = getelementptr inbounds nuw %methods.Color, ptr %tmp.struct.methods.Color, i32 0, i32 2
// CHECK-NEXT:   store i32 3, ptr %2, align 4
// CHECK-NEXT:   call void @llvm.memcpy.p0.p0.i64(ptr align 4 %c, ptr align 4 %tmp.struct.methods.Color, i64 12, i1 false)
// CHECK-NEXT:   %3 = call i32 @methods.Color.print(ptr byref(%methods.Color) %c)
// CHECK-NEXT:   call void @methods.Color.add(ptr byref(%methods.Color) %c, i32 10)
// CHECK-NEXT:   %4 = call i32 @methods.Color.print(ptr byref(%methods.Color) %c)
// CHECK-NEXT:   ret void
// CHECK-NEXT: }