// RUN: dmz %s -llvm-dump 2>&1 | filecheck %s
// RUN: diff <(dmz %s -run 2>&1) <(echo -n -e '1\n2\n3\n2\n')
struct S {
  x: i32,
}
extern fn printf(fmt:*u8, ...) -> i32; fn println(n:i32) -> void {printf("%d\n", n);}

fn foo(a: i32, b: S, c: i32, d: S) -> void {
  println(a);
  println(b.x);
  println(c);
  println(d.x);
}
// CHECK: define void @struct_parameter_attrs.foo(i32 %a, ptr readonly %b, i32 %c, ptr readonly %d) {
// CHECK-NEXT: entry:
// CHECK-NEXT:   call void @struct_parameter_attrs.println(i32 %a)
// CHECK-NEXT:   %0 = getelementptr inbounds nuw %struct_parameter_attrs.S, ptr %b, i32 0, i32 0
// CHECK-NEXT:   %1 = load i32, ptr %0, align 4
// CHECK-NEXT:   call void @struct_parameter_attrs.println(i32 %1)
// CHECK-NEXT:   call void @struct_parameter_attrs.println(i32 %c)
// CHECK-NEXT:   %2 = getelementptr inbounds nuw %struct_parameter_attrs.S, ptr %d, i32 0, i32 0
// CHECK-NEXT:   %3 = load i32, ptr %2, align 4
// CHECK-NEXT:   call void @struct_parameter_attrs.println(i32 %3)
// CHECK-NEXT:   ret void
// CHECK-NEXT: }

fn main() -> void {
  let s = S { x: 2 };
  foo(1, s, 3, s);
}
// CHECK: define void @__builtin_main() {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %s = alloca %struct_parameter_attrs.S, align 8
// CHECK-NEXT:   %tmp.struct.struct_parameter_attrs.S = alloca %struct_parameter_attrs.S, align 8
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %s, i8 0, i64 4, i1 false)
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %tmp.struct.struct_parameter_attrs.S, i8 0, i64 4, i1 false)
// CHECK-NEXT:   %0 = getelementptr inbounds nuw %struct_parameter_attrs.S, ptr %tmp.struct.struct_parameter_attrs.S, i32 0, i32 0
// CHECK-NEXT:   store i32 2, ptr %0, align 4
// CHECK-NEXT:   call void @llvm.memcpy.p0.p0.i64(ptr align 4 %s, ptr align 4 %tmp.struct.struct_parameter_attrs.S, i64 4, i1 false)
// CHECK-NEXT:   call void @struct_parameter_attrs.foo(i32 1, ptr readonly %s, i32 3, ptr readonly %s)
// CHECK-NEXT:   ret void
// CHECK-NEXT: }
