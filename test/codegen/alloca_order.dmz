// RUN: dmz %s -llvm-dump 2>&1 | filecheck %s
// RUN: diff <(dmz %s -run 2>&1) <(echo -n -e '1\n2\n3\n')
extern fn printf(fmt:*u8, ...) -> i32; fn println(n:i32) -> void {printf("%d\n", n);}
fn foo(x: i32, y: i32, z: i32) -> void {
    let x1: i32 = x;
    let y1: i32 = y;
    let z1: i32 = z;

    println(x1);
    println(y1);
    println(z1);
}
// CHECK: define void @alloca_order.foo(i32 %0, i32 %1, i32 %2) {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %x = alloca i32, align 4
// CHECK-NEXT:   %y = alloca i32, align 4
// CHECK-NEXT:   %z = alloca i32, align 4
// CHECK-NEXT:   %x1 = alloca i32, align 4
// CHECK-NEXT:   %y1 = alloca i32, align 4
// CHECK-NEXT:   %z1 = alloca i32, align 4
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %x, i8 0, i64 4, i1 false)
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %y, i8 0, i64 4, i1 false)
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %z, i8 0, i64 4, i1 false)
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %x1, i8 0, i64 4, i1 false)
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %y1, i8 0, i64 4, i1 false)
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %z1, i8 0, i64 4, i1 false)
// CHECK-NEXT:   store i32 %0, ptr %x, align 4
// CHECK-NEXT:   store i32 %1, ptr %y, align 4
// CHECK-NEXT:   store i32 %2, ptr %z, align 4
// CHECK-NEXT:   %3 = load i32, ptr %x, align 4
// CHECK-NEXT:   store i32 %3, ptr %x1, align 4
// CHECK-NEXT:   %4 = load i32, ptr %y, align 4
// CHECK-NEXT:   store i32 %4, ptr %y1, align 4
// CHECK-NEXT:   %5 = load i32, ptr %z, align 4
// CHECK-NEXT:   store i32 %5, ptr %z1, align 4
// CHECK-NEXT:   %6 = load i32, ptr %x1, align 4
// CHECK-NEXT:   call void @alloca_order.println(i32 %6)
// CHECK-NEXT:   %7 = load i32, ptr %y1, align 4
// CHECK-NEXT:   call void @alloca_order.println(i32 %7)
// CHECK-NEXT:   %8 = load i32, ptr %z1, align 4
// CHECK-NEXT:   call void @alloca_order.println(i32 %8)
// CHECK-NEXT:   ret void
// CHECK-NEXT: }

fn main() -> void {
    foo(1, 2, 3);
}
