// RUN: dmz %s -llvm-dump 2>&1 | filecheck %s
// RUN: diff <(dmz %s -run) <(echo -n -e 'a = 12\na++ = 13\na-- = 12\na+=3 = 15\na-=4 = 11\na*=2 = 22\na/=2 = 11\n')
extern fn printf(fmt: *u8, ...) -> i32;
fn main() -> void {
    let a = 12;
    printf("a = %d\n", a);
    a++;
    printf("a++ = %d\n", a);
    a--;
    printf("a-- = %d\n", a);
    a+=3;
    printf("a+=3 = %d\n", a);
    a-=4;
    printf("a-=4 = %d\n", a);
    a*=2;
    printf("a*=2 = %d\n", a);
    a/=2;
    printf("a/=2 = %d\n", a);
}
// CHECK: define void @__builtin_main() {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %a = alloca i32, align 4
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %a, i8 0, i64 4, i1 false)
// CHECK-NEXT:   store i32 12, ptr %a, align 4
// CHECK-NEXT:   %0 = load i32, ptr %a, align 4
// CHECK-NEXT:   %1 = call i32 (ptr, ...) @printf(ptr byref(i8) @global.str, i32 %0)
// CHECK-NEXT:   %2 = load i32, ptr %a, align 4
// CHECK-NEXT:   %3 = add i32 %2, 1
// CHECK-NEXT:   store i32 %3, ptr %a, align 4
// CHECK-NEXT:   %4 = load i32, ptr %a, align 4
// CHECK-NEXT:   %5 = call i32 (ptr, ...) @printf(ptr byref(i8) @global.str.1, i32 %4)
// CHECK-NEXT:   %6 = load i32, ptr %a, align 4
// CHECK-NEXT:   %7 = sub i32 %6, 1
// CHECK-NEXT:   store i32 %7, ptr %a, align 4
// CHECK-NEXT:   %8 = load i32, ptr %a, align 4
// CHECK-NEXT:   %9 = call i32 (ptr, ...) @printf(ptr byref(i8) @global.str.2, i32 %8)
// CHECK-NEXT:   %10 = load i32, ptr %a, align 4
// CHECK-NEXT:   %11 = add i32 %10, 3
// CHECK-NEXT:   store i32 %11, ptr %a, align 4
// CHECK-NEXT:   %12 = load i32, ptr %a, align 4
// CHECK-NEXT:   %13 = call i32 (ptr, ...) @printf(ptr byref(i8) @global.str.3, i32 %12)
// CHECK-NEXT:   %14 = load i32, ptr %a, align 4
// CHECK-NEXT:   %15 = sub i32 %14, 4
// CHECK-NEXT:   store i32 %15, ptr %a, align 4
// CHECK-NEXT:   %16 = load i32, ptr %a, align 4
// CHECK-NEXT:   %17 = call i32 (ptr, ...) @printf(ptr byref(i8) @global.str.4, i32 %16)
// CHECK-NEXT:   %18 = load i32, ptr %a, align 4
// CHECK-NEXT:   %19 = mul i32 %18, 2
// CHECK-NEXT:   store i32 %19, ptr %a, align 4
// CHECK-NEXT:   %20 = load i32, ptr %a, align 4
// CHECK-NEXT:   %21 = call i32 (ptr, ...) @printf(ptr byref(i8) @global.str.5, i32 %20)
// CHECK-NEXT:   %22 = load i32, ptr %a, align 4
// CHECK-NEXT:   %23 = sdiv i32 %22, 2
// CHECK-NEXT:   store i32 %23, ptr %a, align 4
// CHECK-NEXT:   %24 = load i32, ptr %a, align 4
// CHECK-NEXT:   %25 = call i32 (ptr, ...) @printf(ptr byref(i8) @global.str.6, i32 %24)
// CHECK-NEXT:   ret void
// CHECK-NEXT: }