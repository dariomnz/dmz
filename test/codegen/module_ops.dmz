// RUN: compiler %s -module -llvm-dump 2>&1 | filecheck %s
module ops;

fn print(x:int) -> void {
    println(x);
}

// CHECK: define void @ops__print(i32 %x) {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %x1 = alloca i32, align 4
// CHECK-NEXT:   store i32 %x, ptr %x1, align 4
// CHECK-NEXT:   %0 = load i32, ptr %x1, align 4
// CHECK-NEXT:   call void @ops__println(i32 %0)
// CHECK-NEXT:   ret void
// CHECK-NEXT: }

extern fn printf(fmt:&char[], ...) -> int;
// CHECK: declare i32 @printf(ptr byref(ptr) %0, ...)

fn println(const n:int) -> void {printf(&"%d\n", n);}
// CHECK: define void @ops__println(i32 %n) {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %0 = call i32 (ptr, ...) @printf(ptr byref(ptr) @global.str, i32 %n)
// CHECK-NEXT:   ret void
// CHECK-NEXT: }

module ops::integer;

fn add(x:int, y:int) -> int {
    return x + y;
}
// CHECK: define i32 @ops__integer__add(i32 %x, i32 %y) {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %retval = alloca i32, align 4
// CHECK-NEXT:   %x1 = alloca i32, align 4
// CHECK-NEXT:   %y2 = alloca i32, align 4
// CHECK-NEXT:   store i32 %x, ptr %x1, align 4
// CHECK-NEXT:   store i32 %y, ptr %y2, align 4
// CHECK-NEXT:   %0 = load i32, ptr %x1, align 4
// CHECK-NEXT:   %1 = load i32, ptr %y2, align 4
// CHECK-NEXT:   %2 = add i32 %0, %1
// CHECK-NEXT:   store i32 %2, ptr %retval, align 4
// CHECK-NEXT:   br label %return
// CHECK-NEXT: 
// CHECK-NEXT: return:                                           ; preds = %entry
// CHECK-NEXT:   %3 = load i32, ptr %retval, align 4
// CHECK-NEXT:   ret i32 %3
// CHECK-NEXT: }

fn sub(x:int, y:int) -> int {
    return x - y;
}
// CHECK:  define i32 @ops__integer__sub(i32 %x, i32 %y) {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    %retval = alloca i32, align 4
// CHECK-NEXT:    %x1 = alloca i32, align 4
// CHECK-NEXT:    %y2 = alloca i32, align 4
// CHECK-NEXT:    store i32 %x, ptr %x1, align 4
// CHECK-NEXT:    store i32 %y, ptr %y2, align 4
// CHECK-NEXT:    %0 = load i32, ptr %x1, align 4
// CHECK-NEXT:    %1 = load i32, ptr %y2, align 4
// CHECK-NEXT:    %2 = sub i32 %0, %1
// CHECK-NEXT:    store i32 %2, ptr %retval, align 4
// CHECK-NEXT:    br label %return
// CHECK-NEXT:  
// CHECK-NEXT:  return:                                           ; preds = %entry
// CHECK-NEXT:    %3 = load i32, ptr %retval, align 4
// CHECK-NEXT:    ret i32 %3
// CHECK-NEXT:  }