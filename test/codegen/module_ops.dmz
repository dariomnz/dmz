// RUN: dmz %s -module -llvm-dump -no-remove-unused 2>&1 | filecheck %s
pub fn add(x:i32, y:i32) -> i32 {
    return x + y;
}
// CHECK: define i32 @module_ops.add(i32 %0, i32 %1) {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %retval = alloca i32, align 4
// CHECK-NEXT:   %x = alloca i32, align 4
// CHECK-NEXT:   %y = alloca i32, align 4
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %retval, i8 0, i64 4, i1 false)
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %x, i8 0, i64 4, i1 false)
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %y, i8 0, i64 4, i1 false)
// CHECK-NEXT:   store i32 %0, ptr %x, align 4
// CHECK-NEXT:   store i32 %1, ptr %y, align 4
// CHECK-NEXT:   %2 = load i32, ptr %x, align 4
// CHECK-NEXT:   %3 = load i32, ptr %y, align 4
// CHECK-NEXT:   %4 = add i32 %2, %3
// CHECK-NEXT:   store i32 %4, ptr %retval, align 4
// CHECK-NEXT:   br label %return
// CHECK-NEXT: 
// CHECK-NEXT: return:                                           ; preds = %entry
// CHECK-NEXT:   %5 = load i32, ptr %retval, align 4
// CHECK-NEXT:   ret i32 %5
// CHECK-NEXT: }

pub fn sub(x:i32, y:i32) -> i32 {
    return x - y;
}
// CHECK: define i32 @module_ops.sub(i32 %0, i32 %1) {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %retval = alloca i32, align 4
// CHECK-NEXT:   %x = alloca i32, align 4
// CHECK-NEXT:   %y = alloca i32, align 4
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %retval, i8 0, i64 4, i1 false)
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %x, i8 0, i64 4, i1 false)
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %y, i8 0, i64 4, i1 false)
// CHECK-NEXT:   store i32 %0, ptr %x, align 4
// CHECK-NEXT:   store i32 %1, ptr %y, align 4
// CHECK-NEXT:   %2 = load i32, ptr %x, align 4
// CHECK-NEXT:   %3 = load i32, ptr %y, align 4
// CHECK-NEXT:   %4 = sub i32 %2, %3
// CHECK-NEXT:   store i32 %4, ptr %retval, align 4
// CHECK-NEXT:   br label %return
// CHECK-NEXT: 
// CHECK-NEXT: return:                                           ; preds = %entry
// CHECK-NEXT:   %5 = load i32, ptr %retval, align 4
// CHECK-NEXT:   ret i32 %5
// CHECK-NEXT: }

pub fn print(x:i32) -> void {
    println(x);
}
// CHECK: define void @module_ops.print(i32 %0) {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %x = alloca i32, align 4
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %x, i8 0, i64 4, i1 false)
// CHECK-NEXT:   store i32 %0, ptr %x, align 4
// CHECK-NEXT:   %1 = load i32, ptr %x, align 4
// CHECK-NEXT:   call void @module_ops.println(i32 %1)
// CHECK-NEXT:   ret void
// CHECK-NEXT: }

extern fn printf(fmt:*u8, ...) -> i32;
// CHECK: declare i32 @printf(ptr byref(i8) %0, ...)

fn println(n:i32) -> void {printf("%d\n", n);}

// CHECK: define void @module_ops.println(i32 %0) {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %n = alloca i32, align 4
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %n, i8 0, i64 4, i1 false)
// CHECK-NEXT:   store i32 %0, ptr %n, align 4
// CHECK-NEXT:   %1 = load i32, ptr %n, align 4
// CHECK-NEXT:   %2 = call i32 (ptr, ...) @printf(ptr byref(i8) @global.str, i32 %1)
// CHECK-NEXT:   ret void
// CHECK-NEXT: }