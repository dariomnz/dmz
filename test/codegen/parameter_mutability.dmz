// RUN: compiler %s -llvm-dump 2>&1 | filecheck %s
// RUN: diff <(compiler %s -run) <(echo -n -e '3\n2\n1\n1\n')

extern fn printf(fmt:&char[], ...) -> int; fn println(const n:int) -> void {printf(&"%d\n", n);}
fn mutableParam(n: int) -> void {
  n = 3;
  println(n);
}
// CHECK: define void @mutableParam(i32 %n) {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %n1 = alloca i32, align 4
// CHECK-NEXT:   store i32 %n, ptr %n1, align 4
// CHECK-NEXT:   store i32 3, ptr %n1, align 4
// CHECK-NEXT:   %0 = load i32, ptr %n1, align 4
// CHECK-NEXT:   call void @println(i32 %0)
// CHECK-NEXT:   ret void
// CHECK-NEXT: }

fn immutableParam(const n: int) -> void {
  println(n);
}
// CHECK: define void @immutableParam(i32 %n) {
// CHECK-NEXT: entry:
// CHECK-NEXT:   call void @println(i32 %n)
// CHECK-NEXT:   ret void
// CHECK-NEXT: }

fn main() -> void {
  let n = 2;
  mutableParam(n);

  println(2);

  n = n - 1;
  immutableParam(n);
    
  println(n);
}
// CHECK: define void @__builtin_main() {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %n = alloca i32, align 4
// CHECK-NEXT:   store i32 2, ptr %n, align 4
// CHECK-NEXT:   %0 = load i32, ptr %n, align 4
// CHECK-NEXT:   call void @mutableParam(i32 %0)

// CHECK-NEXT:   call void @println(i32 2)

// CHECK-NEXT:   %1 = load i32, ptr %n, align 4
// CHECK-NEXT:   %2 = sub i32 %1, 1
// CHECK-NEXT:   store i32 %2, ptr %n, align 4
// CHECK-NEXT:   %3 = load i32, ptr %n, align 4
// CHECK-NEXT:   call void @immutableParam(i32 %3)

// CHECK-NEXT:   %4 = load i32, ptr %n, align 4
// CHECK-NEXT:   call void @println(i32 %4)
// CHECK-NEXT:   ret void
// CHECK-NEXT: }
