// RUN: compiler %s -llvm-dump -no-remove-unused 2>&1 | filecheck %s
fn foo(x: i32) -> void {
    if (x == 1 || x == 2 && x > 3) {

    }
}
// CHECK: define void @foo(i32 %x) {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %0 = icmp eq i32 %x, 1
// CHECK-NEXT:   br i1 %0, label %or.merge, label %or.rhs
// CHECK-NEXT: 
// CHECK-NEXT: or.rhs:                                           ; preds = %entry
// CHECK-NEXT:   %1 = icmp eq i32 %x, 2
// CHECK-NEXT:   br i1 %1, label %and.rhs, label %and.merge
// CHECK-NEXT: 
// CHECK-NEXT: or.merge:                                         ; preds = %and.merge, %entry
// CHECK-NEXT:   %2 = phi i1 [ %4, %and.merge ], [ true, %entry ]
// CHECK-NEXT:   br i1 %2, label %if.true, label %if.exit
// CHECK-NEXT: 
// CHECK-NEXT: and.rhs:                                          ; preds = %or.rhs
// CHECK-NEXT:   %3 = icmp sgt i32 %x, 3
// CHECK-NEXT:   br label %and.merge
// CHECK-NEXT: 
// CHECK-NEXT: and.merge:                                        ; preds = %and.rhs, %or.rhs
// CHECK-NEXT:   %4 = phi i1 [ %3, %and.rhs ], [ false, %or.rhs ]
// CHECK-NEXT:   br label %or.merge
// CHECK-NEXT: 
// CHECK-NEXT: if.true:                                          ; preds = %or.merge
// CHECK-NEXT:   br label %if.exit
// CHECK-NEXT: 
// CHECK-NEXT: if.exit:                                          ; preds = %if.true, %or.merge
// CHECK-NEXT:   ret void
// CHECK-NEXT: }

fn main() -> void {}
