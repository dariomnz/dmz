// RUN: compiler %s -llvm-dump 2>&1 | filecheck %s
// RUN: diff <(compiler %s -run 2>&1) <(echo -n -e '1\n2\n')
extern fn printf(fmt:*u8, ...) -> i32; fn println(n:i32) -> void {printf(&"%d\n", n);}
fn foo(n: i32) -> void {
    let x: i32;

    if (n > 2) {
        x = 1;
    } else {
        x = 2;
    }

    println(x);
}
// CHECK: define void @foo(i32 %n) {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %x = alloca i32, align 4
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %x, i8 0, i64 4, i1 false)
// CHECK-NEXT:   %0 = icmp sgt i32 %n, 2
// CHECK-NEXT:   br i1 %0, label %if.true, label %if.false
// CHECK-NEXT: 
// CHECK-NEXT: if.true:                                          ; preds = %entry
// CHECK-NEXT:   store i32 1, ptr %x, align 4
// CHECK-NEXT:   br label %if.exit
// CHECK-NEXT: 
// CHECK-NEXT: if.false:                                         ; preds = %entry
// CHECK-NEXT:   store i32 2, ptr %x, align 4
// CHECK-NEXT:   br label %if.exit
// CHECK-NEXT: 
// CHECK-NEXT: if.exit:                                          ; preds = %if.false, %if.true
// CHECK-NEXT:   %1 = load i32, ptr %x, align 4
// CHECK-NEXT:   call void @println(i32 %1)
// CHECK-NEXT:   ret void
// CHECK-NEXT: }

fn main() -> void {
    foo(3);
    foo(2);
}