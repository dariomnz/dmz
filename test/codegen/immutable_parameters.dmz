// RUN: compiler %s -llvm-dump 2>&1 | filecheck %s
// RUN: diff <(compiler %s -run 2>&1) <(echo -n -e '-50\n')
extern fn printf(fmt:&u8[], ...) -> i32; fn println(const n:i32) -> void {printf(&"%d\n", n);}
struct S {
  x: i32,
  y: i32,
}

fn foo(const s: S, const y: i32) -> i32 {
  return s.x * -y;
}
// CHECK: define i32 @foo(ptr readonly %s, i32 %y) {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %retval = alloca i32, align 4
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %retval, i8 0, i64 4, i1 false)
// CHECK-NEXT:   %0 = getelementptr inbounds %struct.S, ptr %s, i32 0, i32 0
// CHECK-NEXT:   %1 = load i32, ptr %0, align 4
// CHECK-NEXT:   %2 = sub i32 0, %y
// CHECK-NEXT:   %3 = mul i32 %1, %2
// CHECK-NEXT:   store i32 %3, ptr %retval, align 4
// CHECK-NEXT:   br label %return
// CHECK-NEXT: 
// CHECK-NEXT: return:                                           ; preds = %entry
// CHECK-NEXT:   %4 = load i32, ptr %retval, align 4
// CHECK-NEXT:   ret i32 %4
// CHECK-NEXT: }

fn main() -> void {
  let s = S { x: 5, y: 10 };
  println(foo(s, 10));
}
