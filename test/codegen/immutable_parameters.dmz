// RUN: dmz %s -llvm-dump 2>&1 | filecheck %s
// RUN: diff <(dmz %s -run 2>&1) <(echo -n -e '-50\n')
extern fn printf(fmt:*u8, ...) -> i32; fn println(n:i32) -> void {printf("%d\n", n);}
struct S {
  x: i32,
  y: i32,
}

fn foo(s: S, y: i32) -> i32 {
  return s.x * -y;
}
// CHECK: define i32 @immutable_parameters.foo(ptr readonly %0, i32 %1) {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %retval = alloca i32, align 4
// CHECK-NEXT:   %y = alloca i32, align 4
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %retval, i8 0, i64 4, i1 false)
// CHECK-NEXT:   call void @llvm.memset.inline.p0.i64(ptr align 8 %y, i8 0, i64 4, i1 false)
// CHECK-NEXT:   store i32 %1, ptr %y, align 4
// CHECK-NEXT:   %2 = getelementptr inbounds nuw %immutable_parameters.S, ptr %0, i32 0, i32 0
// CHECK-NEXT:   %3 = load i32, ptr %2, align 4
// CHECK-NEXT:   %4 = load i32, ptr %y, align 4
// CHECK-NEXT:   %5 = sub i32 0, %4
// CHECK-NEXT:   %6 = mul i32 %3, %5
// CHECK-NEXT:   store i32 %6, ptr %retval, align 4
// CHECK-NEXT:   br label %return
// CHECK-NEXT: 
// CHECK-NEXT: return:                                           ; preds = %entry
// CHECK-NEXT:   %7 = load i32, ptr %retval, align 4
// CHECK-NEXT:   ret i32 %7
// CHECK-NEXT: }

fn main() -> void {
  let s = S { x: 5, y: 10 };
  println(foo(s, 10));
}
