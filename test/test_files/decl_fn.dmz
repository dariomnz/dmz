struct RGBColor {
  r: int,
  g: int,
  b: int,
}

fn rgbToGray(c: RGBColor) -> int {
  return (c.r + c.g + c.b);
}

fn printRGBColor(c: RGBColor) -> RGBColor {
    println(c.r);
    println(c.g);
    println(c.b);
    return c;
}

fn wrapper(n: int) -> int {
    let n1 = 100;
    let const n2 = 1000;
    let n3 = 10000;
    let n4 = 100000;
    n1 = 1+1;
    if (n < n1){
        return n1;
    }else if (n < n2) {
        return n2;
    }else if (n < n3){
        return n3;
    }else{
        return n4;
    }
}

fn wrapper2(n: int, n2: int) -> int {
    let const x = 1;
    return wrapper(x);
}

fn main()-> void {
    println(wrapper2(1234, 1234));
    println(1 >= 0 && 2<=20);
    let color = RGBColor{r:1,b:3,g:wrapper(3)};
    println(rgbToGray(color));
    println(color.r);
    println(color.g);
    println(color.b);
    let retColor = printRGBColor(color);
    println(retColor.r);
    println(retColor.g);
    println(retColor.b);
}