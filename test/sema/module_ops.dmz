// RUN: compiler %s -module -res-dump 2>&1 | filecheck %s
module ops;

struct str_ops {
    x:int,
    y:int,
    z:int,
}

fn print(x:int) -> void {
    println(x);
}

extern fn printf(fmt:&char[], ...) -> int;

fn println(const n:int) -> void {printf(&"%d\n", n);}
// CHECK: ResolvedModuleDecl ops
// CHECK-NEXT:   ResolvedFunctionDecl ops::print -> void
// CHECK-NEXT:     ResolvedParamDecl:int x
// CHECK-NEXT:     ResolvedBlock
// CHECK-NEXT:       ResolvedCallExpr:void ops::println
// CHECK-NEXT:         ResolvedDeclRefExpr:int x

module ops::integer;

fn add(x:int, y:int) -> int {
    return x + y;
}

fn sub(x:int, y:int) -> int {
    return x - y;
}
// CHECK: ResolvedModuleDecl ops
// CHECK-NEXT:   ResolvedModuleDecl ops::integer
// CHECK-NEXT:     ResolvedFunctionDecl ops::integer::add -> int
// CHECK-NEXT:       ResolvedParamDecl:int x
// CHECK-NEXT:       ResolvedParamDecl:int y
// CHECK-NEXT:       ResolvedBlock
// CHECK-NEXT:         ResolvedReturnStmt
// CHECK-NEXT:           ResolvedBinaryOperator:int '+'
// CHECK-NEXT:             ResolvedDeclRefExpr:int x
// CHECK-NEXT:             ResolvedDeclRefExpr:int y
// CHECK-NEXT:     ResolvedFunctionDecl ops::integer::sub -> int
// CHECK-NEXT:       ResolvedParamDecl:int x
// CHECK-NEXT:       ResolvedParamDecl:int y
// CHECK-NEXT:       ResolvedBlock
// CHECK-NEXT:         ResolvedReturnStmt
// CHECK-NEXT:           ResolvedBinaryOperator:int '-'
// CHECK-NEXT:             ResolvedDeclRefExpr:int x
// CHECK-NEXT:             ResolvedDeclRefExpr:int y