// RUN: compiler %s -res-dump 2>&1 | filecheck %s

extern fn printf(fmt:*u8, ...) -> i32;

struct Point<T> {
    x:T,
    y:T,

    fn add(n: T) -> void {
        .x = .x + n;
        .y = .y + n;
    }
// CHECK: ResolvedSpecializedStructDecl Struct Point<i32>
// CHECK-NEXT:   ResolvedFieldDecl:Int i32 x
// CHECK-NEXT:   ResolvedFieldDecl:Int i32 y
// CHECK-NEXT:   ResolvedMemberFunctionDecl add -> Void void
// CHECK-NEXT:     ResolvedParamDecl:Struct *Point 
// CHECK-NEXT:     ResolvedParamDecl:Int i32 n
// CHECK-NEXT:     ResolvedBlock
// CHECK-NEXT:       ResolvedAssignment
// CHECK-NEXT:         ResolvedSelfMemberExpr:Int i32 x
// CHECK-NEXT:           ResolvedDeclRefExpr:Struct *Point 
// CHECK-NEXT:         ResolvedBinaryOperator:Int i32 '+'
// CHECK-NEXT:           ResolvedSelfMemberExpr:Int i32 x
// CHECK-NEXT:             ResolvedDeclRefExpr:Struct *Point 
// CHECK-NEXT:           ResolvedDeclRefExpr:Int i32 n
// CHECK-NEXT:       ResolvedAssignment
// CHECK-NEXT:         ResolvedSelfMemberExpr:Int i32 y
// CHECK-NEXT:           ResolvedDeclRefExpr:Struct *Point 
// CHECK-NEXT:         ResolvedBinaryOperator:Int i32 '+'
// CHECK-NEXT:           ResolvedSelfMemberExpr:Int i32 y
// CHECK-NEXT:             ResolvedDeclRefExpr:Struct *Point 
// CHECK-NEXT:           ResolvedDeclRefExpr:Int i32 n
}

fn main() -> void {
    let p = Point<i32>{x:1, y:2};
    p.add(5);
    printf("Point %d %d\n", p.x, p.y);
}