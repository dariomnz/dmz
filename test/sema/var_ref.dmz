// RUN: compiler %s -res-dump 2>&1 | filecheck %s
// RUN: diff <(compiler %s -run) <(echo -n -e '10\n10\n20\n20\n')

fn foo(x: &int) -> void {
    println(x);
    x = 20;
    println(x);
}
// CHECK: ResolvedFunctionDecl foo -> void
// CHECK-NEXT:   ResolvedParamDecl:&int x
// CHECK-NEXT:   ResolvedBlock
// CHECK-NEXT:     ResolvedCallExpr:void println
// CHECK-NEXT:       ResolvedDeclRefExpr:&int x
// CHECK-NEXT:     ResolvedAssignment
// CHECK-NEXT:       ResolvedDeclRefExpr:&int x
// CHECK-NEXT:       ResolvedIntLiteral:int '20'
// CHECK-NEXT:       | value:int 20
// CHECK-NEXT:     ResolvedCallExpr:void println
// CHECK-NEXT:       ResolvedDeclRefExpr:&int x

extern fn dprintf(fd:int, fmt:&char[], ...) -> int;

fn main() -> void {
    let i = 10;
    let i_ref = &i;
    println(i_ref);
    foo(&i_ref);
    println(i);
}

// CHECK: ResolvedFunctionDecl main -> void
// CHECK-NEXT:   ResolvedBlock
// CHECK-NEXT:     ResolvedDeclStmt
// CHECK-NEXT:       ResolvedVarDecl:int i
// CHECK-NEXT:         ResolvedIntLiteral:int '10'
// CHECK-NEXT:         | value:int 10
// CHECK-NEXT:     ResolvedDeclStmt
// CHECK-NEXT:       ResolvedVarDecl:&int i_ref
// CHECK-NEXT:         ResolvedUnaryOperator:&int '&'
// CHECK-NEXT:           ResolvedDeclRefExpr:int i
// CHECK-NEXT:     ResolvedCallExpr:void println
// CHECK-NEXT:       ResolvedDeclRefExpr:&int i_ref
// CHECK-NEXT:     ResolvedCallExpr:void foo
// CHECK-NEXT:       ResolvedUnaryOperator:&int '&'
// CHECK-NEXT:         ResolvedDeclRefExpr:&int i_ref
// CHECK-NEXT:     ResolvedCallExpr:void println
// CHECK-NEXT:       ResolvedDeclRefExpr:int i