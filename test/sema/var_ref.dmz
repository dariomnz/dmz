// RUN: compiler %s -res-dump 2>&1 | filecheck %s
// RUN: diff <(compiler %s -run 2>&1) <(echo -n -e '10\n10\n20\n20\n')

fn foo(x: &i32) -> void {
    println(x);
    x = 20;
    println(x);
}
// CHECK: ResolvedFunctionDecl foo -> Void void
// CHECK-NEXT:   ResolvedParamDecl:Int &i32 x
// CHECK-NEXT:   ResolvedBlock
// CHECK-NEXT:     ResolvedCallExpr:Void void 
// CHECK-NEXT:       ResolvedFunctionDecl println -> Void void
// CHECK-NEXT:       ResolvedDeclRefExpr:Int &i32 x
// CHECK-NEXT:     ResolvedAssignment
// CHECK-NEXT:       ResolvedDeclRefExpr:Int &i32 x
// CHECK-NEXT:       ResolvedIntLiteral:Int i32 '20'
// CHECK-NEXT:       | value: 20
// CHECK-NEXT:     ResolvedCallExpr:Void void 
// CHECK-NEXT:       ResolvedFunctionDecl println -> Void void
// CHECK-NEXT:       ResolvedDeclRefExpr:Int &i32 x

extern fn printf(fmt:*u8, ...) -> i32; fn println(n:i32) -> void {printf(&"%d\n", n);}

fn main() -> void {
    let i = 10;
    let i_ref:&i32 = &i;
    println(i_ref);
    foo(&i_ref);
    println(i);
}

// CHECK: ResolvedFunctionDecl main -> Void void
// CHECK-NEXT:   ResolvedBlock
// CHECK-NEXT:     ResolvedDeclStmt
// CHECK-NEXT:       ResolvedVarDecl:Int i32 i
// CHECK-NEXT:         ResolvedIntLiteral:Int i32 '10'
// CHECK-NEXT:         | value: 10
// CHECK-NEXT:     ResolvedDeclStmt
// CHECK-NEXT:       ResolvedVarDecl:Int &i32 i_ref
// CHECK-NEXT:         ResolvedRefPtrExpr:Int *i32
// CHECK-NEXT:           ResolvedDeclRefExpr:Int i32 i
// CHECK-NEXT:     ResolvedCallExpr:Void void 
// CHECK-NEXT:       ResolvedFunctionDecl println -> Void void
// CHECK-NEXT:       ResolvedDeclRefExpr:Int &i32 i_ref
// CHECK-NEXT:     ResolvedCallExpr:Void void 
// CHECK-NEXT:       ResolvedFunctionDecl foo -> Void void
// CHECK-NEXT:       ResolvedRefPtrExpr:Int &i32
// CHECK-NEXT:         ResolvedDeclRefExpr:Int &i32 i_ref
// CHECK-NEXT:     ResolvedCallExpr:Void void 
// CHECK-NEXT:       ResolvedFunctionDecl println -> Void void
// CHECK-NEXT:       ResolvedDeclRefExpr:Int i32 i