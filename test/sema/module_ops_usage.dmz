// RUN: compiler %s %S/module_ops.dmz -ast-dump 2>&1 | filecheck %s

const ops = import("ops");
// CHECK: ResolvedImportDecl ops

fn main() -> void {
    let x = 1;
    let y = 2;

    ops.print(x);

    let result = ops.integer.add(x, y);
    
    ops.print(result);
}
// CHECK: ResolvedFunctionDecl main -> void
// CHECK-NEXT:   ResolvedBlock
// CHECK-NEXT:     ResolvedDeclStmt
// CHECK-NEXT:       ResolvedVarDecl:i32 x
// CHECK-NEXT:         ResolvedIntLiteral:i32 '1'
// CHECK-NEXT:         | value: 1
// CHECK-NEXT:     ResolvedDeclStmt
// CHECK-NEXT:       ResolvedVarDecl:i32 y
// CHECK-NEXT:         ResolvedIntLiteral:i32 '2'
// CHECK-NEXT:         | value: 2
// CHECK-NEXT:     ResolvedModuleDeclRefExpr ops::
// CHECK-NEXT:       ResolvedCallExpr:void
// CHECK-NEXT:         ResolvedFunctionDecl ops::print -> void
// CHECK-NEXT:         ResolvedDeclRefExpr:i32 x
// CHECK-NEXT:     ResolvedDeclStmt
// CHECK-NEXT:       ResolvedVarDecl:i32 result
// CHECK-NEXT:         ResolvedModuleDeclRefExpr 
// CHECK-NEXT:           ResolvedModuleDeclRefExpr ops::integer::
// CHECK-NEXT:             ResolvedCallExpr:i32
// CHECK-NEXT:               ResolvedFunctionDecl ops::integer::add -> i32
// CHECK-NEXT:               ResolvedDeclRefExpr:i32 x
// CHECK-NEXT:               ResolvedDeclRefExpr:i32 y
// CHECK-NEXT:     ResolvedModuleDeclRefExpr ops::
// CHECK-NEXT:       ResolvedCallExpr:void
// CHECK-NEXT:         ResolvedFunctionDecl ops::print -> void
// CHECK-NEXT:         ResolvedDeclRefExpr:i32 result