// REQUIRES: generics
// RUN: compiler %s -res-dump 2>&1 | filecheck %s

extern fn printf(fmt:*u8, ...) -> i32;

fn print<T>(param:T) -> void! {
    printf("Pointer of type %d\n", param);
}
// CHECK: ResolvedFunctionDecl print -> Void void!
// CHECK-NEXT:   ResolvedGenericTypesDecl
// CHECK-NEXT:     ResolvedGenericTypeDecl T
// CHECK-NEXT:   ResolvedParamDecl:Generic T param
// CHECK-NEXT:   ResolvedSpecializedFunctionDecl print<Int i32> -> Void void!
// CHECK-NEXT:     ResolvedParamDecl:Int i32 param
// CHECK-NEXT:     ResolvedBlock
// CHECK-NEXT:       ResolvedCallExpr:Int i32
// CHECK-NEXT:         ResolvedExternFunctionDecl printf -> Int i32
// CHECK-NEXT:         ResolvedStringLiteral:UInt *u8 'Pointer of type %d\n'
// CHECK-NEXT:         ResolvedDeclRefExpr:Int i32 param
// CHECK-NEXT:   ResolvedSpecializedFunctionDecl print<Int i64> -> Void void!
// CHECK-NEXT:     ResolvedParamDecl:Int i64 param
// CHECK-NEXT:     ResolvedBlock
// CHECK-NEXT:       ResolvedCallExpr:Int i32
// CHECK-NEXT:         ResolvedExternFunctionDecl printf -> Int i32
// CHECK-NEXT:         ResolvedStringLiteral:UInt *u8 'Pointer of type %d\n'
// CHECK-NEXT:         ResolvedDeclRefExpr:Int i64 param

fn main() -> void {
    print<i32>(123);
    print<i64>(123);
}

// CHECK: ResolvedFunctionDecl main -> Void void
// CHECK-NEXT:   ResolvedBlock
// CHECK-NEXT:     ResolvedCallExpr:Void void!
// CHECK-NEXT:       ResolvedSpecializedFunctionDecl print<Int i32> -> Void void!
// CHECK-NEXT:       ResolvedIntLiteral:Int i32 '123'
// CHECK-NEXT:       | value: 123
// CHECK-NEXT:     ResolvedCallExpr:Void void!
// CHECK-NEXT:       ResolvedSpecializedFunctionDecl print<Int i64> -> Void void!
// CHECK-NEXT:       ResolvedIntLiteral:Int i32 '123'
// CHECK-NEXT:       | value: 123