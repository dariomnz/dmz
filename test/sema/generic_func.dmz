// RUN: compiler %s -res-dump 2>&1 | filecheck %s

extern fn printf(fmt:*u8, ...) -> i32;

fn print<T>(param:T) -> void! {
    printf("Pointer of type %d\n", param);
}
// CHECK: ResolvedGenericFunctionDecl print fn(T)->void!
// CHECK-NEXT:   ResolvedGenericTypeDecl T
// CHECK-NEXT:   ResolvedParamDecl:T param
// CHECK-NEXT:   ResolvedSpecializedFunctionDecl print<i32> fn(i32)->void!
// CHECK-NEXT:     ResolvedParamDecl:i32 param
// CHECK-NEXT:     ResolvedBlock
// CHECK-NEXT:       ResolvedCallExpr:i32
// CHECK-NEXT:         ResolvedDeclRefExpr:fn(*u8, ...)->i32 printf
// CHECK-NEXT:         ResolvedStringLiteral:*u8 'Pointer of type %d\n'
// CHECK-NEXT:         ResolvedDeclRefExpr:i32 param
// CHECK-NEXT:   ResolvedSpecializedFunctionDecl print<i64> fn(i64)->void!
// CHECK-NEXT:     ResolvedParamDecl:i64 param
// CHECK-NEXT:     ResolvedBlock
// CHECK-NEXT:       ResolvedCallExpr:i32
// CHECK-NEXT:         ResolvedDeclRefExpr:fn(*u8, ...)->i32 printf
// CHECK-NEXT:         ResolvedStringLiteral:*u8 'Pointer of type %d\n'
// CHECK-NEXT:         ResolvedDeclRefExpr:i64 param

fn main() -> void {
    print<i32>(123);
    print<i64>(123);
}

// CHECK: ResolvedFunctionDecl main fn()->void
// CHECK-NEXT:   ResolvedBlock
// CHECK-NEXT:     ResolvedCallExpr:void!
// CHECK-NEXT:       ResolvedDeclRefExpr:fn(i32)->void! print
// CHECK-NEXT:       ResolvedIntLiteral:i32 '123'
// CHECK-NEXT:       | value: 123
// CHECK-NEXT:     ResolvedCallExpr:void!
// CHECK-NEXT:       ResolvedDeclRefExpr:fn(i64)->void! print
// CHECK-NEXT:       ResolvedIntLiteral:i32 '123'
// CHECK-NEXT:       | value: 123