// RUN: compiler %s -res-dump 2>&1 | filecheck %s

const e = error {
    ERROR_ONE,
    ERROR_TWO,
    ERROR_THREE,
};
// CHECK:   ResolvedDeclStmt
// CHECK-NEXT:     ResolvedVarDecl:const errorGroup  e
// CHECK-NEXT:       ResolvedErrorGroupExprDecl
// CHECK-NEXT:         ResolvedErrorDecl ERROR_ONE
// CHECK-NEXT:         ResolvedErrorDecl ERROR_TWO
// CHECK-NEXT:         ResolvedErrorDecl ERROR_THREE

fn foo(x:i32) -> i32! {
    if (x == 1){
        return e.ERROR_ONE;
    }else if (x == 2){
        return e.ERROR_TWO;
    }
    return x;
}
// CHECK:   ResolvedFunctionDecl foo -> i32!
// CHECK-NEXT:     ResolvedParamDecl:i32 x
// CHECK-NEXT:     ResolvedBlock
// CHECK-NEXT:       ResolvedIfStmt
// CHECK-NEXT:         ResolvedBinaryOperator:bool '=='
// CHECK-NEXT:           ResolvedDeclRefExpr:i32 x
// CHECK-NEXT:           ResolvedIntLiteral:i32 '1'
// CHECK-NEXT:         ResolvedBlock
// CHECK-NEXT:           ResolvedReturnStmt
// CHECK-NEXT:             ResolvedMemberExpr:error ERROR_ONE
// CHECK-NEXT:               ResolvedDeclRefExpr:errorGroup  e
// CHECK-NEXT:         ResolvedBlock
// CHECK-NEXT:           ResolvedIfStmt
// CHECK-NEXT:             ResolvedBinaryOperator:bool '=='
// CHECK-NEXT:               ResolvedDeclRefExpr:i32 x
// CHECK-NEXT:               ResolvedIntLiteral:i32 '2'
// CHECK-NEXT:             ResolvedBlock
// CHECK-NEXT:               ResolvedReturnStmt
// CHECK-NEXT:                 ResolvedMemberExpr:error ERROR_TWO
// CHECK-NEXT:                   ResolvedDeclRefExpr:errorGroup  e
// CHECK-NEXT:       ResolvedReturnStmt
// CHECK-NEXT:         ResolvedDeclRefExpr:i32 x

extern fn dprintf(fd:i32, fmt:*u8, ...) -> i32;

fn main() -> void {
    let result = foo(2);
    const result_e = catch result;
    dprintf(1, "%s\n", result_e);

    let err = catch result;
    if (err){
        dprintf(1, "%s\n", err);
    }
    let result2 = try foo(10);
    dprintf(1, "%d\n", result2);

    if (catch result){
        dprintf(1, "There are an error\n");
    }
    if (catch foo(2)){
        dprintf(1, "There are an error\n");
    }

    dprintf(1, "No error %d\n", result);
    dprintf(1, "No safe error %d\n", try foo(10));
}
// CHECK: ResolvedFunctionDecl main -> void
// CHECK-NEXT:     ResolvedBlock
// CHECK-NEXT:       ResolvedDeclStmt
// CHECK-NEXT:         ResolvedVarDecl:i32! result
// CHECK-NEXT:           ResolvedCallExpr:i32!
// CHECK-NEXT:             ResolvedFunctionDecl foo -> i32!
// CHECK-NEXT:             ResolvedIntLiteral:i32 '2'
// CHECK-NEXT:             | value: 2
// CHECK-NEXT:       ResolvedDeclStmt
// CHECK-NEXT:         ResolvedVarDecl:const error result_e
// CHECK-NEXT:           ResolvedCatchErrorExpr:error
// CHECK-NEXT:             ResolvedDeclRefExpr:i32! result
// CHECK-NEXT:       ResolvedCallExpr:i32
// CHECK-NEXT:         ResolvedExternFunctionDecl dprintf -> i32
// CHECK-NEXT:         ResolvedIntLiteral:i32 '1'
// CHECK-NEXT:         | value: 1
// CHECK-NEXT:         ResolvedStringLiteral:*u8 '%s\n'
// CHECK-NEXT:         ResolvedDeclRefExpr:error result_e
// CHECK-NEXT:       ResolvedDeclStmt
// CHECK-NEXT:         ResolvedVarDecl:error err
// CHECK-NEXT:           ResolvedCatchErrorExpr:error
// CHECK-NEXT:             ResolvedDeclRefExpr:i32! result
// CHECK-NEXT:       ResolvedIfStmt
// CHECK-NEXT:         ResolvedDeclRefExpr:error err
// CHECK-NEXT:         ResolvedBlock
// CHECK-NEXT:           ResolvedCallExpr:i32
// CHECK-NEXT:             ResolvedExternFunctionDecl dprintf -> i32
// CHECK-NEXT:             ResolvedIntLiteral:i32 '1'
// CHECK-NEXT:             | value: 1
// CHECK-NEXT:             ResolvedStringLiteral:*u8 '%s\n'
// CHECK-NEXT:             ResolvedDeclRefExpr:error err
// CHECK-NEXT:       ResolvedDeclStmt
// CHECK-NEXT:         ResolvedVarDecl:i32 result2
// CHECK-NEXT:           ResolvedTryErrorExpr:i32
// CHECK-NEXT:             ResolvedCallExpr:i32!
// CHECK-NEXT:               ResolvedFunctionDecl foo -> i32!
// CHECK-NEXT:               ResolvedIntLiteral:i32 '10'
// CHECK-NEXT:               | value: 10
// CHECK-NEXT:       ResolvedCallExpr:i32
// CHECK-NEXT:         ResolvedExternFunctionDecl dprintf -> i32
// CHECK-NEXT:         ResolvedIntLiteral:i32 '1'
// CHECK-NEXT:         | value: 1
// CHECK-NEXT:         ResolvedStringLiteral:*u8 '%d\n'
// CHECK-NEXT:         ResolvedDeclRefExpr:i32 result2
// CHECK-NEXT:       ResolvedIfStmt
// CHECK-NEXT:         ResolvedCatchErrorExpr:error
// CHECK-NEXT:           ResolvedDeclRefExpr:i32! result
// CHECK-NEXT:         ResolvedBlock
// CHECK-NEXT:           ResolvedCallExpr:i32
// CHECK-NEXT:             ResolvedExternFunctionDecl dprintf -> i32
// CHECK-NEXT:             ResolvedIntLiteral:i32 '1'
// CHECK-NEXT:             | value: 1
// CHECK-NEXT:             ResolvedStringLiteral:*u8 'There are an error\n'
// CHECK-NEXT:       ResolvedIfStmt
// CHECK-NEXT:         ResolvedCatchErrorExpr:error
// CHECK-NEXT:           ResolvedCallExpr:i32!
// CHECK-NEXT:             ResolvedFunctionDecl foo -> i32!
// CHECK-NEXT:             ResolvedIntLiteral:i32 '2'
// CHECK-NEXT:             | value: 2
// CHECK-NEXT:         ResolvedBlock
// CHECK-NEXT:           ResolvedCallExpr:i32
// CHECK-NEXT:             ResolvedExternFunctionDecl dprintf -> i32
// CHECK-NEXT:             ResolvedIntLiteral:i32 '1'
// CHECK-NEXT:             | value: 1
// CHECK-NEXT:             ResolvedStringLiteral:*u8 'There are an error\n'
// CHECK-NEXT:       ResolvedCallExpr:i32
// CHECK-NEXT:         ResolvedExternFunctionDecl dprintf -> i32
// CHECK-NEXT:         ResolvedIntLiteral:i32 '1'
// CHECK-NEXT:         | value: 1
// CHECK-NEXT:         ResolvedStringLiteral:*u8 'No error %d\n'
// CHECK-NEXT:         ResolvedDeclRefExpr:i32! result
// CHECK-NEXT:       ResolvedCallExpr:i32
// CHECK-NEXT:         ResolvedExternFunctionDecl dprintf -> i32
// CHECK-NEXT:         ResolvedIntLiteral:i32 '1'
// CHECK-NEXT:         | value: 1
// CHECK-NEXT:         ResolvedStringLiteral:*u8 'No safe error %d\n'
// CHECK-NEXT:         ResolvedTryErrorExpr:i32
// CHECK-NEXT:           ResolvedCallExpr:i32!
// CHECK-NEXT:             ResolvedFunctionDecl foo -> i32!
// CHECK-NEXT:             ResolvedIntLiteral:i32 '10'
// CHECK-NEXT:             | value: 10