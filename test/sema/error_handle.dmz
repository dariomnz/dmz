// RUN: compiler %s -res-dump 2>&1 | filecheck %s

err {
    ERROR_ONE,
    ERROR_TWO,
    ERROR_THREE,
}
// CHECK: ResolvedErrGroupDecl 
// CHECK-NEXT:   ResolvedErrDecl ERROR_ONE
// CHECK-NEXT:   ResolvedErrDecl ERROR_TWO
// CHECK-NEXT:   ResolvedErrDecl ERROR_THREE

fn foo(x:int) -> int? {
    if (x == 1){
        return ERROR_ONE?;
    }else if (x == 2){
        return ERROR_TWO?;
    }
    return x;
}
// CHECK: ResolvedFunctionDecl foo -> int?
// CHECK-NEXT:   ResolvedParamDecl:int x
// CHECK-NEXT:   ResolvedBlock
// CHECK-NEXT:     ResolvedIfStmt
// CHECK-NEXT:       ResolvedBinaryOperator:bool '=='
// CHECK-NEXT:         ResolvedDeclRefExpr:int x
// CHECK-NEXT:         ResolvedIntLiteral:int '1'
// CHECK-NEXT:       ResolvedBlock
// CHECK-NEXT:         ResolvedReturnStmt
// CHECK-NEXT:           ResolvedErrDeclRefExpr ERROR_ONE
// CHECK-NEXT:       ResolvedBlock
// CHECK-NEXT:         ResolvedIfStmt
// CHECK-NEXT:           ResolvedBinaryOperator:bool '=='
// CHECK-NEXT:             ResolvedDeclRefExpr:int x
// CHECK-NEXT:             ResolvedIntLiteral:int '2'
// CHECK-NEXT:           ResolvedBlock
// CHECK-NEXT:             ResolvedReturnStmt
// CHECK-NEXT:               ResolvedErrDeclRefExpr ERROR_TWO
// CHECK-NEXT:     ResolvedReturnStmt
// CHECK-NEXT:       ResolvedDeclRefExpr:int x

extern fn dprintf(fd:int, fmt:&char[], ...) -> int;

fn main() -> void {
    let result = foo(2);
    catch result_e = result;
    dprintf(1, &"%s\n", result_e);

    if (catch error = result){
        dprintf(1, &"%s\n", error);
    }
    let result2 = foo(10);
    if (try value = result2){
        dprintf(1, &"%d\n", value);
    }

    if (catch result){
        dprintf(1, &"There are an error\n");
    }
    if (catch foo(2)){
        dprintf(1, &"There are an error\n");
    }

    dprintf(1, &"No error %d\n", result);
    dprintf(1, &"No safe error %d\n", foo(10)!);
}
// CHECK: ResolvedFunctionDecl main -> void
// CHECK-NEXT:   ResolvedBlock
// CHECK-NEXT:     ResolvedDeclStmt
// CHECK-NEXT:       ResolvedVarDecl:int? result
// CHECK-NEXT:         ResolvedCallExpr:int? foo
// CHECK-NEXT:           ResolvedIntLiteral:int '2'
// CHECK-NEXT:           | value:int 2
// CHECK-NEXT:     ResolvedCatchErrExpr: 
// CHECK-NEXT:       ResolvedDeclStmt
// CHECK-NEXT:         ResolvedVarDecl:const err result_e
// CHECK-NEXT:           ResolvedDeclRefExpr:int? result
// CHECK-NEXT:     ResolvedCallExpr:int dprintf
// CHECK-NEXT:       ResolvedIntLiteral:int '1'
// CHECK-NEXT:       | value:int 1
// CHECK-NEXT:       ResolvedUnaryOperator:&char[4] '&'
// CHECK-NEXT:         ResolvedStringLiteral:char[4] '%s\n'
// CHECK-NEXT:       ResolvedDeclRefExpr:err result_e
// CHECK-NEXT:     ResolvedIfStmt
// CHECK-NEXT:       ResolvedCatchErrExpr: 
// CHECK-NEXT:         ResolvedDeclStmt
// CHECK-NEXT:           ResolvedVarDecl:const err error
// CHECK-NEXT:             ResolvedDeclRefExpr:int? result
// CHECK-NEXT:       ResolvedBlock
// CHECK-NEXT:         ResolvedCallExpr:int dprintf
// CHECK-NEXT:           ResolvedIntLiteral:int '1'
// CHECK-NEXT:           | value:int 1
// CHECK-NEXT:           ResolvedUnaryOperator:&char[4] '&'
// CHECK-NEXT:             ResolvedStringLiteral:char[4] '%s\n'
// CHECK-NEXT:           ResolvedDeclRefExpr:err error
// CHECK-NEXT:     ResolvedDeclStmt
// CHECK-NEXT:       ResolvedVarDecl:int? result2
// CHECK-NEXT:         ResolvedCallExpr:int? foo
// CHECK-NEXT:           ResolvedIntLiteral:int '10'
// CHECK-NEXT:           | value:int 10
// CHECK-NEXT:     ResolvedIfStmt
// CHECK-NEXT:       ResolvedTryErrExpr:int
// CHECK-NEXT:         ResolvedDeclStmt
// CHECK-NEXT:           ResolvedVarDecl:const int value
// CHECK-NEXT:             ResolvedDeclRefExpr:int? result2
// CHECK-NEXT:       ResolvedBlock
// CHECK-NEXT:         ResolvedCallExpr:int dprintf
// CHECK-NEXT:           ResolvedIntLiteral:int '1'
// CHECK-NEXT:           | value:int 1
// CHECK-NEXT:           ResolvedUnaryOperator:&char[4] '&'
// CHECK-NEXT:             ResolvedStringLiteral:char[4] '%d\n'
// CHECK-NEXT:           ResolvedDeclRefExpr:int value
// CHECK-NEXT:     ResolvedIfStmt
// CHECK-NEXT:       ResolvedCatchErrExpr: 
// CHECK-NEXT:         ResolvedDeclRefExpr:int? result
// CHECK-NEXT:       ResolvedBlock
// CHECK-NEXT:         ResolvedCallExpr:int dprintf
// CHECK-NEXT:           ResolvedIntLiteral:int '1'
// CHECK-NEXT:           | value:int 1
// CHECK-NEXT:           ResolvedUnaryOperator:&char[20] '&'
// CHECK-NEXT:             ResolvedStringLiteral:char[20] 'There are an error\n'
// CHECK-NEXT:     ResolvedIfStmt
// CHECK-NEXT:       ResolvedCatchErrExpr: 
// CHECK-NEXT:         ResolvedCallExpr:int? foo
// CHECK-NEXT:           ResolvedIntLiteral:int '2'
// CHECK-NEXT:           | value:int 2
// CHECK-NEXT:       ResolvedBlock
// CHECK-NEXT:         ResolvedCallExpr:int dprintf
// CHECK-NEXT:           ResolvedIntLiteral:int '1'
// CHECK-NEXT:           | value:int 1
// CHECK-NEXT:           ResolvedUnaryOperator:&char[20] '&'
// CHECK-NEXT:             ResolvedStringLiteral:char[20] 'There are an error\n'
// CHECK-NEXT:     ResolvedCallExpr:int dprintf
// CHECK-NEXT:       ResolvedIntLiteral:int '1'
// CHECK-NEXT:       | value:int 1
// CHECK-NEXT:       ResolvedUnaryOperator:&char[13] '&'
// CHECK-NEXT:         ResolvedStringLiteral:char[13] 'No error %d\n'
// CHECK-NEXT:       ResolvedDeclRefExpr:int? result
// CHECK-NEXT:     ResolvedCallExpr:int dprintf
// CHECK-NEXT:       ResolvedIntLiteral:int '1'
// CHECK-NEXT:       | value:int 1
// CHECK-NEXT:       ResolvedUnaryOperator:&char[18] '&'
// CHECK-NEXT:         ResolvedStringLiteral:char[18] 'No safe error %d\n'
// CHECK-NEXT:       ResolvedErrUnwrapExpr:int
// CHECK-NEXT:         ResolvedCallExpr:int? foo
// CHECK-NEXT:           ResolvedIntLiteral:int '10'
// CHECK-NEXT:           | value:int 10