// RUN: compiler %s -res-dump 2>&1 | filecheck %s

const e = error {
    ERROR_ONE,
    ERROR_TWO,
    ERROR_THREE,
};
// CHECK:   ResolvedDeclStmt
// CHECK-NEXT:     ResolvedVarDecl:const ErrorGroup  e
// CHECK-NEXT:       ResolvedErrorGroupExprDecl
// CHECK-NEXT:         ResolvedErrorDecl ERROR_ONE
// CHECK-NEXT:         ResolvedErrorDecl ERROR_TWO
// CHECK-NEXT:         ResolvedErrorDecl ERROR_THREE

fn foo(x:i32) -> i32! {
    if (x == 1){
        return e.ERROR_ONE;
    }else if (x == 2){
        return e.ERROR_TWO;
    }
    return x;
}
// CHECK:   ResolvedFunctionDecl foo -> Int i32!
// CHECK-NEXT:     ResolvedParamDecl:Int i32 x
// CHECK-NEXT:     ResolvedBlock
// CHECK-NEXT:       ResolvedIfStmt
// CHECK-NEXT:         ResolvedBinaryOperator:Int i1 '=='
// CHECK-NEXT:           ResolvedDeclRefExpr:Int i32 x
// CHECK-NEXT:           ResolvedIntLiteral:Int i32 '1'
// CHECK-NEXT:         ResolvedBlock
// CHECK-NEXT:           ResolvedReturnStmt
// CHECK-NEXT:             ResolvedMemberExpr:Error ERROR_ONE ERROR_ONE
// CHECK-NEXT:               ResolvedDeclRefExpr:ErrorGroup  e
// CHECK-NEXT:         ResolvedBlock
// CHECK-NEXT:           ResolvedIfStmt
// CHECK-NEXT:             ResolvedBinaryOperator:Int i1 '=='
// CHECK-NEXT:               ResolvedDeclRefExpr:Int i32 x
// CHECK-NEXT:               ResolvedIntLiteral:Int i32 '2'
// CHECK-NEXT:             ResolvedBlock
// CHECK-NEXT:               ResolvedReturnStmt
// CHECK-NEXT:                 ResolvedMemberExpr:Error ERROR_TWO ERROR_TWO
// CHECK-NEXT:                   ResolvedDeclRefExpr:ErrorGroup  e
// CHECK-NEXT:       ResolvedReturnStmt
// CHECK-NEXT:         ResolvedDeclRefExpr:Int i32 x

extern fn dprintf(fd:i32, fmt:*u8, ...) -> i32;

fn main() -> void {
    let result = foo(2);
    catch result_e = result;
    dprintf(1, "%s\n", result_e);

    if (catch err = result){
        dprintf(1, "%s\n", err);
    }
    let result2 = try foo(10);
    dprintf(1, "%d\n", result2);

    if (catch result){
        dprintf(1, "There are an error\n");
    }
    if (catch foo(2)){
        dprintf(1, "There are an error\n");
    }

    dprintf(1, "No error %d\n", result);
    dprintf(1, "No safe error %d\n", try foo(10));
}
// CHECK: ResolvedFunctionDecl main -> Void void
// CHECK-NEXT:     ResolvedBlock
// CHECK-NEXT:       ResolvedDeclStmt
// CHECK-NEXT:         ResolvedVarDecl:Int i32! result
// CHECK-NEXT:           ResolvedCallExpr:Int i32!
// CHECK-NEXT:             ResolvedFunctionDecl foo -> Int i32!
// CHECK-NEXT:             ResolvedIntLiteral:Int i32 '2'
// CHECK-NEXT:             | value: 2
// CHECK-NEXT:       ResolvedCatchErrorExpr:Int i1
// CHECK-NEXT:         ResolvedDeclStmt
// CHECK-NEXT:           ResolvedVarDecl:const Error err result_e
// CHECK-NEXT:             ResolvedDeclRefExpr:Int i32! result
// CHECK-NEXT:       ResolvedCallExpr:Int i32
// CHECK-NEXT:         ResolvedExternFunctionDecl dprintf -> Int i32
// CHECK-NEXT:         ResolvedIntLiteral:Int i32 '1'
// CHECK-NEXT:         | value: 1
// CHECK-NEXT:         ResolvedStringLiteral:UInt *u8 '%s\n'
// CHECK-NEXT:         ResolvedDeclRefExpr:Error err result_e
// CHECK-NEXT:       ResolvedIfStmt
// CHECK-NEXT:         ResolvedCatchErrorExpr:Int i1
// CHECK-NEXT:           ResolvedDeclStmt
// CHECK-NEXT:             ResolvedVarDecl:const Error err err
// CHECK-NEXT:               ResolvedDeclRefExpr:Int i32! result
// CHECK-NEXT:         ResolvedBlock
// CHECK-NEXT:           ResolvedCallExpr:Int i32
// CHECK-NEXT:             ResolvedExternFunctionDecl dprintf -> Int i32
// CHECK-NEXT:             ResolvedIntLiteral:Int i32 '1'
// CHECK-NEXT:             | value: 1
// CHECK-NEXT:             ResolvedStringLiteral:UInt *u8 '%s\n'
// CHECK-NEXT:             ResolvedDeclRefExpr:Error err err
// CHECK-NEXT:       ResolvedDeclStmt
// CHECK-NEXT:         ResolvedVarDecl:Int i32 result2
// CHECK-NEXT:           ResolvedTryErrorExpr:Int i32
// CHECK-NEXT:             ResolvedCallExpr:Int i32!
// CHECK-NEXT:               ResolvedFunctionDecl foo -> Int i32!
// CHECK-NEXT:               ResolvedIntLiteral:Int i32 '10'
// CHECK-NEXT:               | value: 10
// CHECK-NEXT:       ResolvedCallExpr:Int i32
// CHECK-NEXT:         ResolvedExternFunctionDecl dprintf -> Int i32
// CHECK-NEXT:         ResolvedIntLiteral:Int i32 '1'
// CHECK-NEXT:         | value: 1
// CHECK-NEXT:         ResolvedStringLiteral:UInt *u8 '%d\n'
// CHECK-NEXT:         ResolvedDeclRefExpr:Int i32 result2
// CHECK-NEXT:       ResolvedIfStmt
// CHECK-NEXT:         ResolvedCatchErrorExpr:Int i1
// CHECK-NEXT:           ResolvedDeclRefExpr:Int i32! result
// CHECK-NEXT:         ResolvedBlock
// CHECK-NEXT:           ResolvedCallExpr:Int i32
// CHECK-NEXT:             ResolvedExternFunctionDecl dprintf -> Int i32
// CHECK-NEXT:             ResolvedIntLiteral:Int i32 '1'
// CHECK-NEXT:             | value: 1
// CHECK-NEXT:             ResolvedStringLiteral:UInt *u8 'There are an error\n'
// CHECK-NEXT:       ResolvedIfStmt
// CHECK-NEXT:         ResolvedCatchErrorExpr:Int i1
// CHECK-NEXT:           ResolvedCallExpr:Int i32!
// CHECK-NEXT:             ResolvedFunctionDecl foo -> Int i32!
// CHECK-NEXT:             ResolvedIntLiteral:Int i32 '2'
// CHECK-NEXT:             | value: 2
// CHECK-NEXT:         ResolvedBlock
// CHECK-NEXT:           ResolvedCallExpr:Int i32
// CHECK-NEXT:             ResolvedExternFunctionDecl dprintf -> Int i32
// CHECK-NEXT:             ResolvedIntLiteral:Int i32 '1'
// CHECK-NEXT:             | value: 1
// CHECK-NEXT:             ResolvedStringLiteral:UInt *u8 'There are an error\n'
// CHECK-NEXT:       ResolvedCallExpr:Int i32
// CHECK-NEXT:         ResolvedExternFunctionDecl dprintf -> Int i32
// CHECK-NEXT:         ResolvedIntLiteral:Int i32 '1'
// CHECK-NEXT:         | value: 1
// CHECK-NEXT:         ResolvedStringLiteral:UInt *u8 'No error %d\n'
// CHECK-NEXT:         ResolvedDeclRefExpr:Int i32! result
// CHECK-NEXT:       ResolvedCallExpr:Int i32
// CHECK-NEXT:         ResolvedExternFunctionDecl dprintf -> Int i32
// CHECK-NEXT:         ResolvedIntLiteral:Int i32 '1'
// CHECK-NEXT:         | value: 1
// CHECK-NEXT:         ResolvedStringLiteral:UInt *u8 'No safe error %d\n'
// CHECK-NEXT:         ResolvedTryErrorExpr:Int i32
// CHECK-NEXT:           ResolvedCallExpr:Int i32!
// CHECK-NEXT:             ResolvedFunctionDecl foo -> Int i32!
// CHECK-NEXT:             ResolvedIntLiteral:Int i32 '10'
// CHECK-NEXT:             | value: 10