// RUN: compiler %s -res-dump 2>&1 | filecheck %s

extern fn printf(fmt:*u8, ...) -> i32;

let num = 24;
const cnum = 100;
// CHECK: ResolvedDeclStmt
// CHECK-NEXT:   ResolvedVarDecl:i32 num
// CHECK-NEXT:     ResolvedIntLiteral:i32 '24'
// CHECK-NEXT:     | value: 24
// CHECK-NEXT: ResolvedDeclStmt
// CHECK-NEXT:   ResolvedVarDecl:const i32 cnum
// CHECK-NEXT:     ResolvedIntLiteral:i32 '100'
// CHECK-NEXT:     | value: 100

fn main() -> void {
    num = 320;
    num = num + cnum;
    printf("Num %d cnum %d\n", num, cnum);
}
// CHECK: ResolvedFunctionDecl main fn()->void
// CHECK-NEXT:   ResolvedBlock
// CHECK-NEXT:     ResolvedAssignment
// CHECK-NEXT:       ResolvedDeclRefExpr:i32 num
// CHECK-NEXT:       ResolvedIntLiteral:i32 '320'
// CHECK-NEXT:       | value: 320
// CHECK-NEXT:     ResolvedAssignment
// CHECK-NEXT:       ResolvedDeclRefExpr:i32 num
// CHECK-NEXT:       ResolvedBinaryOperator:i32 '+'
// CHECK-NEXT:         ResolvedDeclRefExpr:i32 num
// CHECK-NEXT:         ResolvedDeclRefExpr:i32 cnum
// CHECK-NEXT:         | value: 100
// CHECK-NEXT:     ResolvedCallExpr:i32
// CHECK-NEXT:       ResolvedExternFunctionDecl printf fn(*u8, ...)->i32
// CHECK-NEXT:       ResolvedStringLiteral:*u8 'Num %d cnum %d\n'
// CHECK-NEXT:       ResolvedDeclRefExpr:i32 num
// CHECK-NEXT:       ResolvedDeclRefExpr:i32 cnum
// CHECK-NEXT:       | value: 100