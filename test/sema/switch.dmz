// RUN: compiler %s -res-dump 2>&1 | filecheck %s

extern fn printf(fmt:&u8[], ...) -> i32;

fn main() -> void {
    let x = 10;

    switch(x) {
        case 1 => printf(&"1\n");
        case 2 => printf(&"2\n");
        case 3 => printf(&"3\n");
        else   => printf(&"else %d\n", x);
    }
}
// CHECK: ResolvedSwitchStmt
// CHECK-NEXT:      ResolvedDeclRefExpr:i32 x
// CHECK-NEXT:      ResolvedCaseStmt
// CHECK-NEXT:        ResolvedIntLiteral:i32 '1'
// CHECK-NEXT:        | value: 1
// CHECK-NEXT:        ResolvedBlock
// CHECK-NEXT:          ResolvedCallExpr:i32 printf
// CHECK-NEXT:            ResolvedUnaryOperator:&u8[3] '&'
// CHECK-NEXT:              ResolvedStringLiteral:u8[3] '1\n'
// CHECK-NEXT:      ResolvedCaseStmt
// CHECK-NEXT:        ResolvedIntLiteral:i32 '2'
// CHECK-NEXT:        | value: 2
// CHECK-NEXT:        ResolvedBlock
// CHECK-NEXT:          ResolvedCallExpr:i32 printf
// CHECK-NEXT:            ResolvedUnaryOperator:&u8[3] '&'
// CHECK-NEXT:              ResolvedStringLiteral:u8[3] '2\n'
// CHECK-NEXT:      ResolvedCaseStmt
// CHECK-NEXT:        ResolvedIntLiteral:i32 '3'
// CHECK-NEXT:        | value: 3
// CHECK-NEXT:        ResolvedBlock
// CHECK-NEXT:          ResolvedCallExpr:i32 printf
// CHECK-NEXT:            ResolvedUnaryOperator:&u8[3] '&'
// CHECK-NEXT:              ResolvedStringLiteral:u8[3] '3\n'
// CHECK-NEXT:      ElseBlock
// CHECK-NEXT:      ResolvedBlock
// CHECK-NEXT:        ResolvedCallExpr:i32 printf
// CHECK-NEXT:          ResolvedUnaryOperator:&u8[9] '&'
// CHECK-NEXT:            ResolvedStringLiteral:u8[9] 'else %d\n'
// CHECK-NEXT:          ResolvedDeclRefExpr:i32 x