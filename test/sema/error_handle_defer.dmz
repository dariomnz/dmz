// RUN: compiler %s -res-dump 2>&1 | filecheck %s
// RUN: diff <(compiler %s -run 2>&1) <(echo -n -e "Defered foo\nDefered foo\nDefered foo\nDefered bar\nDefered foo\nDefered foo\nDefered bar\n")

const e = error {
    ERROR_ONE,
    ERROR_TWO,
    ERROR_THREE,
};

fn bar(x:i32) -> i32! {
    defer printf("Defered bar\n");
    let result = try foo(x);
    return try foo(x);
}
// CHECK:   ResolvedFunctionDecl bar fn(i32)->i32!
// CHECK-NEXT:     ResolvedParamDecl:i32 x
// CHECK-NEXT:     ResolvedBlock
// CHECK-NEXT:       ResolvedDeferStmt
// CHECK-NEXT:         ResolvedBlock
// CHECK-NEXT:           ResolvedCallExpr:i32
// CHECK-NEXT:             ResolvedDeclRefExpr:fn(*u8, ...)->i32 printf
// CHECK-NEXT:             ResolvedStringLiteral:*u8 'Defered bar\n'
// CHECK-NEXT:       ResolvedDeclStmt
// CHECK-NEXT:         ResolvedVarDecl:i32 result
// CHECK-NEXT:           ResolvedTryErrorExpr:i32
// CHECK-NEXT:             ResolvedCallExpr:i32!
// CHECK-NEXT:              ResolvedDeclRefExpr:fn(i32)->i32! foo
// CHECK-NEXT:               ResolvedDeclRefExpr:i32 x
// CHECK-NEXT:       ResolvedReturnStmt
// CHECK-NEXT:         ResolvedTryErrorExpr:i32
// CHECK-NEXT:           ResolvedCallExpr:i32!
// CHECK-NEXT:            ResolvedDeclRefExpr:fn(i32)->i32! foo
// CHECK-NEXT:             ResolvedDeclRefExpr:i32 x
// CHECK-NEXT:         ResolvedDeferRefStmt
// CHECK-NEXT:           ResolvedBlock
// CHECK-NEXT:             ResolvedCallExpr:i32
// CHECK-NEXT:               ResolvedDeclRefExpr:fn(*u8, ...)->i32 printf
// CHECK-NEXT:               ResolvedStringLiteral:*u8 'Defered bar\n'

fn foo(x:i32) -> i32! {
    defer printf("Defered foo\n");
    if (x == 1){
        return e.ERROR_ONE;
    }
    return x;
}
// CHECK:   ResolvedFunctionDecl foo fn(i32)->i32!
// CHECK-NEXT:     ResolvedParamDecl:i32 x
// CHECK-NEXT:     ResolvedBlock
// CHECK-NEXT:       ResolvedDeferStmt
// CHECK-NEXT:         ResolvedBlock
// CHECK-NEXT:           ResolvedCallExpr:i32
// CHECK-NEXT:             ResolvedDeclRefExpr:fn(*u8, ...)->i32 printf
// CHECK-NEXT:             ResolvedStringLiteral:*u8 'Defered foo\n'
// CHECK-NEXT:       ResolvedIfStmt
// CHECK-NEXT:         ResolvedBinaryOperator:bool '=='
// CHECK-NEXT:           ResolvedDeclRefExpr:i32 x
// CHECK-NEXT:           ResolvedIntLiteral:i32 '1'
// CHECK-NEXT:         ResolvedBlock
// CHECK-NEXT:           ResolvedReturnStmt
// CHECK-NEXT:             ResolvedMemberExpr:error ERROR_ONE
// CHECK-NEXT:               ResolvedDeclRefExpr:errorGroup  e
// CHECK-NEXT:             ResolvedDeferRefStmt
// CHECK-NEXT:               ResolvedBlock
// CHECK-NEXT:                 ResolvedCallExpr:i32
// CHECK-NEXT:                   ResolvedDeclRefExpr:fn(*u8, ...)->i32 printf
// CHECK-NEXT:                   ResolvedStringLiteral:*u8 'Defered foo\n'
// CHECK-NEXT:       ResolvedReturnStmt
// CHECK-NEXT:         ResolvedDeclRefExpr:i32 x
// CHECK-NEXT:         ResolvedDeferRefStmt
// CHECK-NEXT:           ResolvedBlock
// CHECK-NEXT:             ResolvedCallExpr:i32
// CHECK-NEXT:               ResolvedDeclRefExpr:fn(*u8, ...)->i32 printf
// CHECK-NEXT:               ResolvedStringLiteral:*u8 'Defered foo\n'

extern fn printf(fmt:*u8, ...) -> i32;

fn main() -> void {
    let result = foo(1);
    result = foo(10);
    result = bar(1);
    result = bar(10);
}
// CHECK: ResolvedFunctionDecl main fn()->void
// CHECK-NEXT:   ResolvedBlock
// CHECK-NEXT:     ResolvedDeclStmt
// CHECK-NEXT:       ResolvedVarDecl:i32! result
// CHECK-NEXT:         ResolvedCallExpr:i32!
// CHECK-NEXT:         ResolvedDeclRefExpr:fn(i32)->i32! foo
// CHECK-NEXT:           ResolvedIntLiteral:i32 '1'
// CHECK-NEXT:           | value: 1
// CHECK-NEXT:     ResolvedAssignment
// CHECK-NEXT:       ResolvedDeclRefExpr:i32! result
// CHECK-NEXT:       ResolvedCallExpr:i32!
// CHECK-NEXT:         ResolvedDeclRefExpr:fn(i32)->i32! foo
// CHECK-NEXT:         ResolvedIntLiteral:i32 '10'
// CHECK-NEXT:         | value: 10
// CHECK-NEXT:     ResolvedAssignment
// CHECK-NEXT:       ResolvedDeclRefExpr:i32! result
// CHECK-NEXT:       ResolvedCallExpr:i32!
// CHECK-NEXT:         ResolvedDeclRefExpr:fn(i32)->i32! bar
// CHECK-NEXT:         ResolvedIntLiteral:i32 '1'
// CHECK-NEXT:         | value: 1
// CHECK-NEXT:     ResolvedAssignment
// CHECK-NEXT:       ResolvedDeclRefExpr:i32! result
// CHECK-NEXT:       ResolvedCallExpr:i32!
// CHECK-NEXT:         ResolvedDeclRefExpr:fn(i32)->i32! bar
// CHECK-NEXT:         ResolvedIntLiteral:i32 '10'
// CHECK-NEXT:         | value: 10