// RUN: compiler %s -res-dump 2>&1 | filecheck %s
// RUN: diff <(compiler %s -run 2>&1) <(echo -n -e "Defered foo\nDefered foo\nDefered foo\nDefered bar\nDefered foo\nDefered foo\nDefered bar\n")

err {
    ERROR_ONE,
    ERROR_TWO,
    ERROR_THREE,
}

fn bar(x:i32) -> i32? {
    defer printf(&"Defered bar\n");
    let result = foo(x)!;
    return foo(x)!;
}
// CHECK: ResolvedFunctionDecl bar -> i32?
// CHECK-NEXT:  ResolvedParamDecl:i32 x
// CHECK-NEXT:  ResolvedBlock
// CHECK-NEXT:    ResolvedDeferStmt
// CHECK-NEXT:      ResolvedBlock
// CHECK-NEXT:        ResolvedCallExpr:i32 printf
// CHECK-NEXT:          ResolvedRefPtrExpr:*u8[13]
// CHECK-NEXT:            ResolvedStringLiteral:u8[13] 'Defered bar\n'
// CHECK-NEXT:    ResolvedDeclStmt
// CHECK-NEXT:      ResolvedVarDecl:i32 result
// CHECK-NEXT:        ResolvedErrUnwrapExpr:i32
// CHECK-NEXT:          ResolvedCallExpr:i32? foo
// CHECK-NEXT:            ResolvedDeclRefExpr:i32 x
// CHECK-NEXT:          ResolvedDeferRefStmt
// CHECK-NEXT:            ResolvedBlock
// CHECK-NEXT:              ResolvedCallExpr:i32 printf
// CHECK-NEXT:                ResolvedRefPtrExpr:*u8[13]
// CHECK-NEXT:                  ResolvedStringLiteral:u8[13] 'Defered bar\n'
// CHECK-NEXT:    ResolvedReturnStmt
// CHECK-NEXT:      ResolvedErrUnwrapExpr:i32
// CHECK-NEXT:        ResolvedCallExpr:i32? foo
// CHECK-NEXT:          ResolvedDeclRefExpr:i32 x
// CHECK-NEXT:        ResolvedDeferRefStmt
// CHECK-NEXT:          ResolvedBlock
// CHECK-NEXT:            ResolvedCallExpr:i32 printf
// CHECK-NEXT:              ResolvedRefPtrExpr:*u8[13]
// CHECK-NEXT:                ResolvedStringLiteral:u8[13] 'Defered bar\n'
// CHECK-NEXT:      ResolvedDeferRefStmt
// CHECK-NEXT:        ResolvedBlock
// CHECK-NEXT:          ResolvedCallExpr:i32 printf
// CHECK-NEXT:            ResolvedRefPtrExpr:*u8[13]
// CHECK-NEXT:              ResolvedStringLiteral:u8[13] 'Defered bar\n'

fn foo(x:i32) -> i32? {
    defer printf(&"Defered foo\n");
    if (x == 1){
        return ERROR_ONE?;
    }
    return x;
}
// CHECK: ResolvedFunctionDecl foo -> i32?
// CHECK-NEXT:   ResolvedParamDecl:i32 x
// CHECK-NEXT:   ResolvedBlock
// CHECK-NEXT:     ResolvedDeferStmt
// CHECK-NEXT:       ResolvedBlock
// CHECK-NEXT:         ResolvedCallExpr:i32 printf
// CHECK-NEXT:           ResolvedRefPtrExpr:*u8[13]
// CHECK-NEXT:             ResolvedStringLiteral:u8[13] 'Defered foo\n'
// CHECK-NEXT:     ResolvedIfStmt
// CHECK-NEXT:       ResolvedBinaryOperator:i1 '=='
// CHECK-NEXT:         ResolvedDeclRefExpr:i32 x
// CHECK-NEXT:         ResolvedIntLiteral:i32 '1'
// CHECK-NEXT:       ResolvedBlock
// CHECK-NEXT:         ResolvedReturnStmt
// CHECK-NEXT:           ResolvedErrDeclRefExpr ERROR_ONE
// CHECK-NEXT:           ResolvedDeferRefStmt
// CHECK-NEXT:             ResolvedBlock
// CHECK-NEXT:               ResolvedCallExpr:i32 printf
// CHECK-NEXT:                 ResolvedRefPtrExpr:*u8[13]
// CHECK-NEXT:                   ResolvedStringLiteral:u8[13] 'Defered foo\n'
// CHECK-NEXT:     ResolvedReturnStmt
// CHECK-NEXT:       ResolvedDeclRefExpr:i32 x
// CHECK-NEXT:       ResolvedDeferRefStmt
// CHECK-NEXT:         ResolvedBlock
// CHECK-NEXT:           ResolvedCallExpr:i32 printf
// CHECK-NEXT:             ResolvedRefPtrExpr:*u8[13]
// CHECK-NEXT:               ResolvedStringLiteral:u8[13] 'Defered foo\n'

extern fn printf(fmt:*u8, ...) -> i32;

fn main() -> void {
    let result = foo(1);
    result = foo(10);
    result = bar(1);
    result = bar(10);
}
// CHECK: ResolvedFunctionDecl main -> void
// CHECK-NEXT:   ResolvedBlock
// CHECK-NEXT:     ResolvedDeclStmt
// CHECK-NEXT:       ResolvedVarDecl:i32? result
// CHECK-NEXT:         ResolvedCallExpr:i32? foo
// CHECK-NEXT:           ResolvedIntLiteral:i32 '1'
// CHECK-NEXT:           | value: 1
// CHECK-NEXT:     ResolvedAssignment
// CHECK-NEXT:       ResolvedDeclRefExpr:i32? result
// CHECK-NEXT:       ResolvedCallExpr:i32? foo
// CHECK-NEXT:         ResolvedIntLiteral:i32 '10'
// CHECK-NEXT:         | value: 10
// CHECK-NEXT:     ResolvedAssignment
// CHECK-NEXT:       ResolvedDeclRefExpr:i32? result
// CHECK-NEXT:       ResolvedCallExpr:i32? bar
// CHECK-NEXT:         ResolvedIntLiteral:i32 '1'
// CHECK-NEXT:         | value: 1
// CHECK-NEXT:     ResolvedAssignment
// CHECK-NEXT:       ResolvedDeclRefExpr:i32? result
// CHECK-NEXT:       ResolvedCallExpr:i32? bar
// CHECK-NEXT:         ResolvedIntLiteral:i32 '10'
// CHECK-NEXT:         | value: 10