// RUN: compiler %s -I std %S/../../std/std.dmz -res-dump -module -test 2>&1 | filecheck %s
const std = import("std");
const ops = import("module_ops.dmz");

fn add(x:i32, y:i32) -> i32 {
    return x + y;
}

test "add test" {
    try std.testing.expect(add(1, 1) == 2);
    try std.testing.expect(add(1, 1) == 3);
}
test "add test 2" {
    try std.testing.expect(add(1, 2) == 3);
    try std.testing.expect(add(2, 1) == 3);
}

// CHECK: ResolvedFunctionDecl @builtin_test_num -> i32
// CHECK-NEXT:         ResolvedBlock
// CHECK-NEXT:           ResolvedReturnStmt
// CHECK-NEXT:             ResolvedIntLiteral:i32 '2'

// CHECK:       ResolvedFunctionDecl @builtin_test_run -> void!
// CHECK-NEXT:         ResolvedParamDecl:i32 n
// CHECK-NEXT:         ResolvedBlock
// CHECK-NEXT:           ResolvedSwitchStmt
// CHECK-NEXT:             ResolvedDeclRefExpr:i32 n
// CHECK-NEXT:             ResolvedCaseStmt
// CHECK-NEXT:               ResolvedIntLiteral:i32 '0'
// CHECK-NEXT:               ResolvedBlock
// CHECK-NEXT:                 ResolvedTryErrorExpr:void
// CHECK-NEXT:                   ResolvedCallExpr:void!
// CHECK-NEXT:                     ResolvedTestDecl add test
// CHECK-NEXT:             ResolvedCaseStmt
// CHECK-NEXT:               ResolvedIntLiteral:i32 '1'
// CHECK-NEXT:               ResolvedBlock
// CHECK-NEXT:                 ResolvedTryErrorExpr:void
// CHECK-NEXT:                   ResolvedCallExpr:void!
// CHECK-NEXT:                     ResolvedTestDecl add test 2
// CHECK-NEXT:             ElseBlock
// CHECK-NEXT:             ResolvedBlock

// CHECK:       ResolvedFunctionDecl @builtin_test_name -> *u8
// CHECK-NEXT:         ResolvedParamDecl:i32 n
// CHECK-NEXT:         ResolvedBlock
// CHECK-NEXT:           ResolvedSwitchStmt
// CHECK-NEXT:             ResolvedDeclRefExpr:i32 n
// CHECK-NEXT:             ResolvedCaseStmt
// CHECK-NEXT:               ResolvedIntLiteral:i32 '0'
// CHECK-NEXT:               ResolvedBlock
// CHECK-NEXT:                 ResolvedReturnStmt
// CHECK-NEXT:                   ResolvedStringLiteral:*u8 'add test'
// CHECK-NEXT:             ResolvedCaseStmt
// CHECK-NEXT:               ResolvedIntLiteral:i32 '1'
// CHECK-NEXT:               ResolvedBlock
// CHECK-NEXT:                 ResolvedReturnStmt
// CHECK-NEXT:                   ResolvedStringLiteral:*u8 'add test 2'
// CHECK-NEXT:             ElseBlock
// CHECK-NEXT:             ResolvedBlock
// CHECK-NEXT:               ResolvedReturnStmt
// CHECK-NEXT:                 ResolvedStringLiteral:*u8 'Error in builtin_test_name'

// CHECK:  ResolvedTestDecl add test
// CHECK-NEXT:       ResolvedBlock
// CHECK-NEXT:         ResolvedTryErrorExpr:void
// CHECK-NEXT:           ResolvedCallExpr:void!
// CHECK-NEXT:             ResolvedFunctionDecl expect -> void!
// CHECK-NEXT:             ResolvedBinaryOperator:bool '=='
// CHECK-NEXT:               ResolvedCallExpr:i32
// CHECK-NEXT:                 ResolvedFunctionDecl add -> i32
// CHECK-NEXT:                 ResolvedIntLiteral:i32 '1'
// CHECK-NEXT:                 | value: 1
// CHECK-NEXT:                 ResolvedIntLiteral:i32 '1'
// CHECK-NEXT:                 | value: 1
// CHECK-NEXT:               ResolvedIntLiteral:i32 '2'
// CHECK-NEXT:         ResolvedTryErrorExpr:void
// CHECK-NEXT:           ResolvedCallExpr:void!
// CHECK-NEXT:             ResolvedFunctionDecl expect -> void!
// CHECK-NEXT:             ResolvedBinaryOperator:bool '=='
// CHECK-NEXT:               ResolvedCallExpr:i32
// CHECK-NEXT:                 ResolvedFunctionDecl add -> i32
// CHECK-NEXT:                 ResolvedIntLiteral:i32 '1'
// CHECK-NEXT:                 | value: 1
// CHECK-NEXT:                 ResolvedIntLiteral:i32 '1'
// CHECK-NEXT:                 | value: 1
// CHECK-NEXT:               ResolvedIntLiteral:i32 '3'