// RUN: compiler %s -I %S/../../std -res-dump -module 2>&1 | filecheck %s
const std = import("std");

fn add(x:i32, y:i32) -> i32 {
    return x + y;
}

test "add test" {
    try std.testing.expect(add(1, 1) == 2);
    try std.testing.expect(add(1, 1) == 3);
}
test "add test 2" {
    try std.testing.expect(add(1, 2) == 3);
    try std.testing.expect(add(2, 1) == 3);
}
// CHECK:  ResolvedTestDecl add test
// CHECK-NEXT:     ResolvedFunctionDecl add test -> Void void!
// CHECK-NEXT:       ResolvedBlock
// CHECK-NEXT:         ResolvedTryErrorExpr:Void void
// CHECK-NEXT:           ResolvedCallExpr:Void void!
// CHECK-NEXT:             ResolvedFunctionDecl expect -> Void void!
// CHECK-NEXT:             ResolvedBinaryOperator:Int i1 '=='
// CHECK-NEXT:               ResolvedCallExpr:Int i32
// CHECK-NEXT:                 ResolvedFunctionDecl add -> Int i32
// CHECK-NEXT:                 ResolvedIntLiteral:Int i32 '1'
// CHECK-NEXT:                 | value: 1
// CHECK-NEXT:                 ResolvedIntLiteral:Int i32 '1'
// CHECK-NEXT:                 | value: 1
// CHECK-NEXT:               ResolvedIntLiteral:Int i32 '2'
// CHECK-NEXT:         ResolvedTryErrorExpr:Void void
// CHECK-NEXT:           ResolvedCallExpr:Void void!
// CHECK-NEXT:             ResolvedFunctionDecl expect -> Void void!
// CHECK-NEXT:             ResolvedBinaryOperator:Int i1 '=='
// CHECK-NEXT:               ResolvedCallExpr:Int i32
// CHECK-NEXT:                 ResolvedFunctionDecl add -> Int i32
// CHECK-NEXT:                 ResolvedIntLiteral:Int i32 '1'
// CHECK-NEXT:                 | value: 1
// CHECK-NEXT:                 ResolvedIntLiteral:Int i32 '1'
// CHECK-NEXT:                 | value: 1
// CHECK-NEXT:               ResolvedIntLiteral:Int i32 '3'


// CHECK: ResolvedFunctionDecl @builtin_test_num -> Int i32
// CHECK-NEXT:         ResolvedBlock
// CHECK-NEXT:           ResolvedReturnStmt
// CHECK-NEXT:             ResolvedIntLiteral:Int i32 '2'

// CHECK:       ResolvedFunctionDecl @builtin_test_run -> Void void!
// CHECK-NEXT:         ResolvedParamDecl:Int i32 n
// CHECK-NEXT:         ResolvedBlock
// CHECK-NEXT:           ResolvedSwitchStmt
// CHECK-NEXT:             ResolvedDeclRefExpr:Int i32 n
// CHECK-NEXT:             ResolvedCaseStmt
// CHECK-NEXT:               ResolvedIntLiteral:Int i32 '0'
// CHECK-NEXT:               ResolvedBlock
// CHECK-NEXT:                 ResolvedTryErrorExpr:Void void
// CHECK-NEXT:                   ResolvedCallExpr:Void void!
// CHECK-NEXT:                     ResolvedFunctionDecl add test -> Void void!
// CHECK-NEXT:             ResolvedCaseStmt
// CHECK-NEXT:               ResolvedIntLiteral:Int i32 '1'
// CHECK-NEXT:               ResolvedBlock
// CHECK-NEXT:                 ResolvedTryErrorExpr:Void void
// CHECK-NEXT:                   ResolvedCallExpr:Void void!
// CHECK-NEXT:                     ResolvedFunctionDecl add test 2 -> Void void!
// CHECK-NEXT:             ElseBlock
// CHECK-NEXT:             ResolvedBlock

// CHECK:       ResolvedFunctionDecl @builtin_test_name -> UInt *u8
// CHECK-NEXT:         ResolvedParamDecl:Int i32 n
// CHECK-NEXT:         ResolvedBlock
// CHECK-NEXT:           ResolvedSwitchStmt
// CHECK-NEXT:             ResolvedDeclRefExpr:Int i32 n
// CHECK-NEXT:             ResolvedCaseStmt
// CHECK-NEXT:               ResolvedIntLiteral:Int i32 '0'
// CHECK-NEXT:               ResolvedBlock
// CHECK-NEXT:                 ResolvedReturnStmt
// CHECK-NEXT:                   ResolvedStringLiteral:UInt *u8 'add test'
// CHECK-NEXT:             ResolvedCaseStmt
// CHECK-NEXT:               ResolvedIntLiteral:Int i32 '1'
// CHECK-NEXT:               ResolvedBlock
// CHECK-NEXT:                 ResolvedReturnStmt
// CHECK-NEXT:                   ResolvedStringLiteral:UInt *u8 'add test 2'
// CHECK-NEXT:             ElseBlock
// CHECK-NEXT:             ResolvedBlock
// CHECK-NEXT:               ResolvedReturnStmt
// CHECK-NEXT:                 ResolvedStringLiteral:UInt *u8 'Error in builtin_test_name'