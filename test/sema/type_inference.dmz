// RUN: compiler %s -res-dump 2>&1 | filecheck %s --implicit-check-not error --match-full-lines
fn foo() -> i32 {
    return 1;
}

fn bar() -> u8 {
    return '\n';
}

fn str() -> u8[] {
    return "hello\n";
}

fn fnBool() -> i1 {
    return true;
}

fn main() -> void {
    let x = 1;
    let y = foo() + 1;

    let x2: i32;
    let y2: i32;

    let c1 = 'a';
    let c2 = bar();
    let c3: u8;

    let str1 = "something\n";
    let str2 = str();

    let bool1 = true;
    let bool2 = false;
    let bool3 = fnBool();
}

// CHECK:   ResolvedVarDecl:i32 x
// CHECK-NEXT:     ResolvedIntLiteral:i32 '1'
// CHECK-NEXT:     | value: 1
// CHECK-NEXT: ResolvedDeclStmt
// CHECK-NEXT:   ResolvedVarDecl:i32 y
// CHECK-NEXT:     ResolvedBinaryOperator:i32 '+'
// CHECK-NEXT:       ResolvedCallExpr:i32 foo
// CHECK-NEXT:       ResolvedIntLiteral:i32 '1'

// CHECK:      ResolvedVarDecl:u8[11] str1
// CHECK-NEXT:        ResolvedStringLiteral:u8[11] 'something\n'
// CHECK-NEXT:    ResolvedDeclStmt
// CHECK-NEXT:      ResolvedVarDecl:u8[] str2
// CHECK-NEXT:        ResolvedCallExpr:u8[] str

// CHECK:   ResolvedVarDecl:i1 bool1
// CHECK-NEXT:     ResolvedBoolLiteral:i1 'true'
// CHECK-NEXT:     | value: 1
// CHECK-NEXT: ResolvedDeclStmt
// CHECK-NEXT:   ResolvedVarDecl:i1 bool2
// CHECK-NEXT:     ResolvedBoolLiteral:i1 'false'
// CHECK-NEXT:     | value: 0
// CHECK-NEXT: ResolvedDeclStmt
// CHECK-NEXT:   ResolvedVarDecl:i1 bool3
// CHECK-NEXT:     ResolvedCallExpr:i1 fnBool