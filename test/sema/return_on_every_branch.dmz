// RUN: compiler %s -res-dump 2>&1 | filecheck %s
// CHECK: [[# @LINE + 1 ]]:1: error: non-void function doesn't return a value
fn noReturn() -> int {}

// CHECK: [[# @LINE + 1 ]]:1: error: non-void function doesn't return a value on every path
fn noReturnAllBranch(x: int) -> int {
    if x == 0 {
        return 1;
    }
}

// CHECK: [[# @LINE + 1 ]]:1: error: non-void function doesn't return a value on every path
fn returnAllBranch2(x: int) -> int {
    if x == 0 {
        return 1;
    } else if x == 1 {
        return 2;
    }
}

fn returnAllBranch(x: int) -> int {
    if x == 0 {
        return 1;
    } else if x == 1 {
        return 2;
    } else {
        return 3;
    }
}

fn alwaysReturnIf() -> int {
    if 1 {
        return 0;
    }

    // unreachable
}

// CHECK: [[# @LINE + 1 ]]:1: error: non-void function doesn't return a value
fn noReturnIf() -> int {
    if 0 {
        // unreachable
        return 0;
    }
}

fn alwaysReturnElseIf() -> int {
    if 0 {
        // unreachable
        return 0;
    } else if 1 {
        return 0;
    }

    // unreachable
}

// CHECK: [[# @LINE + 1 ]]:1: error: non-void function doesn't return a value
fn noReturnElseIf() -> int {
    if 0 {
        // unreachable
        return 0;
    } else if 0 {
        // unreachable
        return 0;
    }
}

fn alwaysReturnElseIf2(x: int) -> int {
    if x {
        return 0;
    } else if 1 {
        return 0;
    }
}

// CHECK: [[# @LINE + 1 ]]:1: error: non-void function doesn't return a value on every path
fn uknownReturnElseIf(x: int) -> int {
    if x > 1 {
        return 0;
    } else if x < 1 {
        return 0;
    } else if x == 0 {
        return 3;
    }
}

fn alwaysReturnWhile() -> int {
    while 1 {
        return 1;
    }

    // unreachable
}

// CHECK: [[# @LINE + 1 ]]:1: error: non-void function doesn't return a value
fn noReturnWhile() -> int {
    while 0 {
        // unreachable
        return 1;
    }
}

// CHECK: [[# @LINE + 1 ]]:1: error: non-void function doesn't return a value on every path
fn uknownReturnWhile(x: int) -> int {
    while x {
        return 1;
    }
}

fn alwaysReturnCondition(x: int) -> int {
    if x || x || (0 - 1) {
        return 0;
    }
}

// CHECK: [[# @LINE + 1 ]]:1: error: non-void function doesn't return a value on every path
fn noReturnCondition(x: int) -> int {
    if x && (0 - 1) {
        return 0;
    }
}

fn alwaysReturnCondition2(x: int) -> int {
    if x && (0 - 1) {
        return 0;
    }

    return 0;
}

// CHECK: [[# @LINE + 1 ]]:1: error: non-void function doesn't return a value
fn noReturnLoop(x: int) -> int {
    while x {}
}

// CHECK: [[# @LINE + 1 ]]:1: error: non-void function doesn't return a value
fn noReturnInfiniteLoop() -> int {
    while 1 {}
}

// CHECK: [[# @LINE + 1 ]]:1: error: non-void function doesn't return a value
fn noReturnNeverRunningLoop() -> int {
    while 0 {}
}

fn returnAllPaths(x: int) -> int {
    if (x || x || 1) {
        return 1;
    } else {

    }
}

fn returnAllPaths2(x: int) -> int {
    if (1 && 1 && 1) {
        return 1;
    } else {

    }
}

fn returnAllPathsElse(x: int) -> int {
    if (x && x && 0) {
    } else {
        return 1;
    }
}

fn returnAllPathsElse2(x: int) -> int {
    if (0 || 0 || 0) {
    } else {
        return 1;
    }
}

fn main() -> void {}
// CHECK-NOT: {{.*}}
