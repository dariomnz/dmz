// RUN: (dmz %s -res-dump 2>&1 || true) | filecheck %s
// RUN: diff <(dmz %s -run 2>&1) <(echo -n -e "Call foo false\nfoo normal defer\nCall foo true\nfoo err defer\nfoo normal defer\nmain normal defer\n")

const e = error {
    ERROR_ONE,
};

extern fn printf(fmt:*u8, ...) -> i32;

fn foo(n: bool) -> !void {
    defer printf("foo normal defer\n");
    errdefer printf("foo err defer\n");
    if (n == true) {
        return e.ERROR_ONE;
    }
}
// CHECK:   ResolvedFunctionDecl foo fn(bool)->!void
// CHECK-NEXT:     ResolvedParamDecl:bool n
// CHECK-NEXT:     ResolvedBlock
// CHECK-NEXT:       ResolvedDeferStmt
// CHECK-NEXT:         ResolvedBlock
// CHECK-NEXT:           ResolvedCallExpr:i32
// CHECK-NEXT:             ResolvedDeclRefExpr:fn(*u8, ...)->i32 printf
// CHECK-NEXT:             ResolvedStringLiteral:*u8 'foo normal defer\n'
// CHECK-NEXT:       ResolvedErrDeferStmt
// CHECK-NEXT:         ResolvedBlock
// CHECK-NEXT:           ResolvedCallExpr:i32
// CHECK-NEXT:             ResolvedDeclRefExpr:fn(*u8, ...)->i32 printf
// CHECK-NEXT:             ResolvedStringLiteral:*u8 'foo err defer\n'
// CHECK-NEXT:       ResolvedIfStmt
// CHECK-NEXT:         ResolvedBinaryOperator:bool '=='
// CHECK-NEXT:           ResolvedDeclRefExpr:bool n
// CHECK-NEXT:           ResolvedBoolLiteral:bool 'true'
// CHECK-NEXT:         ResolvedBlock
// CHECK-NEXT:           ResolvedReturnStmt
// CHECK-NEXT:             ResolvedMemberExpr:error ERROR_ONE
// CHECK-NEXT:               ResolvedDeclRefExpr:errorGroup  e
// CHECK-NEXT:             ResolvedDeferRefStmt
// CHECK-NEXT:               ResolvedBlock
// CHECK-NEXT:                 ResolvedCallExpr:i32
// CHECK-NEXT:                   ResolvedDeclRefExpr:fn(*u8, ...)->i32 printf
// CHECK-NEXT:                   ResolvedStringLiteral:*u8 'foo err defer\n'
// CHECK-NEXT:             ResolvedDeferRefStmt
// CHECK-NEXT:               ResolvedBlock
// CHECK-NEXT:                 ResolvedCallExpr:i32
// CHECK-NEXT:                   ResolvedDeclRefExpr:fn(*u8, ...)->i32 printf
// CHECK-NEXT:                   ResolvedStringLiteral:*u8 'foo normal defer\n'
// CHECK-NEXT:       ResolvedDeferRefStmt
// CHECK-NEXT:         ResolvedBlock
// CHECK-NEXT:           ResolvedCallExpr:i32
// CHECK-NEXT:             ResolvedDeclRefExpr:fn(*u8, ...)->i32 printf
// CHECK-NEXT:             ResolvedStringLiteral:*u8 'foo normal defer\n'

fn main() -> void {
    defer printf("main normal defer\n");
    printf("Call foo false\n");
    try foo(false);
    printf("Call foo true\n");
    foo(true);
}
// CHECK:   ResolvedFunctionDecl main fn()->void
// CHECK-NEXT:     ResolvedBlock
// CHECK-NEXT:       ResolvedDeferStmt
// CHECK-NEXT:         ResolvedBlock
// CHECK-NEXT:           ResolvedCallExpr:i32
// CHECK-NEXT:             ResolvedDeclRefExpr:fn(*u8, ...)->i32 printf
// CHECK-NEXT:             ResolvedStringLiteral:*u8 'main normal defer\n'
// CHECK-NEXT:       ResolvedCallExpr:i32
// CHECK-NEXT:         ResolvedDeclRefExpr:fn(*u8, ...)->i32 printf
// CHECK-NEXT:         ResolvedStringLiteral:*u8 'Call foo false\n'
// CHECK-NEXT:       ResolvedTryErrorExpr:void
// CHECK-NEXT:         ResolvedCallExpr:!void
// CHECK-NEXT:           ResolvedDeclRefExpr:fn(bool)->!void foo
// CHECK-NEXT:           ResolvedBoolLiteral:bool 'false'
// CHECK-NEXT:           | value: 0
// CHECK-NEXT:       ResolvedCallExpr:i32
// CHECK-NEXT:         ResolvedDeclRefExpr:fn(*u8, ...)->i32 printf
// CHECK-NEXT:         ResolvedStringLiteral:*u8 'Call foo true\n'
// CHECK-NEXT:       ResolvedCallExpr:!void
// CHECK-NEXT:         ResolvedDeclRefExpr:fn(bool)->!void foo
// CHECK-NEXT:         ResolvedBoolLiteral:bool 'true'
// CHECK-NEXT:         | value: 1
// CHECK-NEXT:       ResolvedDeferRefStmt
// CHECK-NEXT:         ResolvedBlock
// CHECK-NEXT:           ResolvedCallExpr:i32
// CHECK-NEXT:             ResolvedDeclRefExpr:fn(*u8, ...)->i32 printf
// CHECK-NEXT:             ResolvedStringLiteral:*u8 'main normal defer\n'