pub const file = import("file.dmz");
pub const print = import("print.dmz");
pub const printf = print.printf;
pub const Writer = import("writer.dmz").Writer;

pub struct stdout {
    pub fn writer(buf: []u8) -> Writer {
        let ret = Writer{
            buffer: buf,
            end: 0,
            vtable_ptr: null,
            vtable_flush: &stdout.flush,
        };
        ret.vtable_ptr = &ret;
        return ret;
    }

    fn flush(ptr: *void, w: *Writer, data: []u8, splat: usize) -> !usize {
        let flused = try file.writeAll(file.stdout, w.buffer.ptr, w.end);

        for (0..splat) |i| {
            flused += try file.writeAll(file.stdout, data.ptr, data.len);
        }
        return flused;
    }
}

test "stdout splat" {
    const std = import("std");
    let buf: u8[1024] = {};
    let out = stdout.writer(buf[0..1024]);
    defer out.flush();

    out.print();
    let data = "Message ";
    for (0..10) |i| {
        let num = '0';
        out.writeAll(data[0..std.mem.strlen(data)]);
        out.writeAll(data[0..std.mem.strlen(data)]);
    }
    let new_line = "\n";
    out.writeAll(new_line[0..1]);
    out.print();
}