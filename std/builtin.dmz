const std = import("std");

fn @builtin_test_num() -> i32 {
    // Internaly implemented
    return 0;
}

fn @builtin_test_run(n: i32) -> !void {
    // Internaly implemented
}

fn @builtin_test_name(n: i32) -> *u8 {
    // Internaly implemented
    return "";
}

fn __builtin_main_test() -> void {
    const num_test = @builtin_test_num();
    let result = 0;

    for (0..num_test) |i| {
        result = result + 1;
        const test_name = @builtin_test_name(i);
        // std.io.printf("Run test [%d/%d] '%s'.\n", i + 1, num_test, test_name);
        let err = catch @builtin_test_run(i);
        if (err) {
            std.io.printf("Fail test [%d/%d] '%s' with error '%s'.\n", i + 1, num_test, test_name, err);
            result = result - 1;
        }
    }

    if (result == num_test) {
        std.io.printf("All %d tests passed.\n", num_test);
    } else {
        std.io.printf("%d passed, %d failed.\n", result, num_test - result);
    }
}